// Code generated by go-bindata.
// sources:
// data/dev/Vagrantfile.tpl
// DO NOT EDIT!

package custom

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\xc1\x4e\xdc\x30\x10\xbd\xfb\x2b\x5e\x03\xaa\x40\xea\x66\x55\x54\xf5\x40\x01\x95\x02\x15\x5c\xb6\x88\xdd\xf6\x82\xd0\xca\x24\x93\xc4\xc2\xb1\x2d\x7b\xb2\xbb\x88\xe5\xdf\x3b\xd9\x2c\x88\x8a\x43\x0f\xb1\xec\xf1\x9b\xf7\xe6\xcd\x38\x7f\x74\x1d\xb5\xe3\xbc\xf0\xae\x32\x75\x17\x69\x2f\x3b\xc8\xf6\x51\x7a\xac\x87\xd0\x5a\x01\xc3\x2e\x5f\xb4\xf9\xbd\x5f\xe1\x18\x59\xa3\x53\x63\x0a\x1f\xc3\x38\x44\x2a\x4c\xa2\xaf\x5f\x32\x25\xc0\x1d\x4c\x89\xbb\x80\xe4\x5b\x42\xe2\xae\xaa\xfe\xc9\x0e\xd1\x2f\x4c\x32\xde\x21\x4b\x0d\x59\x9b\x7d\x82\x71\xd6\x38\x3a\xc4\x6e\x2a\xa2\x09\x3c\x90\xdc\x90\x2e\xe5\x06\xdc\x10\xaa\xa8\xeb\x96\x1c\xcb\x41\x33\x96\x84\x2e\x11\x74\x82\x46\x49\x41\xd0\x4f\x4f\xaf\x90\x79\xd0\xdc\xac\x63\x9f\xfc\xfc\xdc\x33\xdd\x66\x8b\x76\xa9\x23\xcd\xab\xae\x57\x15\xb9\x97\xc0\xd2\xc7\x87\xc4\x9a\xfb\xe8\x5d\x4e\xba\x68\x36\x96\x9d\x6e\xa9\x37\xfc\xae\xe8\x92\xe2\x5e\x7f\x39\x74\x26\x0c\x18\x20\xe4\xe4\xf4\xbd\xa5\xf9\xa2\x8d\x9d\x9b\x9b\x30\xb7\xde\x3f\x48\x03\x8e\x51\x69\x9b\x68\x03\x23\x57\xaa\x61\xed\x3f\xb5\x75\x2a\x90\xa3\xa3\xe9\xd9\xcd\xd5\xf5\x4c\x25\x62\x8c\x48\xa9\x1d\x78\x66\x3f\xa2\x15\x15\x87\xe8\xd7\x8e\x49\x2a\x69\x5b\xed\x4a\x2c\x0d\x37\xf0\x1d\x87\x8e\x61\x7d\x5d\x53\x89\x7b\xd9\x3a\xcf\x28\x4d\x0a\x56\x3f\x52\xa9\x3c\xed\xed\xe3\x09\xbb\xdf\x71\x70\xf2\xf1\x33\xd6\x03\x32\x62\xc4\x1b\x6a\x9c\x60\x5c\xd2\x62\xec\x3a\x6b\xbf\xe1\xf9\x55\x51\x50\x87\x2f\xdc\x1a\x32\xd3\xca\xac\x84\xbf\xa5\x94\x74\x4d\xca\xdb\x0d\x2b\x15\x8d\x47\x76\xdb\x67\xdc\x89\x44\xb6\x65\x38\xdb\x3e\x1d\xe3\x6a\x4c\xa7\x97\xa8\x7c\x14\xf7\x89\x45\x56\x78\x8d\x53\xa6\xc2\x07\xd4\x91\x02\xb2\xdf\x89\xce\x27\x53\x29\x3a\xc3\x98\xb8\x18\xa7\xd4\xf4\x5f\x39\x1f\xfa\x8d\x93\x37\xe5\xc9\xf4\x5d\xdf\xb8\x8d\xea\x9b\xc4\x35\x52\x27\x53\x60\x22\x8c\xf4\xff\x68\x84\xc0\xd3\x90\x90\x28\x2e\x4c\x21\x87\xd4\x20\x92\x4c\x3f\xb2\xaa\x8c\x52\xb4\x0a\x3e\x32\xce\x2f\x7e\x5c\x9d\x4e\xe6\x3f\x6f\x7e\x4d\x66\x17\x93\xf3\x63\xe7\x9d\x71\x62\x42\x17\x6c\x16\x32\x1c\x6f\x91\x5d\x39\x49\xb3\xb6\x77\x7a\x39\x9b\x5d\x4f\x51\x46\xb9\x8b\x1b\xcb\xa7\x81\xf3\x3c\xcf\xd4\x8b\x9c\x0e\x3c\xaa\x65\xb0\x5d\x28\x35\xd3\xbb\xb0\x19\xa8\x30\x7a\xdc\x84\x58\xfe\xc2\xd4\xd7\x31\x6a\x98\x43\x52\xdb\x97\xf1\x37\x00\x00\xff\xff\xbe\x3b\x6b\x6d\x9f\x03\x00\x00"

func dataDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataDevVagrantfileTpl,
		"data/dev/Vagrantfile.tpl",
	)
}

func dataDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dev/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/dev/Vagrantfile.tpl": dataDevVagrantfileTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"dev": &bintree{nil, map[string]*bintree{
			"Vagrantfile.tpl": &bintree{dataDevVagrantfileTpl, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

