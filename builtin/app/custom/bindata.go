// Code generated by go-bindata.
// sources:
// data/dev/Vagrantfile.tpl
// data/sentinels/packer_path.tpl
// data/sentinels/terraform_path.tpl
// data/sentinels/vagrant_path.tpl
// DO NOT EDIT!

package custom

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x4b\x4f\xe4\x38\x10\xbe\xe7\x57\xd4\x9a\x87\x1a\x89\x24\x5a\xb4\xda\x03\x0b\x68\x59\x1e\x82\x4b\x2f\xa2\x7b\xe6\x82\x50\xe4\x4e\x2a\x89\x45\x62\x5b\x76\xa5\x1f\xea\xee\xff\x3e\xe5\xa4\x9b\x01\x71\x98\x39\x24\xb2\xcb\xdf\xf7\xb9\x1e\x5f\xf2\x5d\x56\x4e\x6a\x4a\x72\xa3\x4b\x55\x75\x0e\x47\xe2\x4c\x9c\x40\x61\x60\x33\x84\x36\x11\xc0\xb0\x4a\xe6\x6d\x32\x33\x4b\xb8\x04\x51\x4b\x5f\xab\xdc\x38\x9b\x5a\x87\xb9\xf2\xf8\xf7\x5f\x22\x62\xe0\x01\x4c\x90\x3a\x0b\xde\xb4\x08\x9e\xba\xb2\xfc\xc4\xb6\xce\xcc\x95\x57\x46\x83\xf0\x35\x36\x8d\x38\x05\xa5\x1b\xa5\xf1\x1c\x0e\x7d\xee\x94\xa5\x41\xe4\xde\x74\xba\x90\x14\x80\xfb\xbc\x86\xdd\x48\x95\x20\xf5\xea\x84\x51\xeb\x23\x28\x8d\x83\x42\x39\xd6\xe0\xe5\x9e\x91\x71\xc4\x27\x05\xce\xe1\x68\xcb\xb0\x70\xce\x09\xa7\x86\xc8\xa4\x3f\x51\xf1\x7a\x1d\xe8\x8d\x31\x36\xb9\xe1\x28\xa1\x83\xed\x56\x7c\xca\xd6\xaf\x74\x8e\x45\x56\x9a\xa6\xe0\x53\xc1\x8c\x20\xc6\xa8\xd3\xb0\xf8\xdd\xc2\x44\x5e\xc0\xc1\x9a\x09\x5b\x38\x3e\x86\x19\x37\x6e\xb7\x4d\x5b\xa9\x74\xe2\x6b\x31\x14\x83\xba\x08\xf5\x70\xd2\x7d\x0b\x9e\x51\x16\xa1\x30\xaa\x11\x4a\x27\xab\x16\x35\xf1\x46\x12\x2c\x10\x3a\x8f\x20\x3d\x48\x28\xd0\x06\xf6\xfa\x1d\x92\x59\x49\xf5\xc6\x05\xf2\xb6\x57\x7a\x11\xf3\x76\x21\x1d\x66\x65\x17\xf2\xe3\xc4\xf6\x81\x85\x71\x6f\x9e\xfa\x6e\x88\xd7\x04\x65\x5e\xf7\x53\xd7\xb2\xc5\x30\xf3\x2f\xe5\x71\x13\x46\xe1\x70\x30\x87\x1d\x30\x00\x36\x41\x2d\x67\x0d\x66\xf3\xd6\x75\x3a\x53\x36\xe3\xa6\xbe\xb1\x07\x2e\xa1\x94\x8d\xc7\x1e\xc6\xc5\x45\xc3\x3b\x3c\xd1\x6e\xd8\x0c\xb9\xb8\x98\xdc\x3c\x3f\x3e\x4d\x23\x8f\x04\x31\x46\xd1\x01\x84\x49\xc5\xb8\xc4\xfc\x1c\xc2\xbb\x23\xe4\x4c\xda\x56\xea\x02\x16\x8a\x6a\x30\x1d\xd9\x8e\xa0\x31\x55\x85\x05\xcc\x78\xa9\x0d\xf1\x44\xbc\x6d\xe4\x0a\x8b\xc8\xe0\xe8\x04\xd6\x70\xf8\x2f\x9c\x5d\x1d\xff\x09\x9b\x01\xe9\x20\xa6\x5e\x1a\xae\x20\x65\x77\xa4\xba\x6b\x9a\x7f\x60\xfb\x7e\x23\xa3\xce\xf7\xda\x12\xd8\xd6\xa5\x5a\xb2\x7e\x8b\xde\xcb\x0a\x23\xd3\xf4\xaa\x98\xd7\x06\xc4\x4b\x60\xbc\xf2\x15\x62\xa7\x70\xb3\x73\xa9\xd2\x15\x4c\x26\x0f\xbd\x33\x4b\xe9\x83\xab\x58\x57\xe9\x88\x7d\xfb\x07\x54\x0e\x2d\x88\x6f\x1e\x6f\xc7\x13\x4e\x5a\x40\x8a\x94\xa7\xde\xd7\xe1\x29\xb2\xa1\xdf\x70\xf5\x21\x3d\x9e\xbe\x0e\x8d\xeb\x6f\xfd\x40\xdc\x80\xef\x78\x0a\x84\x08\xb1\xfc\x95\x0c\x0b\x18\x1c\x08\x1e\xdd\x5c\xe5\xbc\x61\x17\x3a\xe4\xe9\x3b\x8a\x4a\x15\x45\xb8\xb4\xc6\x11\xdc\xde\xfd\xf7\x78\x3d\xce\xee\x9f\xff\x1f\x4f\xef\xc6\xb7\x97\xda\x68\x15\x3e\x0d\x99\x93\x9a\xf3\x70\x4c\x03\xe2\x51\x33\xad\x69\x42\xa5\x0f\xd3\xe9\xd3\x04\x0a\xc7\x67\xae\x2f\xf9\xda\x52\x92\x24\x22\xda\x5f\x27\x2d\xc5\x15\x0f\xb6\xb3\xfc\xd5\xe1\x97\xb0\x1a\xa4\x20\x5e\xf5\x21\xe2\x1f\x91\x0f\x79\xc4\x35\x91\xf5\xd1\xce\x19\x3f\x02\x00\x00\xff\xff\xcd\x4f\xf8\xd9\xa2\x04\x00\x00"

func dataDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataDevVagrantfileTpl,
		"data/dev/Vagrantfile.tpl",
	)
}

func dataDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/dev/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataSentinelsPacker_pathTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x1c\x8d\x41\x0a\x83\x40\x14\x43\xf7\x73\x8a\x9c\xa0\x57\x69\x17\xdd\x97\x3f\x35\xc5\xc1\xd1\x91\xdf\x8c\xa5\x88\x77\xf7\xe3\x2a\xbc\x84\xf0\xf6\x1d\xb9\x97\x3a\xbc\x56\x7b\x4f\xf4\x08\x8d\x38\x8e\x94\x9e\x23\x71\x81\xe5\xb6\x11\xe5\x0b\xc3\x66\xb5\x13\x4e\x1b\x90\xff\xb8\x4b\x0d\x26\x78\x5f\x54\x66\x22\x68\x5a\xda\x0f\x8a\xa7\x38\xaf\xd5\xc4\x14\x65\xec\xf8\x34\xc7\xe3\x32\xdc\xd2\x19\x00\x00\xff\xff\x1c\x02\xe8\xeb\x73\x00\x00\x00"

func dataSentinelsPacker_pathTplBytes() ([]byte, error) {
	return bindataRead(
		_dataSentinelsPacker_pathTpl,
		"data/sentinels/packer_path.tpl",
	)
}

func dataSentinelsPacker_pathTpl() (*asset, error) {
	bytes, err := dataSentinelsPacker_pathTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sentinels/packer_path.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataSentinelsTerraform_pathTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x8e\x4b\x0e\x83\x30\x0c\x44\xf7\x39\xc5\x9c\xa0\x57\xe9\x86\x3d\x32\x8d\x2b\x22\x12\x1c\xb9\x0e\x28\x42\xdc\xbd\x86\xaa\xcb\x79\xfe\xbc\x39\x0e\x44\xae\x59\xfa\x68\xac\x4a\x6f\xd1\x32\x56\xb2\x19\xe7\x19\xc2\x30\x33\xee\x40\x93\x6c\x8c\xf4\x01\x61\xa3\xdc\x18\xca\x14\x31\x75\x3c\xcd\x04\x64\xd0\xb6\x5a\x2a\x0c\x4f\xcb\x2a\x3b\xf6\xd9\x61\x4c\xca\x2f\x13\xed\xc1\x71\x16\x59\xae\x4d\x37\xc0\xfc\xef\xf0\xd7\xa1\x48\x6c\xf9\x3e\xfd\x35\xf1\xf1\x65\xaa\xf5\x11\xbe\x01\x00\x00\xff\xff\xc8\xc6\x72\x2b\x9e\x00\x00\x00"

func dataSentinelsTerraform_pathTplBytes() ([]byte, error) {
	return bindataRead(
		_dataSentinelsTerraform_pathTpl,
		"data/sentinels/terraform_path.tpl",
	)
}

func dataSentinelsTerraform_pathTpl() (*asset, error) {
	bytes, err := dataSentinelsTerraform_pathTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sentinels/terraform_path.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataSentinelsVagrant_pathTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x24\xcd\x41\x0a\xc2\x40\x0c\x85\xe1\xfd\x9c\xe2\x9d\xc0\xab\xb8\x11\xb7\xe5\xd5\x09\xce\xa0\x4e\x24\xa6\x29\xa5\xf4\xee\x06\x5d\xfe\x1f\x0f\xde\xbe\xa3\x4a\x4c\xc1\xbb\x71\xf8\xf4\xa6\x37\x1c\x47\x29\x97\x26\xf8\x05\x67\x0d\x41\xff\x80\x08\x3e\x17\x81\x09\x2b\xe6\x0d\x67\x77\x05\x1d\xb6\x0c\xef\x2f\x41\xd6\x63\xe8\x8a\xb5\x25\xd6\x6e\x72\x73\xb5\xad\x24\xe7\x02\xd7\xff\x01\xfa\x38\x95\x6f\x00\x00\x00\xff\xff\xd1\xf8\x61\x5e\x74\x00\x00\x00"

func dataSentinelsVagrant_pathTplBytes() ([]byte, error) {
	return bindataRead(
		_dataSentinelsVagrant_pathTpl,
		"data/sentinels/vagrant_path.tpl",
	)
}

func dataSentinelsVagrant_pathTpl() (*asset, error) {
	bytes, err := dataSentinelsVagrant_pathTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/sentinels/vagrant_path.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/dev/Vagrantfile.tpl": dataDevVagrantfileTpl,
	"data/sentinels/packer_path.tpl": dataSentinelsPacker_pathTpl,
	"data/sentinels/terraform_path.tpl": dataSentinelsTerraform_pathTpl,
	"data/sentinels/vagrant_path.tpl": dataSentinelsVagrant_pathTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"dev": &bintree{nil, map[string]*bintree{
			"Vagrantfile.tpl": &bintree{dataDevVagrantfileTpl, map[string]*bintree{
			}},
		}},
		"sentinels": &bintree{nil, map[string]*bintree{
			"packer_path.tpl": &bintree{dataSentinelsPacker_pathTpl, map[string]*bintree{
			}},
			"terraform_path.tpl": &bintree{dataSentinelsTerraform_pathTpl, map[string]*bintree{
			}},
			"vagrant_path.tpl": &bintree{dataSentinelsVagrant_pathTpl, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

