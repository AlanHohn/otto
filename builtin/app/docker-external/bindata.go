// Code generated by go-bindata.
// sources:
// data/aws-simple/deploy/cloud-init.sh.tpl
// data/aws-simple/deploy/main.tf.tpl
// data/aws-vpc-public-private/deploy/cloud-init.sh.tpl
// data/aws-vpc-public-private/deploy/main.tf.tpl
// data/common/dev/Vagrantfile.tpl
// data/common/dev-dep/Vagrantfile.fragment.tpl
// DO NOT EDIT!

package dockerext

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAwsSimpleDeployCloudInitShTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x91\x41\x6b\xe3\x30\x10\x85\xef\xfa\x15\x2f\xc9\x59\x11\xec\x6e\x2e\x21\xbb\x97\xcd\x2e\x14\x02\x85\x86\xd2\x43\x29\x41\x91\x27\xb1\xa8\x2d\x0b\x69\x9c\x34\xa4\xf9\xef\x95\x6c\xb7\x09\xf4\x66\x9e\xbe\xf7\xe6\xcd\x78\x32\x52\x5b\xeb\xd4\x56\xc7\x52\x44\x62\x48\x12\x62\x82\x3b\x17\x59\x57\x15\xcc\xe3\xc3\x0a\x76\x87\x23\xa1\xd4\x07\x02\x37\x42\x7b\x96\xfb\x04\xb6\xbe\xd0\x4c\x90\xa7\x2f\xc5\x0e\x26\x79\x82\x69\x43\x75\x9b\xb3\x6c\xcc\x2b\x05\x91\x65\xc8\xb8\x5e\xa1\x64\xf6\x71\xae\x54\xf2\x4d\x8b\xee\x71\x6a\x9a\x5a\xe1\x1d\xa9\x47\x32\xfe\x0d\x94\xd3\xb9\x24\x98\xc6\xb1\xb6\x2e\xd9\x7b\x10\xa6\x7f\x3b\x9f\x11\x5a\xb7\xd1\x61\x1f\x71\xb9\x40\x4a\xa7\x6b\xfa\x3d\x4e\x72\xfe\x48\xd2\x38\x23\xbd\x67\x63\x6b\xbd\xcf\x5a\xce\x7e\x0a\x76\x88\x8e\x14\x0e\xd6\x90\x30\x9a\xf1\x47\x11\x1b\x65\x9d\x65\x75\x8d\x48\xa5\xdc\x0e\x8b\xc5\xbf\xfb\xff\xa2\xa0\x68\x82\xf5\x6c\x1b\x87\xf1\x72\xa8\xf2\xd9\x6d\x8e\x9b\xb9\x42\xa4\xad\x03\x23\x81\x3b\x5b\x51\x3c\x45\xa6\x1a\xda\x15\xe8\x74\x2a\x86\x56\x09\x6b\x7c\xa6\xd2\x1e\x15\x1d\xa8\xc2\xf3\xe8\xc7\xcf\x5f\xb3\x17\x21\x02\x45\xaf\x8f\x4e\x08\xdf\x44\x96\x1d\x47\x6f\x64\x10\x2b\x22\x8f\x59\x9a\xd0\x75\x11\x80\x6a\x63\xe8\x7e\xe1\x70\x9d\x7e\xf4\xb5\x8d\xa0\x3c\xb7\xa7\xf3\x1a\xe9\x00\xeb\x0e\xb9\x3d\xc0\x37\xd3\x47\x00\x00\x00\xff\xff\x19\x5f\x9d\x4a\x17\x02\x00\x00"

func dataAwsSimpleDeployCloudInitShTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleDeployCloudInitShTpl,
		"data/aws-simple/deploy/cloud-init.sh.tpl",
	)
}

func dataAwsSimpleDeployCloudInitShTpl() (*asset, error) {
	bytes, err := dataAwsSimpleDeployCloudInitShTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/deploy/cloud-init.sh.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsSimpleDeployMainTfTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x4d\x8f\xe4\x34\x10\xbd\xf7\xaf\x28\x65\x98\xd5\xac\x44\x27\xb3\xcd\x8a\x0b\x82\x0b\x08\x6e\x20\x71\xe1\x80\x56\x91\x13\x57\xba\xad\x71\x6c\xcb\x1f\x3d\xb4\x5a\xf9\xef\x94\xed\xce\x3a\x69\x7a\x97\x19\x69\x11\x99\xc3\x24\xaf\xca\x7e\x55\xf5\xca\xe5\xbe\x83\x5f\x50\xa1\x65\x1e\x39\x74\x27\xf8\xcd\x7b\xfd\x35\x70\x0d\x4a\x7b\x40\x2e\x3c\x8c\x4c\x05\x26\xe5\x69\xb3\x39\x32\x2b\x58\x27\x11\x2a\xa1\x06\xcb\x5a\xc1\x2b\x38\x4f\x0b\x98\x3d\xbb\x96\xf5\x3d\x3a\xd7\x3e\xe1\xe9\x86\xd1\x61\x6f\xd1\x7f\xc2\x68\x71\x2f\xb4\xba\x32\x90\x6b\xab\xd8\x88\x09\x5e\x2e\x18\x05\x41\xc0\x71\x60\x41\x7a\xf8\x3e\x21\xdb\xdd\xbb\x6f\xbf\x79\xe4\xef\xdf\x57\x30\xad\xa2\x75\x9e\xa9\x1e\x5b\x7f\x32\x78\xb5\xca\xef\xea\x51\xf4\x56\xaf\x57\xb8\xd0\x29\x8a\xd3\x84\x4e\x8a\xfe\x2a\xa2\xa3\xe9\xdb\x5e\x70\x7b\x03\xbe\x14\x64\x63\xac\x3e\x0a\x8e\x36\xe5\x45\xd0\x06\xa0\x94\x25\xb2\x7e\x75\xa6\x85\xf5\xba\x5c\x53\x45\x6e\xa5\x40\x6b\xb7\x82\x27\xb7\x5c\x2a\x88\xcf\xca\x2d\xe3\xe4\x42\x41\x58\x74\x3a\xd8\xbe\x54\x3e\x58\xe1\x4f\xed\xde\xea\x60\x2a\x02\x8d\xc9\x91\xc5\xea\xe6\x7d\xce\xe7\xfc\x31\x4d\xdb\xbc\xe5\x2c\x73\xe2\xcc\x09\x16\xbe\xfc\x4d\x26\xb2\x09\xb5\x27\x3a\x97\xf6\x03\xa0\xf4\xbd\xee\xb5\xcc\xe1\x6d\xdf\x25\x70\xb0\x7a\x6c\x8d\xb6\x3e\x81\x8f\x09\xf3\x7a\x46\x0a\x16\x4b\xdb\x76\x52\xf7\x4f\x8e\xb0\x3f\x17\x64\xd1\x32\x55\x1f\xc8\x6b\xfa\x37\xce\xca\xf7\xa6\xba\x41\xbb\xdb\xdd\xe0\xbd\x80\xd7\xc4\x8f\x75\xfa\x6b\x1e\x0b\x25\xfe\x67\x59\x5e\x93\x11\xdd\x1d\xfc\x84\x46\xea\x13\x30\xea\x0a\x0f\x7a\x80\xb9\x8f\xdd\x95\xb6\x33\xbe\x54\x95\x4e\x03\x94\xa7\x34\xc9\x28\x92\x98\xab\x23\x51\xcc\x2b\x38\x37\x64\x3e\x09\x24\xfc\x6a\x9f\xd5\x01\x49\x8e\xf3\x41\xbd\x22\x9c\xe1\xe4\x13\x1c\xda\x96\x33\xcf\x8a\xcf\x20\x24\x3e\xd0\x7f\xc3\xfc\xa1\x1e\x35\x0f\x12\xa7\xa6\x97\x3a\xf0\xad\x50\xc2\xd7\xee\x50\xbd\xcd\x3d\x16\x5b\x60\xdd\xc5\x14\xd5\xdc\x23\xff\x6c\xf1\x9a\x4a\x51\xc7\xfe\xfc\x10\x17\x7b\xb6\x9f\x75\xfb\x35\x06\xb9\xea\xf6\x6a\xd6\xb7\xd7\x4a\x61\xef\xe3\xd1\xca\xbe\x31\xe0\x65\x11\x43\x17\x94\x0f\xb9\xb3\x0e\xda\xf9\x75\x81\x1d\xca\xa1\xce\x25\x69\x85\x29\xdb\xde\xc1\x1f\x8c\x06\xe9\xa0\x2d\x94\xcc\xe0\x01\x95\x0b\x24\xe4\x47\x2d\x40\x38\x18\x02\x4d\x5a\xe8\xb4\x4e\xe3\x18\x69\x09\xc2\x48\xc3\x44\xed\x41\xab\xb7\x9b\xd4\x75\x47\xe1\x28\xc2\x38\x5d\x2c\x8e\xe4\xb8\xc5\xbf\xb0\xaf\x2e\x11\x0b\x25\x85\xc2\x54\x95\xe7\x03\xd5\x96\x04\xa4\x61\x6e\x9e\x84\x94\xb0\x7d\x5c\xf2\xef\x7e\x68\x38\x1e\x1b\x45\x8c\xdf\xc5\x81\xef\x24\xa2\x81\x5d\x7c\x57\x58\x7a\xfe\x7c\x9f\x02\xe7\xc2\xd2\xde\xf4\x1a\x14\x09\x48\xfc\x2d\x21\xae\xee\x82\x90\x1c\xee\xa7\x94\xe5\xcf\x1f\x8d\x40\xc5\xa5\x55\x52\x6b\x53\xff\x48\xa8\xa7\x68\xa7\x09\x1e\x92\xfb\x2b\xd3\x18\x9f\x22\xf7\xd6\x40\xe3\x47\xd3\x68\xba\x9f\x9a\x12\xc5\xf6\x26\x51\x89\x7e\xc5\x13\x7b\x6d\x26\xb8\x9c\x9f\xdc\x07\x91\x60\x9a\x9a\xac\x2b\x47\xe7\x85\xca\x69\x90\xf9\x15\xac\x37\x49\x3f\x9f\x5c\xcf\x5f\x9a\x16\x95\xef\xcd\x1b\xe8\x98\x3b\x40\xdd\x8c\x4c\xa8\x78\x34\x72\x9e\x49\x24\x54\x3c\xea\x74\xff\x02\xd1\x78\x9e\x2b\x2f\x56\x2d\xfb\x7f\x51\xd9\xf2\x96\xff\x93\x7a\x9f\x25\xff\x82\x22\x7e\x92\xe7\x55\x5a\xde\xc1\xef\xc4\x7e\x44\x60\xea\x04\x1e\x47\xba\x4b\x98\x3d\xc5\xac\x69\x54\x69\x2b\x68\x82\x3c\xd3\x90\x60\x1c\xd3\xed\xb3\x50\xdb\xc1\x83\x18\xe2\xb2\x57\x4a\x67\x47\xd8\xda\xa1\xe4\x54\xee\x24\x1d\xbc\x09\x9e\x7e\x51\x5d\x6e\x99\x23\x93\xe1\x72\x7d\x2c\x2f\xa2\x34\x7b\x97\x83\x70\xda\xfc\x1d\x00\x00\xff\xff\xde\x51\x4c\xe4\x67\x0a\x00\x00"

func dataAwsSimpleDeployMainTfTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleDeployMainTfTpl,
		"data/aws-simple/deploy/main.tf.tpl",
	)
}

func dataAwsSimpleDeployMainTfTpl() (*asset, error) {
	bytes, err := dataAwsSimpleDeployMainTfTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/deploy/main.tf.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsVpcPublicPrivateDeployCloudInitShTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x91\x41\x6b\xe3\x30\x10\x85\xef\xfa\x15\x2f\xc9\x59\x11\xec\x6e\x2e\x21\xbb\x97\xcd\x2e\x14\x02\x85\x86\xd2\x43\x29\x41\x91\x27\xb1\xa8\x2d\x0b\x69\x9c\x34\xa4\xf9\xef\x95\x6c\xb7\x09\xf4\x66\x9e\xbe\xf7\xe6\xcd\x78\x32\x52\x5b\xeb\xd4\x56\xc7\x52\x44\x62\x48\x12\x62\x82\x3b\x17\x59\x57\x15\xcc\xe3\xc3\x0a\x76\x87\x23\xa1\xd4\x07\x02\x37\x42\x7b\x96\xfb\x04\xb6\xbe\xd0\x4c\x90\xa7\x2f\xc5\x0e\x26\x79\x82\x69\x43\x75\x9b\xb3\x6c\xcc\x2b\x05\x91\x65\xc8\xb8\x5e\xa1\x64\xf6\x71\xae\x54\xf2\x4d\x8b\xee\x71\x6a\x9a\x5a\xe1\x1d\xa9\x47\x32\xfe\x0d\x94\xd3\xb9\x24\x98\xc6\xb1\xb6\x2e\xd9\x7b\x10\xa6\x7f\x3b\x9f\x11\x5a\xb7\xd1\x61\x1f\x71\xb9\x40\x4a\xa7\x6b\xfa\x3d\x4e\x72\xfe\x48\xd2\x38\x23\xbd\x67\x63\x6b\xbd\xcf\x5a\xce\x7e\x0a\x76\x88\x8e\x14\x0e\xd6\x90\x30\x9a\xf1\x47\x11\x1b\x65\x9d\x65\x75\x8d\x48\xa5\xdc\x0e\x8b\xc5\xbf\xfb\xff\xa2\xa0\x68\x82\xf5\x6c\x1b\x87\xf1\x72\xa8\xf2\xd9\x6d\x8e\x9b\xb9\x42\xa4\xad\x03\x23\x81\x3b\x5b\x51\x3c\x45\xa6\x1a\xda\x15\xe8\x74\x2a\x86\x56\x09\x6b\x7c\xa6\xd2\x1e\x15\x1d\xa8\xc2\xf3\xe8\xc7\xcf\x5f\xb3\x17\x21\x02\x45\xaf\x8f\x4e\x08\xdf\x44\x96\x1d\x47\x6f\x64\x10\x2b\x22\x8f\x59\x9a\xd0\x75\x11\x80\x6a\x63\xe8\x7e\xe1\x70\x9d\x7e\xf4\xb5\x8d\xa0\x3c\xb7\xa7\xf3\x1a\xe9\x00\xeb\x0e\xb9\x3d\xc0\x37\xd3\x47\x00\x00\x00\xff\xff\x19\x5f\x9d\x4a\x17\x02\x00\x00"

func dataAwsVpcPublicPrivateDeployCloudInitShTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsVpcPublicPrivateDeployCloudInitShTpl,
		"data/aws-vpc-public-private/deploy/cloud-init.sh.tpl",
	)
}

func dataAwsVpcPublicPrivateDeployCloudInitShTpl() (*asset, error) {
	bytes, err := dataAwsVpcPublicPrivateDeployCloudInitShTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-vpc-public-private/deploy/cloud-init.sh.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsVpcPublicPrivateDeployMainTfTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x0c\x94\x66\x91\x05\x2a\xc9\x9b\x2e\x7a\x29\xda\x4b\x8b\xf6\xd6\x02\xbd\xf4\x50\x2c\x04\x4a\x1c\xd9\x44\x28\x92\xe0\x87\x53\xc3\xd0\x7f\xef\x90\xb4\x22\xc9\x49\x16\x31\x90\xa2\x0e\xe2\x48\x6f\x86\x7c\x33\xf3\x86\xc3\xdc\xc0\x6f\xa8\xd0\x32\x8f\x1c\xda\x23\xfc\xe1\xbd\xfe\x16\xb8\x06\xa5\x3d\x20\x17\x1e\x06\xa6\x02\x93\xf2\xb8\xd9\x1c\x98\x15\xac\x95\x08\x85\x50\xbd\x65\x8d\xe0\x05\x9c\xc6\x05\xcc\x1e\x5d\xc3\xba\x0e\x9d\x6b\x1e\xf0\xf8\x82\xd1\x61\x67\xd1\xbf\x62\xb4\xb8\x13\x5a\x5d\x18\xc8\xb5\x51\x6c\xc0\x04\x2f\x17\x0c\x82\x20\xe0\xd8\xb3\x20\x3d\xfc\x98\x90\xf2\xfe\xd3\xf7\xdf\x6d\xf9\xe7\xcf\x05\x8c\xab\x68\x9d\x67\xaa\xc3\xc6\x1f\x0d\x5e\xac\xf2\xf7\xd5\x20\x3a\xab\xd7\x2b\x8c\x15\x07\xaa\x48\xe3\x42\xab\x28\xde\x67\x89\x9a\xd0\x4a\xd1\xbd\x6a\x3e\x98\xae\xe9\x04\xb7\x2f\xc0\x67\xdf\x05\xda\x32\xe7\x29\xef\x66\xaf\x9d\xbf\x58\x30\x99\x82\xc3\xbc\xd7\xc6\x58\x7d\x10\x1c\x6d\xaa\x18\x41\x1b\x80\xb9\xe0\x31\x9f\x6f\x4e\xb4\xbc\x5a\x0b\x31\x16\xe4\x36\x97\x7e\xed\x36\xe3\xc9\x2d\x8b\x00\xf1\xb3\x72\xcb\x38\xb9\x50\x10\x16\x9d\x0e\xb6\x9b\x35\x0d\x56\xf8\x63\xb3\xb3\x3a\x98\x82\x40\x63\x72\x64\x51\xb7\xbc\xcf\xe9\x94\x5f\xc6\xb1\xcc\x5b\x4e\x0d\x94\x38\x73\x5d\x66\xbe\xfc\x4e\x26\xb2\x09\xb5\x23\x3a\x97\xf6\x03\xa0\xf4\xbd\xee\xb4\xcc\xe1\x95\x9f\x12\xd8\x5b\x3d\x34\x46\x5b\x9f\xc0\x6d\xc2\xbc\x9e\x90\x19\x8b\x8a\x34\xad\xd4\xdd\x83\x23\xec\xef\x05\x59\xb4\x8c\xc5\x17\xf2\x1a\xe9\x17\xff\x33\xc6\x6d\x95\x7e\xea\xed\x99\x8b\x6a\x79\x03\xbf\xa0\x91\xfa\x08\x8c\x14\xf2\xa0\x7b\x98\xba\xd5\x5d\xd4\x79\xc2\x97\x15\xa6\x9e\x87\xf9\x33\x0b\x36\x88\x54\xd8\x55\xe3\xcf\xe6\x15\x9c\x9b\x63\x6a\xe4\xf5\x3e\xcf\x8e\x41\x72\x9e\x8e\xe4\x05\xe9\x04\x27\x9f\xd8\xb1\x0d\x67\x9e\xcd\x3e\xbd\x90\x78\x47\x7f\x0d\xf3\xfb\x6a\xd0\x3c\x48\x1c\xeb\x4e\xea\xc0\x4b\xa1\x84\xaf\xdc\xbe\xf8\x98\x35\x8f\x92\xac\xbb\x8a\xa8\x27\xcd\x9e\xb7\x5c\x45\xe5\xa8\x62\x6c\x5f\xe2\x62\xcf\x76\x93\x76\xbf\xc7\x20\x57\xdd\x57\xa4\xb2\xd3\x57\xa7\x95\xc2\x2e\x1e\xae\xb3\x6f\x0c\x78\x59\xc8\xd0\x06\xe5\x43\x91\x6c\xf1\x64\xae\x8b\xec\x50\xf6\x4f\xd5\x11\x66\xcc\x7e\xcb\x93\x3c\xd7\x65\x89\x5e\x38\x26\xd2\x67\x8e\x11\x9d\x23\xbd\x81\xbf\x18\x4d\xe1\x5e\x5b\x98\x8b\x05\x77\xa8\x5c\xa0\xfe\x78\x92\x18\x84\x83\x3e\xd0\x98\x86\x56\xeb\x34\xcb\x91\x96\x20\x0c\x34\x2f\xd4\x0e\xb4\xfa\xb8\x49\xcd\x7c\x10\x8e\x38\xe2\x00\xb1\x38\x90\x63\x89\xff\x60\x57\x9c\x8b\x20\x94\x14\x0a\x53\xa1\x1f\xf7\x24\x17\xf5\x05\xdd\x04\xe6\x41\x48\x09\xe5\x76\xc9\x7f\xff\x53\xcd\xf1\x50\x2b\x62\xfc\x21\xde\x16\x4e\x22\x1a\xb8\x8f\xcf\x0a\xcf\xdd\x4d\x5f\xa7\xdb\x14\x38\x17\x96\xf6\xa6\xc7\xa0\xa8\x27\x62\x8e\x84\xb8\xaa\x0d\x42\x72\xb8\x1d\x53\x96\xbf\x3e\x19\x81\xf4\xa2\x55\x52\x6b\x53\xfd\x4c\xa8\xa7\x68\xc7\x11\xee\x92\xfb\x95\x69\x0c\x0f\x91\xbb\x34\x50\xfb\xc1\xd4\x9a\x2e\xb7\x7a\x8e\xa2\x7c\x91\x68\x8e\x7e\xc5\x13\xdb\x77\x22\x38\x1f\xcb\xdc\x5a\x91\x60\x1c\xeb\xac\x2c\x47\xd2\x50\xe5\x34\xc8\x7c\x05\xeb\x8b\xa4\x5f\x4f\xae\xe3\x6f\x4d\x8b\xca\xf7\xe1\x43\x6c\xbb\x3d\x54\xf5\xc0\x84\x8a\xa7\x6d\x9a\x77\x24\x12\x2a\x1e\x75\xba\x7d\x83\x68\x3c\x8f\xab\x37\xab\x96\xfd\xdf\x55\xb6\xbc\xe5\xff\xa4\xde\x57\xc9\xdf\x51\xc4\x57\x79\xae\xd2\xf2\x06\xfe\x24\xf6\x03\x02\x53\x47\xf0\x38\xd0\x15\xc5\xec\x31\x66\x4d\xd3\x4f\x5b\x41\x13\xe4\x91\x86\x04\xe3\x98\x2e\xb5\x85\xda\x0e\xee\x44\x1f\x97\x5d\x29\x9d\x1d\xa0\xb4\xfd\x9c\xd3\x7c\xd5\xe9\xe0\x4d\xf0\xf4\xef\xd8\xf9\xf2\x3a\x30\x19\xce\xb7\xd2\xf2\x7e\x4b\xe3\x7c\x35\x5b\xc7\xcd\xbf\x01\x00\x00\xff\xff\x54\xe8\x6e\x8c\xa5\x0a\x00\x00"

func dataAwsVpcPublicPrivateDeployMainTfTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsVpcPublicPrivateDeployMainTfTpl,
		"data/aws-vpc-public-private/deploy/main.tf.tpl",
	)
}

func dataAwsVpcPublicPrivateDeployMainTfTpl() (*asset, error) {
	bytes, err := dataAwsVpcPublicPrivateDeployMainTfTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-vpc-public-private/deploy/main.tf.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\xc1\x6e\xdc\x36\x10\xbd\xeb\x2b\xa6\x74\x62\xec\x02\x96\x84\x06\x45\x0f\x6e\x6c\x34\xb5\x63\xd8\x17\x37\xf0\xba\xbd\x04\x81\xc0\x15\x47\x12\x11\x8a\x24\xc8\x91\xec\xc5\x7a\xff\xbd\x43\x49\xdb\x3a\xc8\xa1\x39\x48\x20\x47\x6f\x1e\xe7\xcd\x3c\xea\x6f\xd9\x06\x69\xa9\xa8\x9d\x6d\x74\x3b\x04\x5c\x89\x77\x62\x0d\xca\xc1\xcb\x1c\x7a\xc9\x00\xe6\x55\x31\xf6\xc5\xd6\x3d\xc3\x05\x88\x4e\xc6\x4e\xd7\x2e\xf8\xd2\x07\xac\x75\xc4\x5f\x7f\x11\x19\x03\x4f\xe0\xd6\x45\x02\x67\xcd\x0e\x2c\xd2\x93\x0b\x5f\xbf\x49\x5f\x62\x20\x7c\xd0\xa3\x24\xac\x96\x80\x38\x03\xed\xcf\x41\xec\xf7\xa0\x70\xac\xb4\xaf\xa4\x52\x01\x63\x84\xc3\x61\x21\xde\x20\x0d\x1e\xa2\xeb\x11\x22\x0d\x4d\xf3\x0d\xaf\x0f\x6e\xd4\x51\x3b\x0b\x22\x76\x68\x4c\xe2\xb3\x46\x5b\x3c\x87\x37\xb1\x0e\xda\xd3\x4c\x72\xe3\x06\xab\x24\x25\xe0\x51\xf0\xbc\x5b\xe9\x06\xa4\xdd\xad\x19\xb5\x7f\x0b\x8d\x0b\xa0\x74\x60\x0e\x5e\x1e\x33\x2a\x8e\xc4\x82\xcb\x83\xb7\x07\x86\xa5\xef\xdc\x89\xd2\x11\xb9\xf2\x3f\x54\xce\x12\x38\xdd\x38\xe7\x8b\x2b\x8e\x12\x86\x49\xc3\xeb\x6a\xe3\xce\xd6\xa8\xaa\xc6\x19\xc5\x5f\x27\xd1\x7a\x42\x9d\xa5\xc5\x8f\x0a\x13\xb5\x82\x93\x3d\x27\x1c\xe0\xf4\x14\xb6\x3c\x91\x65\x5b\xf6\x52\xdb\x22\x76\x62\x16\x83\x56\x25\x3d\x5c\xf4\xd4\x82\x07\x94\x2a\x09\xa3\x0e\xa1\x09\xb2\xed\xd1\x12\x6f\x24\xc1\x13\xc2\x10\x11\x64\x04\xc9\x53\xf0\x8c\xc6\x51\x9a\xd5\x8d\x36\x58\x04\xce\x5a\xa5\x4a\x8f\x29\x95\x97\xd4\xa5\x9a\xd7\x67\xb0\xd5\x56\x69\xdb\xae\xd3\x01\x9f\xc5\xd8\x3f\xc9\x80\x55\x33\xa4\xb2\xb9\xde\x63\x20\xcd\x39\xd2\xd4\x24\xf1\xa5\x40\x59\x77\x93\xcb\xac\xec\x31\x79\xec\x3b\xd5\xdc\x9b\x55\xfa\x38\x9b\xd1\xcf\x18\x00\x5f\xa0\x95\x5b\x83\xd5\xd8\x87\xc1\x26\xab\x70\xaf\xbf\xb2\x35\x2e\xa0\x91\x26\xe2\x04\x63\xcd\xd9\xfc\x4e\x4f\xb6\x78\x80\x21\xef\xdf\x6f\xae\x1e\xee\x3e\x3d\x66\x11\x09\x72\xcc\xb2\x13\x48\x03\xcc\xf1\x19\xeb\x73\x48\xef\x81\x90\x2b\xe9\x7b\x69\x15\x3c\x69\xd6\xe8\x06\xf2\x03\x81\x71\x6d\x8b\x0a\xb6\xbc\xb4\x8e\x78\x50\xd1\x1b\xb9\x43\x95\x39\x5c\xad\x61\x0f\x6f\x7e\x87\x77\x97\xa7\x3f\xc3\xcb\x8c\x0c\x90\xd3\x44\x0d\x97\x50\xb2\x69\x4a\x3b\x18\xf3\x1b\x1c\xfe\x3d\x91\x51\xe7\x47\x6e\x09\x7c\x8d\x1a\xfd\xcc\xfc\x3d\x9b\x5e\xb6\x98\x39\x33\xb1\x62\xdd\x39\x10\x9f\x53\xc6\x17\x3e\x42\x2c\x0c\x57\x8b\x79\xb9\xeb\xb0\xd9\xdc\x4e\x86\x6d\x64\x4c\x66\x63\x5e\x6d\x33\xb6\xf3\x4f\xd0\x06\xf4\x20\xfe\x8a\x78\x7d\xbf\xe1\xa2\x05\x94\x48\x75\x19\x63\x97\x1e\x55\xcd\xfd\x86\xcb\x57\xe5\xb1\x29\x6c\x6a\xdc\x74\xea\xab\xc4\x17\x88\x03\x4f\x81\x10\x21\x97\xff\x47\xc3\x04\x0e\xe7\x84\x88\x61\xd4\x35\x6f\xd8\x9c\x7c\x9d\x49\x06\xca\x1a\x9d\x65\xf8\xec\x5d\x20\xb8\xfe\xf8\xc7\xdd\x87\xfb\xea\xe6\xe1\xcf\xfb\xc7\x8f\xf7\xd7\x17\xd6\x59\x9d\x6e\x8c\xac\x49\x8f\x3c\x1c\x67\x40\xdc\x59\x4e\x33\x26\x29\xbd\x7d\x7c\xfc\xb4\x01\xc5\xbf\x0e\xd6\x99\x24\x7f\xf0\x54\x14\x85\xc8\x8e\xc7\x49\x4f\x79\xcb\x83\x1d\x3c\x5f\x46\xfc\x2e\xac\x67\x2a\xc8\x77\x53\x88\xf8\xc7\x17\x53\x1d\x79\x47\xe4\x63\xb6\x38\xe3\x9f\x00\x00\x00\xff\xff\xa9\x5a\xbc\x44\x12\x05\x00\x00"

func dataCommonDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevVagrantfileTpl,
		"data/common/dev/Vagrantfile.tpl",
	)
}

func dataCommonDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevDepVagrantfileFragmentTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x51\x4d\x6f\xdb\x30\x0c\xbd\xeb\x57\x10\xee\x9a\x5e\x6a\x1b\xdb\xb1\x6b\x0a\x6c\xfd\x00\x7a\xc9\x86\xb6\x77\x43\xb3\x68\x5b\xa8\x4d\x1a\x92\xec\xae\x48\xf2\xdf\x47\xc9\x41\x32\x0c\xc3\x30\x9f\xc4\xc7\xe7\xc7\xf7\xc8\x0f\xa3\x43\xdf\x61\xdf\xc3\x1a\xae\xaf\x9f\x6f\x9f\x1e\xbf\xbf\x28\xdb\x40\xcd\xc3\xa0\xc9\x40\x3e\x83\x1e\x43\xde\x62\x80\x9b\xd2\xe0\x5c\xd2\x24\xdc\x4f\x37\xab\x8f\x9f\x21\x74\x48\x0a\xe4\xc3\x9f\x23\xbb\x00\x77\xf7\x5f\x1f\xbf\x6c\xaa\x87\xa7\x6f\x9b\x97\xfb\xcd\xdd\x9a\x98\x2c\x05\x74\xba\x0e\x76\xc6\xc4\xf4\x93\xe1\xa3\xa0\x25\x1f\xb4\xa8\xe5\xef\x09\x0a\x4e\x93\x8f\x42\x79\x17\xc2\xe8\xff\x9c\xa7\x1a\xab\x0e\xfe\x54\xcd\xd4\xd8\xb6\x98\x87\x62\x74\x3c\x5b\x6f\x99\x20\x4b\x31\xb2\x4b\x91\xed\x2d\xe1\x15\x1c\xa3\xfd\x9d\x6e\xb8\x7e\x45\x97\x81\x18\xda\x99\x9d\xb8\x33\x85\x9b\x04\xdf\x6e\x81\xf4\x80\xb0\xdf\x8b\x96\x76\xad\xbf\x4a\x98\xf4\xaa\x58\x2d\xb8\x1d\x74\x8b\x4b\x63\xd1\xa9\x12\x12\x9b\x0a\xc9\x28\x75\x06\xcf\xef\x54\x03\x4f\x0e\xf8\x8d\xc0\xe0\x08\x0d\xf7\x06\x9d\xd8\x8b\x8b\x73\xf8\x9b\x2b\x2f\x54\x34\xd5\x81\x70\x21\xa2\xa3\x0e\x5d\xf1\xc6\xee\xd5\x52\x2b\xa2\x17\x97\x69\x54\x42\xdb\x09\x7d\xa8\x4e\xbd\x2c\x0e\x7b\xe0\x89\x8c\x0e\x31\xd8\x22\x3b\xb9\xa5\x6a\xd8\xc9\xf0\x39\x1a\x50\xdb\xf3\xa5\xb4\xc9\x44\x73\xfc\xa5\x12\xc4\x17\xc2\xaa\xa2\xcd\xf3\xbd\x8a\x8c\x35\x64\x25\x87\xc0\xe5\x89\x97\x9f\x56\x13\x9f\xa2\xd5\x33\x8f\xc5\xad\x10\xe4\xca\xc9\xca\xbf\x32\x45\xd5\x14\x45\x1e\xff\x77\xc1\xac\x36\x70\xb6\x15\xfa\x1e\x56\x2b\xf8\xa1\x7d\x77\x28\xcb\x41\x5b\x2a\x7c\x97\xc5\x4c\xb2\xef\x18\x4b\x7c\xab\x5f\x01\x00\x00\xff\xff\x00\x67\x0f\xf1\xce\x02\x00\x00"

func dataCommonDevDepVagrantfileFragmentTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevDepVagrantfileFragmentTpl,
		"data/common/dev-dep/Vagrantfile.fragment.tpl",
	)
}

func dataCommonDevDepVagrantfileFragmentTpl() (*asset, error) {
	bytes, err := dataCommonDevDepVagrantfileFragmentTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev-dep/Vagrantfile.fragment.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/aws-simple/deploy/cloud-init.sh.tpl": dataAwsSimpleDeployCloudInitShTpl,
	"data/aws-simple/deploy/main.tf.tpl": dataAwsSimpleDeployMainTfTpl,
	"data/aws-vpc-public-private/deploy/cloud-init.sh.tpl": dataAwsVpcPublicPrivateDeployCloudInitShTpl,
	"data/aws-vpc-public-private/deploy/main.tf.tpl": dataAwsVpcPublicPrivateDeployMainTfTpl,
	"data/common/dev/Vagrantfile.tpl": dataCommonDevVagrantfileTpl,
	"data/common/dev-dep/Vagrantfile.fragment.tpl": dataCommonDevDepVagrantfileFragmentTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"aws-simple": &bintree{nil, map[string]*bintree{
			"deploy": &bintree{nil, map[string]*bintree{
				"cloud-init.sh.tpl": &bintree{dataAwsSimpleDeployCloudInitShTpl, map[string]*bintree{
				}},
				"main.tf.tpl": &bintree{dataAwsSimpleDeployMainTfTpl, map[string]*bintree{
				}},
			}},
		}},
		"aws-vpc-public-private": &bintree{nil, map[string]*bintree{
			"deploy": &bintree{nil, map[string]*bintree{
				"cloud-init.sh.tpl": &bintree{dataAwsVpcPublicPrivateDeployCloudInitShTpl, map[string]*bintree{
				}},
				"main.tf.tpl": &bintree{dataAwsVpcPublicPrivateDeployMainTfTpl, map[string]*bintree{
				}},
			}},
		}},
		"common": &bintree{nil, map[string]*bintree{
			"dev": &bintree{nil, map[string]*bintree{
				"Vagrantfile.tpl": &bintree{dataCommonDevVagrantfileTpl, map[string]*bintree{
				}},
			}},
			"dev-dep": &bintree{nil, map[string]*bintree{
				"Vagrantfile.fragment.tpl": &bintree{dataCommonDevDepVagrantfileFragmentTpl, map[string]*bintree{
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

