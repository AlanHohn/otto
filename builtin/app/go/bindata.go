// Code generated by go-bindata.
// sources:
// data/aws-vpc-public-private/build/template.json
// data/common/dev/Vagrantfile.tpl
// data/common/dev-dep/build/Vagrantfile.tpl
// data/common/dev-dep/build/build.sh.tpl
// DO NOT EDIT!

package goapp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"reflect"
	"strings"
	"unsafe"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	var empty [0]byte
	sx := (*reflect.StringHeader)(unsafe.Pointer(&data))
	b := empty[:]
	bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	bx.Data = sx.Data
	bx.Len = len(data)
	bx.Cap = bx.Len

	gz, err := gzip.NewReader(bytes.NewBuffer(b))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAwsVpcPublicPrivateBuildTemplateJson = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x00\x02\xa5\xdc\xcc\xbc\xf8\x82\xc4\xe4\xec\xd4\xa2\xf8\xb2\xd4\xa2\xe2\xcc\xfc\x3c\x25\x2b\x05\x25\x03\x3d\x0b\x3d\x03\x25\xae\x5a\x2e\x40\x00\x00\x00\xff\xff\x1b\x82\xd0\x08\x26\x00\x00\x00"

func dataAwsVpcPublicPrivateBuildTemplateJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsVpcPublicPrivateBuildTemplateJson,
		"data/aws-vpc-public-private/build/template.json",
	)
}

func dataAwsVpcPublicPrivateBuildTemplateJson() (*asset, error) {
	bytes, err := dataAwsVpcPublicPrivateBuildTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-vpc-public-private/build/template.json", size: 38, mode: os.FileMode(420), modTime: time.Unix(1435862031, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x94\x5b\x6b\xeb\x46\x10\xc7\xdf\xf5\x29\xa6\xf2\x69\x4f\x0b\xd1\x8a\x13\x42\x1e\x4c\x62\x08\x29\xa4\x79\x28\x49\x1b\x37\x2f\xa5\xc4\x6b\x69\x24\x2d\x59\xed\x6c\x77\x57\xbe\xe4\xf2\xdd\x3b\x2b\xc9\x89\x1d\x48\x39\x60\xb0\x34\x3b\xf3\xfb\xcf\x4d\x3b\x81\x2b\x34\xe8\x64\xc0\x12\x96\x5b\xb8\x09\x81\x8e\xa0\x24\x30\x14\x00\x4b\x15\x7e\x48\x26\xc9\x04\xe6\x8d\xf2\xc0\xbf\xd0\x20\xdc\xcb\xda\x49\x13\x2a\xa5\x11\xea\x8f\xb1\x50\x91\xeb\xbd\x4a\x5c\xa1\x26\xdb\xa2\x09\x40\x15\x23\x42\x44\x48\x6b\xb5\x2a\x64\x50\x64\x72\x8f\x6e\xa5\x0a\x14\x70\x1d\xc0\x37\xd4\xe9\xb2\x17\x5d\x22\x34\xd2\x94\x59\x14\xc7\x52\xc0\x9c\xa0\xa5\x52\x55\xdb\x88\x65\xce\x9e\xfc\x11\x74\x1e\x7b\xb5\x0b\x6b\xa3\x41\x24\xc9\x78\x2c\x0a\x32\x95\xaa\x3b\x87\x3f\xa7\xc7\xe9\x2f\xb1\xa2\x97\xc1\xf4\x92\x00\x0c\x4f\x62\xd5\x8a\x25\x6d\xe0\x1c\xd2\x46\xfa\x46\x15\xe4\x6c\x6e\x1d\x16\xca\xe3\xe9\x49\x9a\xb0\xe3\x04\xee\x30\x74\x16\x24\xf8\xad\x29\xb8\xcc\x8a\x74\x89\x0e\x2a\x47\x2d\x50\xe7\x60\x4d\xee\x51\x99\x1a\x4a\xc5\x71\x81\x1c\x67\x49\x90\xaf\x86\x24\x0e\x94\x06\xc0\xc3\x08\x48\x9f\x9f\xc1\xca\xd0\x88\x1d\xe0\xf5\x35\x3d\x82\x74\x17\x39\x8a\x5f\x1b\x1f\xa4\xd6\x70\x45\xb0\xec\x14\x37\x08\xcd\x4a\x39\x32\xb1\xab\x07\x70\xeb\x68\xa5\x3c\x77\x15\x52\xdf\xa0\xd6\xcc\x52\x46\x2b\x83\x53\xf8\xe2\x0b\xa7\x6c\x78\xa8\x49\x4b\x53\x0f\xdc\xdf\xe5\x23\x82\xe2\xb6\x13\x77\x4f\x06\x58\x8c\xb2\xe0\x7d\xb3\x80\x9a\xd0\x8f\x05\xe9\xbe\x9e\xd8\x61\x6e\x4e\x34\x44\xfb\x77\x2a\xb3\x1b\xc0\x8f\x7f\xfc\x8d\x45\x43\x90\x16\xe5\x5b\x5b\x52\x98\xcd\x20\x6f\xa8\xc5\x9d\x25\x17\x4b\x1e\x80\x2b\xfe\x49\xd0\x94\x49\x72\x98\x32\xcf\xe7\xec\xec\xee\xf2\xcf\xeb\xdb\x79\xe2\x31\x40\x86\x49\x32\x30\x7f\xa5\xb5\xd1\x24\xcb\xd8\xbf\x2b\x12\x42\xa4\xc9\xba\x8e\x1e\xff\x42\x76\xf3\x41\xa1\x26\x11\xa4\x13\xf5\x13\x34\x21\x58\x3f\xcd\x73\xcf\xe3\x92\x35\x8a\x9a\xa8\xd6\x28\xad\xf2\xbc\x34\x6d\x3e\x88\xf2\xdf\x37\x71\x22\x8e\x05\x97\xd2\x6d\x32\xd9\x96\xa7\x27\x23\x60\xa7\xfe\x97\xe1\x77\xb7\xa7\xed\x3b\xde\x32\xb6\x41\x76\x09\x79\xe7\x5d\xae\xa9\x90\x1a\xb2\xcd\x53\xf5\x59\x32\x3b\x16\x0f\xa4\x07\xdd\xdc\x5e\xcc\x7f\x7b\x87\xb5\x8f\xdc\x6e\xc8\x2c\xe4\x64\x63\x54\xdc\x98\xe1\x84\xa3\xd6\x06\x16\xeb\x86\x64\xab\x16\xd3\xdd\xc3\x81\xe3\xc8\xe6\x0d\x0e\x11\xce\x6b\xfc\x46\xef\x4f\xbe\xe2\xc6\x92\x0b\xbd\xf5\x7c\x2f\x30\x5f\x2a\x33\x7d\x2f\x80\xad\xbd\xe5\x4b\xf4\xfb\xfa\xe9\xec\x0e\x99\x43\x25\xfb\xd4\xff\x89\x1c\x13\x1d\xb7\x3d\xe6\x7a\x7f\x79\xe7\xfb\xab\xa4\x26\xbe\x63\xc2\x7b\x47\xa4\x0d\x59\x1c\x71\x67\x4b\xbe\x76\x20\xdb\xc2\x2c\xe7\xab\x26\x37\x1d\x7f\x26\xc7\xb3\x9f\xbe\x1d\xba\xa9\xf1\x03\x62\xbf\x9a\xf7\x7d\xf9\xe4\xa0\x45\x57\x74\x4e\x49\x9d\x8c\x3b\xf5\x5f\x00\x00\x00\xff\xff\xd6\x6f\x4d\xca\x02\x05\x00\x00"

func dataCommonDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevVagrantfileTpl,
		"data/common/dev/Vagrantfile.tpl",
	)
}

func dataCommonDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev/Vagrantfile.tpl", size: 1282, mode: os.FileMode(420), modTime: time.Unix(1439846905, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevDepBuildVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\x5f\x4f\xfb\x46\x10\x7c\xf7\xa7\xd8\x3a\xa8\xb4\x12\x3e\x0b\x84\x78\x88\x20\x12\x02\x29\xe5\xa1\x02\x95\x94\x3e\xc2\xc5\xde\xd8\x27\xec\xdb\xeb\xdd\x39\x7f\x80\x7c\xf7\xee\x9d\x1d\x20\x48\xf4\xf7\x93\x22\xc5\x5e\xef\xce\xcc\xde\x8c\x3d\x82\x29\x6a\xb4\xd2\x63\x09\xf3\x0d\xdc\x7a\x4f\x47\x50\x12\x68\xf2\x80\xa5\xf2\xbf\x24\xa3\x64\x04\xb3\x5a\x39\xe0\x9f\xaf\x11\x1e\x64\x65\xa5\xf6\x0b\xd5\x20\x54\x5f\x67\x61\x41\x16\xe6\x9d\x6a\x4a\xa5\xab\xd0\xce\xc3\x73\xa5\xa5\xdd\xf0\x8d\xf4\x01\xa3\x73\xdc\x2e\x1d\x48\x28\xd1\xa0\x2e\x51\x17\x9b\x38\x56\xe2\x12\x1b\x32\x2d\x6a\x2f\x22\xeb\x75\x2f\xa3\x96\xba\xcc\x82\x16\x86\xe0\xf9\x40\x2c\x60\x46\xd0\x52\xa9\x16\x9b\x58\x3c\x0a\xa8\x51\xdd\xa5\x31\xb1\x21\x49\x06\x9d\xa2\x20\xbd\x50\x55\x67\xf1\xb7\xf4\x24\xfd\x3d\xec\xf6\xd6\x97\xde\x12\x80\xfe\x4a\x2c\x5b\x31\xa7\x35\x5c\x40\x5a\x4b\x57\xab\x82\xac\xc9\x8d\xc5\x42\x39\x3c\x3b\x4d\x13\x6e\x1c\xc1\x3d\xfa\xce\xb0\x6a\xb7\xd1\x05\x6f\xb0\xa0\xa6\x44\x0b\x0b\x4b\x2d\x50\x67\x61\x45\xf6\x39\xec\x5c\x2a\x9e\xf3\x14\x16\x26\xc8\x97\xbd\x88\x3d\xa6\x1e\xe0\x71\x00\x48\x5f\x5f\xc1\x48\x5f\x8b\x1d\xc0\x76\x9b\x1e\x41\xba\x9b\xfc\x31\xf9\xaa\x46\x8b\x51\x42\x41\xad\xe1\xdd\x4b\x28\xa5\x97\xd1\x2e\x8a\xc3\x39\xb1\x33\x02\xfe\xc1\xb0\x7c\x3c\x43\x96\x26\x8b\x02\x5d\xef\x68\xf4\x0b\x5c\x61\x95\xe1\x93\xff\x09\xa9\xef\x44\xdb\x6d\xce\xae\x65\x6c\x64\x1e\x41\xa2\xf2\xc0\x36\xc8\xbe\xd1\xce\xcb\xa6\x81\x29\x0d\x24\xa8\x97\xca\x92\x0e\x1e\xef\x11\x19\x4b\x4b\xe5\x14\x69\x48\x5d\x8d\x4d\xc3\x40\x4a\x37\x4a\xe3\x18\x0e\x7a\x61\x8f\x15\x35\x52\x57\x09\x27\x26\x49\xf6\x6b\xec\xdb\xf9\xf9\xfd\xd5\x5f\x37\x77\xb3\xc4\xa1\x87\x0c\x93\x04\x8b\x9a\x20\xbd\xa6\x95\x6e\x48\xc6\x30\x4e\x49\x08\x91\x26\xab\x2a\x74\xfc\x0b\xd9\x2d\xe4\x35\xb5\xb8\x3b\xe8\xbc\x22\xe1\xa5\x15\xd5\x0b\xd4\xde\x1b\x37\xce\x73\xc7\x36\xca\x0a\x45\x45\x54\x35\x28\x8d\x72\x61\xf3\xbc\x27\xe5\xbf\x63\x71\x2a\x4e\x04\xab\xec\xd6\x99\x6c\xcb\xb3\xd3\x01\x60\xc7\xfe\xb7\xe6\x7b\xfb\x89\xdb\x75\xc1\x00\x69\x21\xbb\x82\xbc\x73\x36\x6f\xa8\x90\x0d\x64\xeb\x97\xc5\x77\x62\x12\xdb\x7e\xfb\x68\xa0\xf9\x53\xc6\xdc\x4c\x6f\xef\x2e\x67\x7f\x7c\xf0\xb4\xcf\x1c\x45\xc8\x0c\xdb\x6f\xc2\x54\x70\xae\x7f\xc2\x53\x2b\x0d\x4f\xab\x9a\x64\xab\x9e\xc6\xbb\x8b\xbd\xc6\x01\x9b\x73\xe7\x03\x38\x87\xef\x1d\x3d\x3e\x39\xc4\xb5\x21\xeb\x63\xf5\xe2\xd3\x60\xce\x6f\xfb\xf8\x63\x37\xae\xc6\xca\x41\xe8\x3b\x84\xc9\xe4\xcb\x32\x62\xce\xef\x9b\x2d\xf6\x31\xfb\x4d\x3e\xa3\xfe\xcf\xe4\x20\x74\x48\x5a\xd0\xfa\x70\x75\xef\xe2\x07\xa5\x22\xfe\x40\xf9\x8f\x13\x91\xc6\x67\xc1\xfd\xce\xf0\x0b\x82\x90\x6d\x60\x12\xe2\x9b\xeb\x8e\x23\x7a\x32\xf9\xf5\x78\xbf\x4d\x0d\xe1\xe5\xbe\x8a\x3f\x3e\xf3\x17\x0b\x2d\xda\xa2\xb3\x4a\x36\xc9\x10\xb7\xff\x02\x00\x00\xff\xff\x17\x58\x96\x17\x3f\x05\x00\x00"

func dataCommonDevDepBuildVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevDepBuildVagrantfileTpl,
		"data/common/dev-dep/build/Vagrantfile.tpl",
	)
}

func dataCommonDevDepBuildVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevDepBuildVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev-dep/build/Vagrantfile.tpl", size: 1343, mode: os.FileMode(420), modTime: time.Unix(1440118643, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevDepBuildBuildShTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x90\x31\x72\xeb\x30\x0c\x44\x7b\x9e\x62\xbf\x55\x4b\x3a\xc3\x4f\xe3\x32\x45\x72\x01\x8a\x82\x25\x24\x0e\xa1\x01\xc1\x28\x6e\x72\xf6\x80\x8a\x67\x9c\x19\x0e\x0b\xec\x62\xf1\x80\xee\xdf\x38\x71\x1e\xa7\x58\xd6\xd0\x85\x0e\xff\xab\x49\xbf\x50\x26\x8d\x46\x33\xa6\x1b\x9e\xcd\x64\x38\xb4\xd7\x95\x0b\xfc\xd9\x4a\x98\x2a\x5f\x67\x94\xa4\xbc\x19\x2e\xa2\x88\x38\x4b\xef\x31\xde\xb4\xa9\xbc\x51\xb2\x21\x14\x32\xf4\x14\xbc\xf5\x45\xaa\x26\x82\xff\x4d\xbd\xf0\x95\x50\x04\x3b\x61\x71\xcb\x51\x8d\xb6\x36\x69\x23\xbd\xde\xe0\x8d\x75\x0b\x03\xbe\xc7\xa1\x91\x69\x6a\x19\x67\x01\x67\x93\xc3\xbe\x8b\xbe\x73\x5e\x30\xb3\xfa\x24\xd1\x5b\x48\x33\xc6\xcf\xb8\x68\xcc\xd6\xcc\x4f\x07\x5f\x23\xbd\xd3\x20\xe6\x19\xbb\xb2\xd1\x51\x95\x6a\x5b\xb5\x47\x60\x59\xa3\x3a\xfa\x23\xaf\xc3\xce\x8e\xd4\xbc\x49\x3e\x36\x27\xfe\xa3\x36\x78\x5b\xa3\xb5\x0d\x52\xcc\xa0\x58\xd8\xb1\xe9\xcb\x34\xfa\x28\xf6\xdd\x17\xb9\xdf\xa8\x17\x9c\x46\xf1\x23\x8e\xbf\x33\x4f\xe1\x27\x00\x00\xff\xff\xe1\xc0\x69\xdc\x74\x01\x00\x00"

func dataCommonDevDepBuildBuildShTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevDepBuildBuildShTpl,
		"data/common/dev-dep/build/build.sh.tpl",
	)
}

func dataCommonDevDepBuildBuildShTpl() (*asset, error) {
	bytes, err := dataCommonDevDepBuildBuildShTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev-dep/build/build.sh.tpl", size: 372, mode: os.FileMode(493), modTime: time.Unix(1440119101, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/aws-vpc-public-private/build/template.json": dataAwsVpcPublicPrivateBuildTemplateJson,
	"data/common/dev/Vagrantfile.tpl": dataCommonDevVagrantfileTpl,
	"data/common/dev-dep/build/Vagrantfile.tpl": dataCommonDevDepBuildVagrantfileTpl,
	"data/common/dev-dep/build/build.sh.tpl": dataCommonDevDepBuildBuildShTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"aws-vpc-public-private": &bintree{nil, map[string]*bintree{
			"build": &bintree{nil, map[string]*bintree{
				"template.json": &bintree{dataAwsVpcPublicPrivateBuildTemplateJson, map[string]*bintree{
				}},
			}},
		}},
		"common": &bintree{nil, map[string]*bintree{
			"dev": &bintree{nil, map[string]*bintree{
				"Vagrantfile.tpl": &bintree{dataCommonDevVagrantfileTpl, map[string]*bintree{
				}},
			}},
			"dev-dep": &bintree{nil, map[string]*bintree{
				"build": &bintree{nil, map[string]*bintree{
					"Vagrantfile.tpl": &bintree{dataCommonDevDepBuildVagrantfileTpl, map[string]*bintree{
					}},
					"build.sh.tpl": &bintree{dataCommonDevDepBuildBuildShTpl, map[string]*bintree{
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

