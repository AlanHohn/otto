// Code generated by go-bindata.
// sources:
// data/aws-vpc-public-private/build/template.json.tpl
// data/aws-vpc-public-private/deploy/main.tf.tpl
// data/aws-vpc-public-private/deploy/variables.tf
// data/common/dev/Vagrantfile.tpl
// data/common/dev-dep/Vagrantfile.fragment.tpl
// data/common/dev-dep/Vagrantfile.tpl
// data/common/dev-dep/build.sh.tpl
// data/common/dev-dep/upstart.conf.tpl
// DO NOT EDIT!

package goapp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAwsVpcPublicPrivateBuildTemplateJsonTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\x51\x6e\xf3\x20\x10\x84\xdf\x7d\x0a\x84\x94\xb7\x24\xca\xff\x57\x6a\xaa\x5e\xa5\xaa\xc8\x42\x56\x29\x8a\xc1\x16\x0b\xa9\x52\xc4\xdd\x8b\x8d\xdc\x42\xd5\x26\x7e\xb1\xc5\x37\xde\x99\x1d\x62\xc7\xf2\xc3\x8d\xb6\x62\x04\x75\x46\x27\x2e\xe8\x48\x0f\x96\x3f\x33\xbe\xdb\x3e\x6d\x77\x7c\xdd\x15\xcd\x05\x9c\x06\xd9\x23\x65\x54\x7e\x9b\x8f\xe1\x9d\x04\x28\x85\x44\xe2\x8c\xd7\xcc\x6c\xe8\xfb\x75\xcb\x09\x95\x43\xff\x37\x77\x78\x2a\x96\x13\x9b\x51\x5a\x5c\x65\xd0\xfd\x31\x47\xca\xf0\xa5\x72\xb5\x60\x70\x8a\x38\x78\x3f\xf0\x6a\x9a\xbf\x8e\xf3\x39\x18\xf8\x18\xec\x06\x25\xd5\xb4\xc9\xc9\xe3\x8a\xe5\x65\x25\x78\x6d\xd8\x2a\xc5\xc8\x02\xa1\x63\x87\x76\xa1\x03\x4b\x29\x0b\xd1\x1e\x2b\x6d\x3d\xb3\xd9\xed\xd6\xcc\x6f\xe1\xdd\x99\x5f\x7d\xdc\x9a\x57\x44\xf7\xf3\x0d\xc1\x29\x14\x60\x74\xe9\x45\x6f\xf6\x8f\xf2\x3f\xec\xff\x61\xad\xd2\x96\x3c\xd8\xac\x5b\x0a\x54\x0f\xdb\x1e\xdc\xa9\x11\x11\xbd\x89\xc9\x7f\x29\x3f\xc8\x60\x7d\x68\x0a\x36\x5a\x2c\x34\xc6\xe9\x2b\x25\xf6\x73\x87\xfc\xc6\xec\x66\xc6\xdf\x92\x97\xdb\x7f\xed\x52\xf7\x19\x00\x00\xff\xff\x20\x45\x14\x15\x9b\x02\x00\x00"

func dataAwsVpcPublicPrivateBuildTemplateJsonTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsVpcPublicPrivateBuildTemplateJsonTpl,
		"data/aws-vpc-public-private/build/template.json.tpl",
	)
}

func dataAwsVpcPublicPrivateBuildTemplateJsonTpl() (*asset, error) {
	bytes, err := dataAwsVpcPublicPrivateBuildTemplateJsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-vpc-public-private/build/template.json.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsVpcPublicPrivateDeployMainTfTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\x41\x4e\xc3\x30\x10\x45\xf7\x3e\xc5\x97\xcb\x12\x71\x83\xee\x90\xd8\xc1\x11\xa2\x69\x3c\x54\x16\x89\x1d\xd9\x93\x22\x2b\xf2\xdd\x99\x86\xa4\x26\x62\x96\x6f\x9e\xfd\xff\x9c\xf0\xc6\x81\x13\x09\x3b\x5c\x0a\x3e\x44\xe2\x33\x5c\x44\x88\x02\x76\x5e\x30\x52\x98\x69\x18\x8a\x31\x53\x8a\x37\xef\x38\xc1\xd2\x77\xb6\x58\x0c\x74\xa8\xef\x39\xe7\xee\x8b\x0b\xce\xb0\x4f\xcb\x8d\xd2\x8b\xae\xbb\xc6\xab\x5d\xc5\xcc\x7d\x62\xf9\x2f\x36\xbe\x89\x89\xaf\x3e\x86\xa3\xf4\xcb\x54\xa8\xc6\x9c\xf0\xca\xd3\x10\x0b\x48\xff\x14\xc4\x4f\xf8\x90\x85\x82\xe6\x99\xc4\x39\xce\xa9\xe7\xb5\x62\xb7\x73\x0b\xbb\x2c\x08\x34\x32\x6a\x7d\x14\x1f\xfd\x9f\x8c\xd1\x6f\xe9\xfb\x9b\x4e\xca\xc4\x4d\x38\xe0\xfd\xa2\xf9\x12\xb4\xb9\x77\x4d\x7b\x20\x55\x56\x47\xe8\x9a\xb7\xc0\xfb\xbc\xdf\x3b\x9c\x0f\x75\xd6\x5d\xd5\xc3\x7e\x02\x00\x00\xff\xff\xa1\x87\x8b\xff\x8a\x01\x00\x00"

func dataAwsVpcPublicPrivateDeployMainTfTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsVpcPublicPrivateDeployMainTfTpl,
		"data/aws-vpc-public-private/deploy/main.tf.tpl",
	)
}

func dataAwsVpcPublicPrivateDeployMainTfTpl() (*asset, error) {
	bytes, err := dataAwsVpcPublicPrivateDeployMainTfTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-vpc-public-private/deploy/main.tf.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsVpcPublicPrivateDeployVariablesTf = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x91\xb1\x4e\xc4\x30\x0c\x86\xf7\x3c\x85\x95\x9b\xb9\x81\x9d\xe1\x24\x96\x0e\x2c\xdc\xc0\x58\xf9\x72\x2e\x58\xe4\x92\x28\x76\xa9\x2a\xc4\xbb\x93\x46\x95\x90\x2a\x05\x96\x62\x75\xaa\xbf\x7c\xb6\x7e\x1f\xee\x76\x28\x73\x80\x93\x73\x24\x02\x5d\x18\xa2\xd9\xc7\x69\x3e\x30\x33\x5e\x3c\x81\xc5\x49\x7a\xac\x03\xfa\x77\x9a\x2d\x7c\x1a\x28\x75\x25\x71\x99\x93\x72\x0c\xf0\x00\x76\xdd\xa0\x00\x30\xc4\x0c\xa7\x97\xb3\x35\x5f\x5b\x8b\x90\xcb\xa4\xbf\x58\xce\x15\xf8\xc3\x92\xe9\xb5\xe0\x0d\xc3\x73\x6d\xc2\xf4\x46\x99\x60\x2a\x1f\x7b\x0f\x31\x51\x46\xa5\x63\x95\xed\x95\xf9\x23\x25\x1f\xe7\xff\xca\xfc\xc6\xad\xa0\x9f\x3a\xd0\x58\xfe\x2e\xd3\x37\xe9\x70\x10\xc5\xe0\xa8\xd7\x39\x51\xe3\x7d\xb7\x32\x50\x99\x95\x18\x70\xf4\xba\x74\xf5\xfe\x28\x37\xf4\x7e\x23\x96\xf1\x12\xca\xe1\xf8\xda\xba\x5b\xed\xff\xec\x05\x1c\x34\x2e\x8e\xef\x00\x00\x00\xff\xff\xc5\x62\x66\xc0\xe1\x02\x00\x00"

func dataAwsVpcPublicPrivateDeployVariablesTfBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsVpcPublicPrivateDeployVariablesTf,
		"data/aws-vpc-public-private/deploy/variables.tf",
	)
}

func dataAwsVpcPublicPrivateDeployVariablesTf() (*asset, error) {
	bytes, err := dataAwsVpcPublicPrivateDeployVariablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-vpc-public-private/deploy/variables.tf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x56\x6d\x6f\xd4\xb8\x13\x7f\x9f\x4f\x31\xa4\x2d\xb4\x52\xe3\x14\x84\x78\x51\x68\x05\x2a\x7f\xa0\xd2\xff\x54\xee\xda\xe3\x0d\x42\x8b\x37\x71\x12\xab\x8e\xed\xb3\x9d\x7d\xa0\xdd\xef\x7e\x33\x76\xb6\xdb\x05\xca\xdd\x49\xdd\xd6\x3b\x9e\xf9\xcd\xd3\x6f\xc6\xdd\x81\xf7\x42\x0b\xc7\x83\xa8\x61\xba\x84\x8b\x10\xcc\x21\xd4\x06\xb4\x09\x20\x6a\x19\x1e\x65\x3b\xd9\x0e\x5c\x75\xd2\x03\xfe\x84\x4e\xc0\x27\xde\x3a\xae\x43\x23\x95\x80\xf6\x7b\x5b\x68\x8c\x8b\x5a\xb5\x98\x09\x65\x6c\x2f\x74\x00\xd3\x20\x44\x20\x08\x6e\xad\x92\x15\x0f\xd2\xe8\xd2\x0b\x37\x93\x95\x60\x70\x1e\xc0\x77\x66\x50\x75\x74\x3a\x15\xd0\x71\x5d\x17\xe4\x5c\xd4\x0c\xae\x0c\xf4\xa6\x96\xcd\x92\x60\x11\xe7\x9e\xfb\x43\x18\xbc\x88\xde\xde\x58\x4b\x02\x96\x65\xe3\x35\xab\x8c\x6e\x64\x3b\x38\xb1\x9f\x3f\xcb\x0f\x28\xa3\xdb\x24\xba\xcd\x00\xd2\x89\xcd\x7a\x36\x35\x0b\x38\x81\xbc\xe3\xbe\x93\x95\x71\xb6\xb4\x4e\x54\xd2\x8b\x17\xcf\xf3\x0c\x15\x77\xe0\x52\x84\xc1\x02\x07\xbf\xd4\x15\xa6\xd9\x18\x55\x0b\x07\x8d\x33\x3d\x98\xc1\xc1\xdc\xb8\x6b\xa9\x5b\xa8\x25\xda\x05\xe3\x30\x4a\x03\xe5\x2c\x05\xb1\xe5\x29\x01\x4c\x46\x80\xfc\xe6\x06\x2c\x0f\x1d\x5b\x03\xac\x56\xf9\x61\x94\xfa\x8e\xbb\x3b\xbd\x09\xe9\xc4\x3b\xc4\x02\x30\x73\x2c\xf7\x31\xe4\x23\x3e\x5a\xb4\xce\x0c\xf6\x9e\x84\x82\xbe\xd9\x03\xd9\x80\xec\xad\x71\x21\x01\x3c\xc2\x14\x73\xd8\x5b\xc5\x8c\xde\x4a\xcf\xa7\x4a\x8c\x5d\x6a\xf8\xa0\xc2\x76\x76\xbf\x0a\x9b\x51\x94\xe5\xc6\x7f\x9d\xc0\xea\x63\x08\x6e\x10\xc9\xb9\xd0\xd8\x2e\xf2\x16\xdd\xfd\x4f\x47\x6f\x97\x97\x1f\x80\xb7\xc4\x06\x64\xc8\x9c\xbb\x9a\x92\xf6\x06\x19\x14\x02\x1d\xad\x93\x33\x24\x12\x46\x64\xd1\x5e\xe8\x4a\x0a\x1f\xab\xeb\x37\xe1\x78\xdf\xb1\xd1\x7a\x92\xb0\x4e\x92\xdb\xe8\xe8\x9d\x19\x74\x1d\xa9\x05\xeb\xe6\xa7\x6f\xfb\x18\x0d\xd7\xcb\x83\x14\x1d\x11\x14\xbb\x05\x52\xe3\x71\x6d\x31\x41\x89\x67\xc8\xd9\x54\x24\xba\xc7\x92\x95\x06\x19\x5d\x6e\xb4\x0a\x6c\x0f\x9a\x2b\x63\x2c\x3b\x43\x69\xc0\x8a\x60\x6f\xfe\xa1\xcd\x04\x16\xbb\x8b\x87\x2d\x55\xeb\xcc\x4c\x7a\x8a\x30\xf7\x9d\x50\x0a\x55\xa4\x56\x52\x0b\xec\x67\x55\xc3\xce\x0d\x1a\xac\xe0\xf1\x63\x98\x22\x3b\xc7\xaf\x65\xcf\xa5\x66\xbe\xcb\xef\x4a\x4d\xf9\xac\x6b\xfd\x7f\xc3\x6b\xe0\x4a\x45\x6a\x36\x8e\xb7\x34\x7e\x1e\x3a\xe1\x44\xcc\x1b\xab\xb0\x55\x60\xb6\x29\xc9\x5a\x9b\xea\x82\x75\x98\x6c\xac\x63\x45\x28\xf3\x51\x72\xeb\x04\x7a\x59\xad\x7e\x1a\xc1\xb9\xf6\x81\x02\x78\x6f\x60\x3a\x48\x1c\x69\xa1\x67\xd2\x19\x4d\x86\xff\x36\xf9\x5d\x5f\x39\x69\xc3\xa4\x35\x8a\xeb\x36\xe1\xfe\xc6\xaf\x05\xc8\x40\x8c\x09\x1d\x0f\xf0\x75\xa4\x20\x20\x27\xbe\x42\x6b\x90\x2c\x69\x04\x55\x9c\x40\xe2\x36\x8e\x33\x09\xfe\x43\xd9\xe3\x8c\xed\xfd\xfe\x59\x54\x9d\x89\x2d\x78\x70\x1c\xe1\xf4\x14\xca\xce\xf4\x62\x3d\x0a\x25\xa3\x26\xb9\xea\x4b\x0a\xf7\x6e\x5f\x9a\xc8\x61\xe0\x8e\x48\x84\xd1\xf7\x02\xeb\xd2\x7a\x70\xb2\xed\x02\xee\xbb\x39\xaa\x7f\xce\x67\x3d\x72\x5a\x4c\x9a\x81\xc2\xa2\x09\x1b\x05\x91\xff\x21\x72\x2f\xff\xc2\x04\xaf\xba\xb8\xc8\x34\xef\xc5\x6d\x0c\xf6\xbb\xac\x30\xc4\x7d\xba\x4c\xfb\xce\x26\x1d\x00\xcb\x44\x1c\xc2\xc9\xac\x77\x83\x9e\x48\x3b\x41\x0a\x5f\xe3\x5a\x3b\x81\x86\x2b\x2f\xa2\x1a\x36\x32\x4b\xbf\xe9\x93\x6d\x37\x01\x35\x5f\xbd\xba\x3c\xfb\xe3\xfc\xe3\x55\xe6\x45\x80\x02\x67\xce\x88\xfd\x03\xb8\x81\xdd\xd7\xf0\xec\xf4\xf1\x53\xb8\x05\x65\xda\x16\x39\x5f\xe0\xc2\xa7\x97\x00\x2b\x84\x44\x2a\xf5\xa0\xd4\x4b\x58\x65\x46\x45\xf5\x54\xdb\xcf\xa4\xf1\x05\x6d\x73\xba\xc2\xad\x7e\xde\xc0\x9c\x16\xff\x4c\x20\x75\x0e\xa9\x7f\x7a\x7c\x85\x3a\xdc\x0e\x19\x4e\x70\x65\xfa\x1e\xdf\x05\x28\x66\xd8\x6e\x38\xbd\xc3\x8e\xde\x5f\x46\x8b\xb4\x23\x15\xe4\xc8\x3e\xae\x88\xa6\x4b\x6c\x6d\x24\xa4\xa8\x1f\xa5\xf7\x69\x6e\xf4\x93\xb0\x96\xa2\x2f\x96\xa7\xec\x17\x48\xae\xa3\xac\x91\x98\x17\x02\xbc\xc5\x4d\xab\x70\x98\x68\x33\x21\x18\x4d\x31\xce\x44\x6b\x26\x33\xe1\x22\x75\x56\x2b\xc6\xd0\xd4\x08\x98\xb7\x54\x8f\xbf\xa0\xb8\xf8\x8e\x11\xad\x61\x81\x3b\xd6\x7e\x83\x2e\x04\xeb\x8f\xcb\xd2\xe3\x03\x81\x7b\x8b\xb5\xc6\xb4\x4a\x70\x2b\x3d\x3e\x53\x7d\x99\x4a\x8c\x7f\x7e\xea\x06\x99\x39\x2c\x0a\xde\xd7\x2f\x9e\x8f\x78\x29\xc4\x3f\x35\x7e\x73\x29\xc0\x75\x2c\x7e\xc0\x9a\xa1\x18\x8a\x33\x28\x07\xef\x4a\x65\x2a\xae\xa0\x58\x7c\x6b\x1e\x0a\x2e\x81\xe1\x78\x45\xa4\x8b\x8f\x6f\xae\x3e\x6c\xa1\xf5\xd7\xb4\xbf\x0a\x0b\xa5\xb1\x64\x46\x13\x90\x35\x3e\x2c\xad\x38\xd9\xdd\x6f\x24\x76\xe4\xde\x0d\x14\x3d\x4a\x84\xc5\xd3\x11\x9e\xf9\xe2\xee\x4c\x06\x80\xdd\xc3\x3d\x8f\x8f\x37\xe4\x7b\xef\xf2\x83\xec\x47\xf3\x84\x0c\xbb\x37\xe9\xb0\x1a\x0d\x8e\x90\x5e\x0b\xee\x70\x70\x0a\xc4\xd2\xf0\xf4\xe8\x08\x90\x48\x73\x0d\x63\x42\xc7\xeb\x27\x37\xa6\x73\x39\x3e\x2a\x48\xf1\xbb\x84\x22\xf1\x9e\x88\x05\xbd\x8a\x51\x7a\x72\xcf\x71\x39\x95\xfa\x78\x53\x31\x94\x46\xc9\x2e\xe9\x3d\x79\x70\xd8\xb7\x31\x53\xf1\xee\xa3\xfe\xc2\x32\x86\x39\x2e\x4b\x8a\xf4\xd3\xd9\xa5\x8f\x7b\xb8\x8d\x4f\xe2\x56\x0b\xb8\x0d\x05\x91\x6c\xb0\x35\xbd\x90\xc5\xf2\x87\x9b\x35\x9d\x8b\x25\xb4\xc8\xe3\xe9\x37\x07\xbd\x70\xd5\xe0\x24\x57\xc9\xd5\xd9\xf8\x22\x8e\x84\xc6\x41\xa0\x7f\x9d\xe8\x51\x26\x5b\x5a\xe8\xa6\x81\x0f\x57\x57\x1f\xa3\x67\x02\x49\xab\x05\x8a\xa2\x55\x66\x8a\x24\x1a\x9c\x62\x39\x5e\xbc\xc6\x4f\x37\x4c\x89\xb9\xc7\x39\x1b\xad\x2f\xb0\xa3\x6b\x96\x6f\xee\xcb\x3c\x1b\x77\xc6\xdf\x01\x00\x00\xff\xff\xd1\x74\x56\xa0\x66\x0a\x00\x00"

func dataCommonDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevVagrantfileTpl,
		"data/common/dev/Vagrantfile.tpl",
	)
}

func dataCommonDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevDepVagrantfileFragmentTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\xbb\x4e\x2b\x31\x10\x86\x7b\x3f\xc5\x9c\xcd\x29\xc9\xba\x8f\x42\x95\x82\x12\x24\x68\xa8\x90\x63\x4f\xd8\x91\x7c\x93\x3d\x5e\xb4\x8a\xf2\xee\xd8\x9b\x48\x59\xc4\x45\x50\x5a\x1e\x7f\xdf\xfc\xbf\xbc\x82\x3b\xf4\x98\x14\xa3\x81\xfd\x04\x06\x23\x7a\x83\x5e\x4f\x70\x08\xa9\x1e\x47\xb4\x21\x3a\xf4\xbc\x81\xe3\x11\xbc\x72\x08\xa7\x93\x10\xff\xaf\x87\x97\x8c\x5c\x22\xdc\xc2\x76\xbb\xbb\x7f\x78\x16\x2b\xd8\x85\x38\x41\x28\x09\xf6\xe4\x55\x9a\x44\x2e\x26\x80\x1b\x41\xb2\x8b\xb2\x1a\xd6\xd7\xc7\x20\x4b\x4e\xd2\x06\xad\xac\xac\xd3\x72\xe9\xb8\x80\x78\x40\x28\x31\xb3\x4a\x0c\x07\xb2\xf8\x13\xae\xbf\x0c\xf6\x3a\xf8\x03\x48\x64\x2d\xc9\x13\x2f\xb0\xf3\x4d\x63\x3f\xce\x40\xe2\x7f\x67\xde\x99\xbf\xd0\x2f\xb3\x34\x6d\x06\xf2\x1c\x40\x01\xa3\x8b\x60\x28\xa1\xe6\x90\xa6\x1e\x9e\xea\x7e\x59\x27\x8a\x0c\x6f\x64\x2d\xb8\x30\x62\x5b\xda\xf5\xa2\xb9\xe8\xb5\x1f\x5d\x1f\x53\x18\x29\x53\xf0\xd0\x35\x58\x77\x23\x00\x72\xad\x48\xe3\x06\xba\x6a\x8d\x8a\x87\x5e\x2b\x3d\x34\x77\x0d\x35\xae\x5b\xb0\x50\x38\x16\x9e\x87\x0d\x66\xae\x6d\x72\x45\xd4\x17\x5f\x44\xef\xc4\x9f\x75\xc1\xc5\x7a\x69\x16\x46\xb9\x2f\x64\x8d\x5c\xb6\xf8\x3b\xfb\x87\xe2\xbf\x5b\x25\x0f\x68\xed\xcc\x23\x6f\xc9\xd7\x5d\x3e\x7d\x23\xf1\x1e\x00\x00\xff\xff\x97\x51\x37\x37\x90\x02\x00\x00"

func dataCommonDevDepVagrantfileFragmentTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevDepVagrantfileFragmentTpl,
		"data/common/dev-dep/Vagrantfile.fragment.tpl",
	)
}

func dataCommonDevDepVagrantfileFragmentTpl() (*asset, error) {
	bytes, err := dataCommonDevDepVagrantfileFragmentTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev-dep/Vagrantfile.fragment.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevDepVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x6d\x4f\xdc\x38\x10\xfe\x9e\x5f\x31\x04\x38\x40\x22\x09\xad\xaa\x7e\xd8\x16\xd4\x0a\xee\x80\x0f\x27\xd0\xed\x5e\xef\xc3\xe9\x84\xbc\xc9\x24\xb1\xea\xd8\x3e\xdb\xd9\x17\x60\xff\xfb\x8d\xed\xec\x2e\xdb\x5e\x5f\x24\xd0\x3a\x63\xcf\xf3\xcc\xcb\xe3\xf1\x3e\x5c\xa3\x44\xc3\x1c\x56\x30\x5d\xc2\x9d\x73\xea\x14\x2a\x05\x52\x39\xc0\x8a\xbb\xbd\x64\x3f\xd9\x87\x49\xcb\x2d\xd0\x9f\x6b\x11\x3e\xb1\xc6\x30\xe9\x6a\x2e\x10\x9a\x2f\x7d\xa1\x56\x06\xa6\x3d\x17\x15\x97\x8d\x3f\x4e\xce\x53\x2e\x99\x59\xd2\x07\x73\x1e\xa3\xb7\x74\x9c\x59\x60\x50\xa1\x46\x59\xa1\x2c\x97\xc1\xad\xc2\x19\x0a\xa5\x3b\x94\x2e\x0f\xac\x57\x31\x8c\x96\xc9\x2a\xf3\xb1\x10\x04\xf9\x7b\xe2\x1c\x26\x0a\x3a\x55\xf1\x7a\x19\x8c\xa7\x1e\x35\x44\xf7\x51\xeb\x70\x20\x49\x86\x38\xf3\x52\xc9\x9a\x37\xbd\xc1\xe3\xf4\x75\x7a\xe2\x73\x7b\x8e\xa6\xe7\x04\x20\xae\xf2\x59\x97\x4f\xd5\x02\xce\x21\x6d\x99\x6d\x79\xa9\x8c\x2e\xb4\xc1\x92\x5b\x7c\xfb\x26\x4d\xe8\xe0\x3e\x8c\xd1\xf5\x9a\xa2\xb6\x4b\x59\x52\x06\xb5\x12\x15\x1a\xa8\x8d\xea\x40\xf5\x06\xe6\xca\x7c\xf6\x39\x57\x9c\xfc\x9c\xf2\x09\x2b\x28\x66\x31\x88\x1d\xa6\x08\xf0\x30\x00\xa4\x4f\x4f\xa0\x99\x6b\xf3\x35\xc0\x6a\x95\x9e\x06\xab\x6d\x99\xd9\x9c\x7b\xf0\x67\xc2\x1e\x61\x01\xa8\x39\x15\x7e\x04\xe9\x80\x4f\x1e\x8d\x51\xbd\x7e\x61\xf1\x41\x3f\x1d\x02\xaf\x81\x77\x5a\x19\x17\x01\xf6\x28\xc5\x14\x0e\x57\x21\xa3\x2b\x6e\xd9\x54\xc4\xba\x55\x58\xb3\x5e\xb8\xdd\xec\xbe\x17\x76\xee\xa3\x2c\xb6\xfc\x55\x04\xab\x46\xe0\x4c\x8f\x91\x9c\xba\x4b\xfc\xc4\x16\xe8\x7e\x95\x81\x6d\x3c\xbe\x01\x46\xc2\x71\xbe\xe9\x73\x66\x82\x52\xac\x22\x2d\x39\xe7\x97\xda\xf0\x19\x49\x6a\xab\x0e\x8e\x36\x54\xd7\x6e\xc3\xb1\xb6\xcd\x07\xef\x87\x88\x75\x1e\x69\x7f\xd4\xa9\x79\x8b\x06\x43\xbf\x4a\xd5\x69\x12\x4a\x05\x15\x73\x2c\x68\x5b\x05\xe7\x42\x91\x8c\x73\xf8\x0b\xbd\x52\x82\xe0\xa8\x8f\xac\x2c\xd1\x46\xf9\x07\x71\x83\x2d\x0d\xd7\x24\xd3\x9f\xe8\xeb\x86\x68\xb5\x2a\x48\xe2\x19\xe5\x55\x04\x90\x50\x40\xcf\xf6\x63\x81\xc5\xb0\x3d\x7d\xc9\x4a\xdf\x2d\x6e\x28\xe4\x9f\x62\x0f\xe7\xa3\xa6\x02\x59\x16\x2c\x03\xe5\xad\xb4\x8e\x09\x01\xd7\x6a\xc8\x0b\xe5\x8c\x1b\x25\xfd\x1d\xdc\x41\xd7\x46\xcd\xb8\xe5\x4a\x42\x6a\x5b\x14\x82\xe0\xb8\x14\x5c\xe2\x08\x0e\x62\x2d\x1e\x1a\x25\x98\x6c\x12\xea\x59\x92\xec\xda\xa8\x39\xef\xdf\x8f\x2f\xff\xb8\xbd\x9f\x24\x16\x1d\x64\xd4\x27\x85\xc7\x27\xf0\x04\x07\x1f\xe0\xf5\xc5\x2f\xaf\xe0\x19\x84\x6a\x1a\x0a\x3c\x73\xe0\xa3\x84\x0b\xf0\xc5\x2a\x64\x2f\xc4\x3b\x58\x25\x4a\x84\xe3\x58\xb6\x0a\xd2\xbf\xfd\x89\x7f\xc8\x37\xf5\x5b\x34\x28\x6e\x6b\x98\x23\xcd\x89\x19\x52\x26\xa7\xbe\x4e\x72\x98\x61\x2d\x29\x2a\x21\x0d\x52\x13\x3a\x1a\x23\x90\xcd\xa0\x21\xf0\x0d\x76\x60\x7f\x17\x3c\xe2\xbd\x12\x90\x52\x31\x98\x30\xc8\xaa\x25\xe5\x18\xea\x83\xd5\x5e\x9c\x6e\x73\x25\x8f\xdc\xda\x4a\x5c\x79\x1a\xbc\x70\x41\xc3\xe9\x2c\xa9\x39\xe5\x45\x00\x57\x74\x3b\x85\x62\x41\xd8\x04\x46\xad\x20\x3a\xaa\xc5\xc3\x0c\x4d\xa8\xe1\x6a\x95\xe7\xe4\xaa\x10\xe6\x8d\xaf\xc7\xbf\x90\xdd\x41\xd1\xaa\x0e\xd7\x17\xaa\x68\x54\xee\x98\xc9\x9b\x47\x68\x9d\xd3\x76\x54\x14\x96\x86\x0a\x69\x3d\x6f\x94\x6a\x04\x32\xcd\xad\x97\x56\x11\x4b\x4c\x3f\xff\x4b\x43\x2d\xea\x17\x19\xeb\xaa\xb7\x6f\x06\xbc\x18\xe2\x9f\x92\xbe\x4c\x0c\x70\x1d\x8b\xed\xbd\xe2\x19\xf5\xe0\x12\x8a\xde\x9a\x42\xa8\x92\x09\xc8\x16\x8f\xf5\xb7\x82\x8b\x60\xbf\xb3\x30\xb8\xae\xef\xee\x3f\x4e\x6e\x76\xd0\xba\xcf\x5e\xa9\x99\xa6\x5b\xa5\xbd\x9b\x97\x64\x52\x5b\xb7\xd4\x78\x7e\x70\x5c\x73\xea\xc8\x8b\x1d\xc8\x3a\xb2\xa0\xa6\xd5\x19\xad\xd9\x62\xb3\xf6\x0e\x40\xdd\xa3\xd9\x40\x2f\x0f\xa4\x87\xbf\xa5\x27\xc9\xd7\xee\x11\x19\x0e\x9e\xe2\x62\x35\x38\x9c\x91\xbc\x16\xcc\x34\x16\x32\xc2\x92\xf0\xea\xec\x0c\x48\x48\x73\x09\x43\x42\xa3\xf5\x98\x0e\xe9\x8c\x87\x41\x44\x97\x71\x93\x50\x10\xde\x11\x2e\xfc\x24\x0d\xd6\xf3\x17\xc4\x05\xbd\x70\xa3\x6d\xc5\xc8\x1a\x2c\x07\xfe\xdc\x11\x5c\x5c\x7c\x51\xbd\x7c\x4a\x6f\x8c\x29\x77\x31\x63\xf1\x5e\xa2\x7e\xc7\x33\x84\x39\xdc\x5d\x1f\xe9\xa7\xcb\xb1\x0d\x4f\x68\x13\xc6\xe8\x4e\x0b\x98\x76\x99\x17\x59\xaf\x2b\x3f\x55\xb3\xe5\x57\x3b\x6b\x39\x67\x4b\x68\x48\xc7\xd3\x47\x03\x1d\x9a\xb2\x37\x9c\x89\x48\x75\x39\x3c\xa1\x83\xa0\xe9\x22\xf8\xe7\xd6\x0f\x72\xef\x4b\x37\x05\x54\x0d\x37\x93\xc9\x7d\x60\xf6\x20\x71\x72\x40\x96\x35\x42\x4d\x49\x44\xbd\x11\x79\x4a\x1b\x1f\xe8\xbf\xed\xa7\x5e\xb9\xa3\x34\x1f\xbc\xef\xa8\xa3\x6b\x95\x6f\xf7\x8b\x34\x19\x66\xc6\x7f\x01\x00\x00\xff\xff\x8f\x98\x0f\x62\xa4\x08\x00\x00"

func dataCommonDevDepVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevDepVagrantfileTpl,
		"data/common/dev-dep/Vagrantfile.tpl",
	)
}

func dataCommonDevDepVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevDepVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev-dep/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevDepBuildShTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x92\x41\x8f\xd3\x30\x10\x85\xef\xfe\x15\x8f\x14\x69\xe1\x90\x44\x9c\x11\x08\xb8\xf4\x08\xd2\xc2\x09\xa1\x95\x6b\x4f\x12\xb3\xae\x27\x72\x26\xed\x56\xd5\xfe\x77\xc6\xce\xa2\xad\x14\xe5\xe0\xb1\xdf\xfb\xe6\xcd\xec\xde\xf4\x87\x90\xfa\x83\x5d\x26\xb3\x33\x3b\x7c\x5d\x85\xdb\x91\x12\x65\x2b\xe4\x71\xb8\xe0\xbb\x08\x77\xb5\xf6\x73\x0a\x0b\xf4\x93\x89\x70\x58\x43\xf4\x58\x5c\x0e\xb3\x60\xe0\x0c\x8b\x3d\xb7\x2a\xa3\x8f\xe6\xcc\x7f\xc9\x49\x67\x16\x12\xb4\x64\x0c\xc7\x77\xef\x71\x05\xb9\x89\xd1\xfc\x66\x15\xfc\x83\xb7\x5f\x9a\x8f\x78\x36\x2a\x7b\xaf\xb7\xa4\x48\x0b\x63\xb0\x8f\xb4\xe9\x2b\x50\x76\xe0\x84\x85\x8f\x84\x39\x5a\x51\x97\x63\x31\xb7\x82\x33\xdd\x65\x42\x48\xa2\x98\x4e\xc2\x89\x14\x10\xbf\x0e\x6b\x92\x55\x4f\x31\xdb\x2c\xc1\xad\xd1\xe6\xd2\x80\xa7\xc1\xae\x51\x1f\x71\xba\x13\x44\xb6\xfe\xd6\x21\x0c\x9b\x79\x58\xb4\xaa\x2a\xca\xdc\x19\x7a\x9a\x39\x0b\x7e\xdc\x7f\xf8\xd4\x7c\x46\x53\x29\x79\xcd\x8e\xa0\xff\xd2\xdf\x10\x22\x29\x99\x82\x60\x54\xfc\x7a\x6a\x65\x2a\xa5\x99\x72\xbc\x14\x99\x75\x36\x1d\xfa\x49\xf1\xfb\x93\x1d\xb3\x4d\xd2\x77\x9b\x69\xd1\xdb\x73\xe1\xe7\xfa\xf4\xcc\xf9\x31\xa4\x11\x3e\x64\xcd\x8d\xf3\xc5\x38\x8f\xeb\x15\xcb\x64\x33\xf9\x87\x81\xa3\xa7\xfc\x50\x0d\x9e\x6b\x64\x7b\xf5\xb4\x31\xd6\x3e\x3c\xcd\x94\x3c\x25\x17\x68\xd1\xa4\xd1\x68\x51\xaa\xda\x4d\xa1\xeb\xba\xc6\x8c\x5c\x61\xdb\x13\xba\x5e\x0f\x8a\xd0\xb7\x3a\xc6\x22\xf3\x32\x34\xd8\xe4\x71\xce\x41\xb6\x31\xf0\x2a\xf3\x2a\xaf\xa4\x1b\xd1\x0d\xe8\x0e\xe7\xa0\x58\xe5\xae\xe3\xe3\xac\xb1\xdc\x54\x4b\x42\x2f\xf3\x82\xb3\x09\x64\x97\xa0\xd9\xd0\x93\x94\xb1\x21\x68\xd2\x05\xb8\x42\x28\xf1\x7f\xc8\x6d\xb7\x5a\xdd\x95\xbe\xec\x4a\xeb\xac\x9b\xa8\xf7\x74\x6a\xb5\xa5\x76\x43\x6a\xcc\xbf\x00\x00\x00\xff\xff\x93\x14\x33\xb5\xba\x02\x00\x00"

func dataCommonDevDepBuildShTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevDepBuildShTpl,
		"data/common/dev-dep/build.sh.tpl",
	)
}

func dataCommonDevDepBuildShTpl() (*asset, error) {
	bytes, err := dataCommonDevDepBuildShTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev-dep/build.sh.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevDepUpstartConfTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\xcf\x31\x4f\x03\x31\x0c\x05\xe0\xdd\xbf\xe2\xa9\x48\x30\x95\xd0\xc2\x31\xde\xca\xc8\xc8\x80\x3a\xa4\x17\x17\x45\x4a\xed\x28\x76\x5b\x50\xd5\xff\xce\x11\x81\x54\xa6\x28\xef\x49\x9f\xed\xc4\x36\xb5\x5c\x3d\xab\x60\x71\x3e\x43\xe2\x9e\x71\xb9\x60\x89\x17\x16\x6e\xd1\x39\x61\xfb\x85\x57\x77\x5d\x10\x35\xb6\x1a\x4f\xf2\xf7\xa2\xe4\x7d\x76\xac\x06\x0c\x44\xe6\xb1\x39\x66\xa6\x1d\xa4\xf0\x91\x0b\xde\xd7\x8f\x4f\xc3\x66\x2e\xb4\xfe\xcf\x1f\x9e\x37\x44\x37\x78\x63\x24\x95\x3b\xc7\x29\x8a\xc3\x15\x33\xdb\x11\x57\xc5\x2e\x9a\x63\xa7\x0d\x89\xab\x51\x55\xf3\x65\x87\xf8\x93\x27\x58\x61\xae\x7d\x68\x5f\x9e\x80\x70\xb0\x16\x8a\x4e\xb1\x84\x6d\x96\x70\x75\xc9\x38\x86\x63\xfc\xe9\x3e\xae\xd2\xfb\xf9\x8b\xf5\x78\xbb\x22\x96\x84\x5f\xe5\x3b\x00\x00\xff\xff\x9a\xf6\x9d\x7c\x0c\x01\x00\x00"

func dataCommonDevDepUpstartConfTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevDepUpstartConfTpl,
		"data/common/dev-dep/upstart.conf.tpl",
	)
}

func dataCommonDevDepUpstartConfTpl() (*asset, error) {
	bytes, err := dataCommonDevDepUpstartConfTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev-dep/upstart.conf.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/aws-vpc-public-private/build/template.json.tpl": dataAwsVpcPublicPrivateBuildTemplateJsonTpl,
	"data/aws-vpc-public-private/deploy/main.tf.tpl": dataAwsVpcPublicPrivateDeployMainTfTpl,
	"data/aws-vpc-public-private/deploy/variables.tf": dataAwsVpcPublicPrivateDeployVariablesTf,
	"data/common/dev/Vagrantfile.tpl": dataCommonDevVagrantfileTpl,
	"data/common/dev-dep/Vagrantfile.fragment.tpl": dataCommonDevDepVagrantfileFragmentTpl,
	"data/common/dev-dep/Vagrantfile.tpl": dataCommonDevDepVagrantfileTpl,
	"data/common/dev-dep/build.sh.tpl": dataCommonDevDepBuildShTpl,
	"data/common/dev-dep/upstart.conf.tpl": dataCommonDevDepUpstartConfTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"aws-vpc-public-private": &bintree{nil, map[string]*bintree{
			"build": &bintree{nil, map[string]*bintree{
				"template.json.tpl": &bintree{dataAwsVpcPublicPrivateBuildTemplateJsonTpl, map[string]*bintree{
				}},
			}},
			"deploy": &bintree{nil, map[string]*bintree{
				"main.tf.tpl": &bintree{dataAwsVpcPublicPrivateDeployMainTfTpl, map[string]*bintree{
				}},
				"variables.tf": &bintree{dataAwsVpcPublicPrivateDeployVariablesTf, map[string]*bintree{
				}},
			}},
		}},
		"common": &bintree{nil, map[string]*bintree{
			"dev": &bintree{nil, map[string]*bintree{
				"Vagrantfile.tpl": &bintree{dataCommonDevVagrantfileTpl, map[string]*bintree{
				}},
			}},
			"dev-dep": &bintree{nil, map[string]*bintree{
				"Vagrantfile.fragment.tpl": &bintree{dataCommonDevDepVagrantfileFragmentTpl, map[string]*bintree{
				}},
				"Vagrantfile.tpl": &bintree{dataCommonDevDepVagrantfileTpl, map[string]*bintree{
				}},
				"build.sh.tpl": &bintree{dataCommonDevDepBuildShTpl, map[string]*bintree{
				}},
				"upstart.conf.tpl": &bintree{dataCommonDevDepUpstartConfTpl, map[string]*bintree{
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

