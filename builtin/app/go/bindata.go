// Code generated by go-bindata.
// sources:
// data/aws-vpc-public-private/build/template.json
// data/common/dev/Vagrantfile.tpl
// DO NOT EDIT!

package goapp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"reflect"
	"strings"
	"unsafe"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	var empty [0]byte
	sx := (*reflect.StringHeader)(unsafe.Pointer(&data))
	b := empty[:]
	bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	bx.Data = sx.Data
	bx.Len = len(data)
	bx.Cap = bx.Len

	gz, err := gzip.NewReader(bytes.NewBuffer(b))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAwsVpcPublicPrivateBuildTemplateJson = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x00\x02\xa5\xdc\xcc\xbc\xf8\x82\xc4\xe4\xec\xd4\xa2\xf8\xb2\xd4\xa2\xe2\xcc\xfc\x3c\x25\x2b\x05\x25\x03\x3d\x0b\x3d\x03\x25\xae\x5a\x2e\x40\x00\x00\x00\xff\xff\x1b\x82\xd0\x08\x26\x00\x00\x00"

func dataAwsVpcPublicPrivateBuildTemplateJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsVpcPublicPrivateBuildTemplateJson,
		"data/aws-vpc-public-private/build/template.json",
	)
}

func dataAwsVpcPublicPrivateBuildTemplateJson() (*asset, error) {
	bytes, err := dataAwsVpcPublicPrivateBuildTemplateJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-vpc-public-private/build/template.json", size: 38, mode: os.FileMode(420), modTime: time.Unix(1435862031, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x94\x5b\x6b\xeb\x46\x10\xc7\xdf\xf5\x29\xa6\xf2\x69\x4f\x0b\xd1\x8a\x13\x42\x1e\x4c\x62\x08\x29\xa4\x79\x28\x49\x1b\x37\x2f\xa5\xc4\x6b\x69\x24\x2d\x59\xed\x6c\x77\x57\xbe\xe4\xf2\xdd\x3b\x2b\xc9\x89\x1d\x48\x39\x60\xb0\x34\x3b\xf3\xfb\xcf\x4d\x3b\x81\x2b\x34\xe8\x64\xc0\x12\x96\x5b\xb8\x09\x81\x8e\xa0\x24\x30\x14\x00\x4b\x15\x7e\x48\x26\xc9\x04\xe6\x8d\xf2\xc0\xbf\xd0\x20\xdc\xcb\xda\x49\x13\x2a\xa5\x11\xea\x8f\xb1\x50\x91\xeb\xbd\x4a\x5c\xa1\x26\xdb\xa2\x09\x40\x15\x23\x42\x44\x48\x6b\xb5\x2a\x64\x50\x64\x72\x8f\x6e\xa5\x0a\x14\x70\x1d\xc0\x37\xd4\xe9\xb2\x17\x5d\x22\x34\xd2\x94\x59\x14\xc7\x52\xc0\x9c\xa0\xa5\x52\x55\xdb\x88\x65\xce\x9e\xfc\x11\x74\x1e\x7b\xb5\x0b\x6b\xa3\x41\x24\xc9\x78\x2c\x0a\x32\x95\xaa\x3b\x87\x3f\xa7\xc7\xe9\x2f\xb1\xa2\x97\xc1\xf4\x92\x00\x0c\x4f\x62\xd5\x8a\x25\x6d\xe0\x1c\xd2\x46\xfa\x46\x15\xe4\x6c\x6e\x1d\x16\xca\xe3\xe9\x49\x9a\xb0\xe3\x04\xee\x30\x74\x16\x24\xf8\xad\x29\xb8\xcc\x8a\x74\x89\x0e\x2a\x47\x2d\x50\xe7\x60\x4d\xee\x51\x99\x1a\x4a\xc5\x71\x81\x1c\x67\x49\x90\xaf\x86\x24\x0e\x94\x06\xc0\xc3\x08\x48\x9f\x9f\xc1\xca\xd0\x88\x1d\xe0\xf5\x35\x3d\x82\x74\x17\x39\x8a\x5f\x1b\x1f\xa4\xd6\x70\x45\xb0\xec\x14\x37\x08\xcd\x4a\x39\x32\xb1\xab\x07\x70\xeb\x68\xa5\x3c\x77\x15\x52\xdf\xa0\xd6\xcc\x52\x46\x2b\x83\x53\xf8\xe2\x0b\xa7\x6c\x78\xa8\x49\x4b\x53\x0f\xdc\xdf\xe5\x23\x82\xe2\xb6\x13\x77\x4f\x06\x58\x8c\xb2\xe0\x7d\xb3\x80\x9a\xd0\x8f\x05\xe9\xbe\x9e\xd8\x61\x6e\x4e\x34\x44\xfb\x77\x2a\xb3\x1b\xc0\x8f\x7f\xfc\x8d\x45\x43\x90\x16\xe5\x5b\x5b\x52\x98\xcd\x20\x6f\xa8\xc5\x9d\x25\x17\x4b\x1e\x80\x2b\xfe\x49\xd0\x94\x49\x72\x98\x32\xcf\xe7\xec\xec\xee\xf2\xcf\xeb\xdb\x79\xe2\x31\x40\x86\x49\x32\x30\x7f\xa5\xb5\xd1\x24\xcb\xd8\xbf\x2b\x12\x42\xa4\xc9\xba\x8e\x1e\xff\x42\x76\xf3\x41\xa1\x26\x11\xa4\x13\xf5\x13\x34\x21\x58\x3f\xcd\x73\xcf\xe3\x92\x35\x8a\x9a\xa8\xd6\x28\xad\xf2\xbc\x34\x6d\x3e\x88\xf2\xdf\x37\x71\x22\x8e\x05\x97\xd2\x6d\x32\xd9\x96\xa7\x27\x23\x60\xa7\xfe\x97\xe1\x77\xb7\xa7\xed\x3b\xde\x32\xb6\x41\x76\x09\x79\xe7\x5d\xae\xa9\x90\x1a\xb2\xcd\x53\xf5\x59\x32\x3b\x16\x0f\xa4\x07\xdd\xdc\x5e\xcc\x7f\x7b\x87\xb5\x8f\xdc\x6e\xc8\x2c\xe4\x64\x63\x54\xdc\x98\xe1\x84\xa3\xd6\x06\x16\xeb\x86\x64\xab\x16\xd3\xdd\xc3\x81\xe3\xc8\xe6\x0d\x0e\x11\xce\x6b\xfc\x46\xef\x4f\xbe\xe2\xc6\x92\x0b\xbd\xf5\x7c\x2f\x30\x5f\x2a\x33\x7d\x2f\x80\xad\xbd\xe5\x4b\xf4\xfb\xfa\xe9\xec\x0e\x99\x43\x25\xfb\xd4\xff\x89\x1c\x13\x1d\xb7\x3d\xe6\x7a\x7f\x79\xe7\xfb\xab\xa4\x26\xbe\x63\xc2\x7b\x47\xa4\x0d\x59\x1c\x71\x67\x4b\xbe\x76\x20\xdb\xc2\x2c\xe7\xab\x26\x37\x1d\x7f\x26\xc7\xb3\x9f\xbe\x1d\xba\xa9\xf1\x03\x62\xbf\x9a\xf7\x7d\xf9\xe4\xa0\x45\x57\x74\x4e\x49\x9d\x8c\x3b\xf5\x5f\x00\x00\x00\xff\xff\xd6\x6f\x4d\xca\x02\x05\x00\x00"

func dataCommonDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevVagrantfileTpl,
		"data/common/dev/Vagrantfile.tpl",
	)
}

func dataCommonDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev/Vagrantfile.tpl", size: 1282, mode: os.FileMode(420), modTime: time.Unix(1439846905, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/aws-vpc-public-private/build/template.json": dataAwsVpcPublicPrivateBuildTemplateJson,
	"data/common/dev/Vagrantfile.tpl": dataCommonDevVagrantfileTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"aws-vpc-public-private": &bintree{nil, map[string]*bintree{
			"build": &bintree{nil, map[string]*bintree{
				"template.json": &bintree{dataAwsVpcPublicPrivateBuildTemplateJson, map[string]*bintree{
				}},
			}},
		}},
		"common": &bintree{nil, map[string]*bintree{
			"dev": &bintree{nil, map[string]*bintree{
				"Vagrantfile.tpl": &bintree{dataCommonDevVagrantfileTpl, map[string]*bintree{
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

