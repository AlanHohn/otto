// Code generated by go-bindata.
// sources:
// data/common/dev/Vagrantfile.tpl
// DO NOT EDIT!

package nodeapp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCommonDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x55\x51\x6f\xdb\x46\x0c\x7e\xd7\xaf\x60\x95\x76\x68\x81\x48\xc2\x8a\xa2\x0f\x59\x13\x2c\x4b\xb2\x35\xc0\x96\x14\x75\xba\x97\x61\x70\xcf\x12\x25\xdd\x72\x3a\xde\xee\x4e\x8a\xdd\xd8\xff\x7d\xbc\x93\xec\x3a\xe9\x8a\x0d\x28\x90\x18\x32\x45\x7e\xfc\x48\x7e\xa4\x0f\xe0\x17\xd4\x68\x85\xc7\x0a\x16\x2b\xb8\xf6\x9e\x0e\xa1\x22\xd0\xe4\x01\x2b\xe9\x9f\x24\x07\xc9\x01\xdc\xb4\xd2\x01\xff\xf9\x16\xe1\x77\xd1\x58\xa1\x7d\x2d\x15\x42\xf3\x38\x16\x6a\xb2\xd1\xab\xc2\x01\x15\x99\x0e\xb5\x07\xaa\x19\xc2\x07\x08\x61\x8c\x92\xa5\xf0\x92\x74\xe1\xd0\x0e\xb2\xc4\x1c\x2e\x3d\xb8\x96\x7a\x55\xc5\xa4\x0b\x84\x56\xe8\x2a\x0b\xc9\xb1\xca\xe1\x86\xa0\xa3\x4a\xd6\xab\x00\xcb\x38\x7b\xe9\x0f\xa1\x77\x18\xb3\x9d\x1a\x13\x0c\x79\x92\x4c\xaf\xf3\x92\x74\x2d\x9b\xde\xe2\xf3\xf4\x65\xfa\x22\x54\xb4\x1e\x4d\xeb\x04\x60\x7c\xca\x87\x2e\x5f\xd0\x12\x8e\x21\x6d\x85\x6b\x65\x49\xd6\x14\xc6\x62\x29\x1d\xbe\x7e\x95\x26\xec\x78\x00\x33\xf4\xbd\x01\x01\x6e\xa5\x4b\x2e\xb3\x26\x55\xa1\x85\xda\x52\x07\xd4\x5b\xb8\x23\x7b\x2b\x75\x03\x95\xe4\x38\x4f\x96\x59\x12\x14\xc3\x48\xe2\x41\xa6\x11\x60\x3e\x01\xa4\xf7\xf7\x60\x84\x6f\xf3\x2d\xc0\x66\x93\x1e\x42\xba\x8d\x4c\x0f\x39\x16\x80\xee\xb8\xbd\x47\x90\xee\xac\xd0\x58\xea\xcd\x9e\x65\x24\x79\xa1\xc5\x82\xa7\x31\x9b\xbd\x05\xd1\x84\x8e\xf3\x14\xee\x84\xad\x02\xb0\x23\x9e\x92\xf7\xe1\xd1\x58\x39\xf0\xb0\x78\x36\x06\x75\x85\xba\x94\xe8\x62\x05\xee\x33\x53\xe7\xda\x7c\x8a\x9e\x8f\x58\xc7\xe0\x6d\x8f\x63\xa2\x5f\x49\x54\x20\x94\x8a\xb5\xd7\x56\x34\x61\xbe\x0e\x5a\xb4\x18\x27\x2f\xf4\xea\x01\x7a\xce\x51\xf7\xcf\xe2\xab\xad\x37\x48\x1d\xc4\x31\xff\x1c\xfd\x6c\x13\xbc\xee\x77\x1e\x6b\x8b\x9c\x65\xb3\x19\x63\x19\x2b\x84\xb3\x53\x64\x70\xa9\x9d\x0f\x04\x16\xbd\x64\xc1\xa0\x1e\xa4\x25\x1d\xa2\x1e\x34\xdb\x58\x1a\xa4\x63\x95\x41\xea\x5a\x54\x8a\x3b\x27\xb5\x92\x1a\x8f\xe0\xa9\x2b\xad\x34\x7e\xce\x52\x4c\x18\x3b\x49\xf6\x0c\x5c\xeb\x9b\x37\xb3\xb3\xf7\x97\xef\x6e\x12\x87\x1e\x32\x2e\xfb\x00\x88\x75\x9d\xe1\x12\xcb\x23\x08\x9f\x3d\x77\xb0\xa4\xae\x63\x91\xc2\x9d\xf4\x2d\xf7\xc2\x9b\xde\x83\xa2\xa6\x09\x8b\xc0\x8f\x41\xc7\x95\x74\x46\x89\x15\x56\x09\xe1\xf3\x17\x70\x0f\x4f\x7f\x84\x97\x27\xdf\x7d\x0f\xeb\xd1\xd3\x42\xe6\x23\x34\x9c\x40\xc1\x0d\x29\x74\xaf\xd4\x0f\xb0\xd9\x65\x64\xaf\xa3\x2d\xb6\xe0\xd9\x61\x2d\x97\x8c\xdf\xa1\x73\x3c\x98\x84\x54\x44\xc5\xb2\x25\x48\xff\x08\x11\x7f\x72\x8a\x74\x42\xf8\x4d\xdc\x22\x48\x1f\xa6\xef\x5b\xe1\xe1\xe3\x24\x18\xe0\xf9\x7e\x84\x86\x78\xf0\xa3\x64\x55\x54\x6c\xd8\x21\x96\x7f\x30\x04\x7b\x32\xa2\x96\xd5\x4e\xca\x29\x9c\x30\xcd\x96\x3a\xdc\x5a\x8a\x7c\xc1\x4b\x63\xcb\x90\xed\x6c\x5a\xb6\x20\xb2\x20\xc2\x38\x6f\xe1\x3c\x17\xc9\x55\x48\x9d\xc8\x1a\x9e\xb0\x76\xd1\x40\xfa\xc1\xe1\xf9\xd5\x8c\x5b\x94\x42\x81\xbe\x2c\x98\x50\xf8\xaf\xe6\xe3\xf4\xe0\x64\xaf\x19\x4c\x4b\xf3\x5c\x47\x36\x7b\x81\x6b\x70\x3d\x6f\xb4\x47\x84\x4c\xfc\x17\x0c\x03\x10\x8e\x01\xd3\xc9\x09\x4d\x00\x8b\x2c\x24\xeb\x93\x5a\x26\xdc\x4b\x48\xcf\x79\xd9\x14\xcb\x3b\xd4\x70\x45\x15\x06\x45\x06\x9d\x6a\x7e\x9e\x0f\x68\xa3\x9a\x36\x9b\x3c\xcf\x53\x9e\x28\xdc\x35\x41\x1f\x7f\x43\x76\xfd\xa8\x2d\xc1\x3f\x67\xe4\xbc\xf9\x04\xad\xf7\xc6\x1d\x15\xd1\xf6\x97\xcb\xc9\x36\x05\xcb\xc2\x17\xc3\xbf\x63\x47\xbf\xec\x2b\x2f\x33\x96\x6f\xbf\xcc\x96\xaf\x5f\x4d\xe8\x23\xed\x0f\x9a\xbf\xd9\x2d\xe9\x2d\xbb\xb1\x3d\x82\x35\x76\x06\x05\x19\x66\xba\xfc\x54\x7f\x9d\xe8\x08\x35\x9b\xce\x04\xdf\xbb\x77\xa7\x37\x6f\x1f\x60\x29\x0d\x99\x8b\x50\xff\x93\x64\xb1\x90\x3a\xba\x42\xd1\x3b\x5b\x28\x2a\x85\xda\xd9\xbe\x15\xd6\x74\x5f\xa0\x9a\x6e\x2c\x62\xba\x0f\xa1\x8e\x78\x22\x32\x5e\x17\xbe\x0e\x52\xa8\xa8\x4a\xcd\xbf\x3d\x03\xf2\xe9\x2d\x6f\x79\x89\x5c\xac\x11\x97\x86\xac\x87\xf3\x8b\x9f\x2e\x4f\xaf\xe6\x3f\xbf\xbf\xbe\xba\xb9\xb8\x3a\x3f\xd6\xa4\xa5\x66\x09\x8b\x32\x84\xec\x28\x0b\xe3\xb3\x30\xfb\xde\x54\xe1\x96\x66\xab\x2f\xde\xc8\xe9\x44\x65\xab\xc7\x14\x92\xe9\xb6\xfc\x13\x00\x00\xff\xff\xd8\x34\x32\x56\x75\x07\x00\x00"

func dataCommonDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevVagrantfileTpl,
		"data/common/dev/Vagrantfile.tpl",
	)
}

func dataCommonDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/common/dev/Vagrantfile.tpl": dataCommonDevVagrantfileTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"common": &bintree{nil, map[string]*bintree{
			"dev": &bintree{nil, map[string]*bintree{
				"Vagrantfile.tpl": &bintree{dataCommonDevVagrantfileTpl, map[string]*bintree{
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

