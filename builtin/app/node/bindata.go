// Code generated by go-bindata.
// sources:
// data/aws-simple/build/build-node.sh
// data/aws-simple/build/template.json.tpl
// data/aws-simple/deploy/main.tf.tpl
// data/common/dev/Vagrantfile.tpl
// DO NOT EDIT!

package nodeapp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAwsSimpleBuildBuildNodeSh = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x7f\x4f\x1b\x39\x10\xfd\x7f\x3f\xc5\x34\xa0\x72\x27\xb1\xbb\x80\xae\x77\x6d\x68\xab\x03\x0a\x2d\x52\x15\xaa\xb4\xa7\x3b\xa9\xed\xa1\xcd\xee\x24\xeb\xb2\xb1\x5d\xdb\x1b\x08\x94\xef\x7e\x6f\xbc\x21\x21\xd7\x1f\xea\x3f\xe0\xd8\x9e\x99\x37\x33\x6f\x9e\x77\xe3\x41\x3e\x52\x3a\x1f\x15\xbe\x4e\x12\xcf\x81\x52\x43\xda\xb4\x7a\xb1\x64\xe7\xf8\x4a\xc5\xa5\x55\x96\xc7\x85\x6a\x16\xdb\xc1\x15\x25\x27\x09\x56\xc6\xfd\xf2\x2b\xdd\x24\x44\xd4\x98\xb2\x68\xc8\x9b\xd6\x95\x3c\x56\x0d\x3f\xdb\xdc\x5d\x6d\x37\x4a\xb3\x36\xcf\x36\xf7\x64\x8b\xcb\xda\x50\xef\x78\x38\x3c\x1b\x52\x11\x68\xf3\x66\x65\x74\xdb\xdf\xbc\xe9\xee\xde\xee\xd3\xeb\xc2\x07\xd8\x4f\x7c\xbf\x27\x66\x13\xc7\x96\x4c\x08\x86\xf2\x59\xe1\x72\x1c\xe4\x7e\xee\xf1\x8f\xbe\x50\x88\xd8\x34\xed\xed\x24\xb7\x09\xd0\x59\xda\x8a\xe0\xa8\xb7\x79\x73\x78\xf0\xf6\xd5\xf9\xdb\xb3\xbf\x86\x47\xc7\xb7\x3d\xd9\x78\x7d\x3a\x38\x1e\x9c\xdd\xf6\xb6\x08\x18\x92\xc4\xb0\xa4\x80\x83\x3f\x7b\xb4\xf7\xfc\xe1\x2e\xdc\xc1\xe9\x84\x1d\xa5\xa1\x8b\xf7\x9c\xf2\x8a\x67\xb9\x6e\x9b\x66\x9f\x6e\x13\xd3\x44\x83\x2e\x8d\xf7\x72\xe3\x23\xc1\x58\x8e\x92\x0d\x2a\x1b\xd3\x56\x69\x69\xf4\x58\x4d\xa8\x2c\x34\x29\x1d\xd8\x8d\xd9\x31\x5d\xaa\x50\x53\x61\x03\x95\x66\x3a\x2d\x74\xe5\x49\x8d\x49\x85\x2d\x4f\x3e\xa8\xa6\xc1\x4d\xb2\xce\x20\x4f\xef\x11\x84\x7a\x7f\x17\x2a\x28\x3d\xa1\x31\x12\x59\x73\x0b\x4c\x70\x61\x1b\x0e\x9c\x65\x59\x2f\x69\x35\xec\xe9\xfd\x7b\x4a\xc7\x8b\xe2\xa8\x51\x1e\x2d\x72\xa5\x7d\x28\x74\xc9\xf9\xc8\x98\x90\x8e\x95\x56\xbe\xe6\x8a\x3e\x7e\xdc\xa7\xca\xa0\xac\xbe\x61\x94\x75\x27\x7b\x94\x54\x46\xa3\xa7\x12\xf7\xa0\xaa\x24\xac\x20\x05\x16\x6b\xbc\x0a\xc6\x29\xf6\x04\xcc\xd4\xda\xaa\x10\x54\x31\xb0\x61\xf2\x6d\x65\xe4\x6a\x3a\x01\x6b\xe2\x21\x53\x3a\xff\xea\x24\xe2\x40\x8e\xe9\x1c\x1c\x19\x87\xcb\xc2\x71\x8a\x64\x2d\xbb\x00\xcf\xa9\x54\xc4\xe8\x95\x55\x55\xa5\x62\x89\x96\x77\xd1\xe7\x62\x68\x6d\xd1\x2f\x6b\xa7\x7c\xda\x70\x91\x6b\x53\x71\xf6\xc9\xaf\x45\xba\xe0\x39\x6c\x67\x94\xca\xca\xb3\x9b\xa1\x8b\xf5\x85\xed\xe7\xf9\xf2\x77\xd6\x8e\x50\xae\x36\x43\xc4\xfe\xe3\x1d\xdc\x74\x5c\xce\xe2\x75\x7a\xf4\xfb\xee\xc9\x93\xc3\x27\x47\x07\x47\xbf\xed\x1c\xee\x9d\xfc\x91\xc4\x16\x6f\x55\x3c\xa2\x3a\x04\xeb\xe1\xc6\x78\x9f\x62\x66\x0a\x29\x47\x66\xeb\xd6\x2b\xa3\x6d\xe1\x3d\x6b\x10\x46\x7c\xe6\x80\x91\x2f\x77\x28\xb8\xd6\x87\x39\x4d\x0b\xa5\xb7\x40\xac\x08\x34\x30\x53\xce\xa1\x8c\x57\x3b\xee\xfb\xac\x51\x3e\x64\xd5\xca\x32\x6e\xdc\x67\xde\x77\x6a\xdd\x75\xec\xb4\xab\xae\x74\x6d\xd8\x8e\xe6\xdb\xf4\xe6\xce\xcf\x36\x0d\x26\x4a\x5f\x6d\xc7\xde\x99\x50\x03\x93\x2d\xca\x8b\x62\x82\x98\xd2\x41\xbe\xb2\xc6\x05\x7a\x71\x7c\x78\x7a\x30\x38\x3f\x19\x9e\x0d\xde\x1d\x0f\x5e\x3c\xd3\x46\x47\xde\x16\x65\x50\x33\xfe\x51\x37\x47\xd7\x8e\x26\x50\x89\x29\xbb\xb2\x75\x0a\xc3\x3e\x6a\x55\x53\xa5\x2c\x00\x82\xfc\xfe\x00\x9a\x81\x90\xf6\x73\x8a\x5c\xe8\x1a\xcb\xdd\x49\x5c\x7e\x9f\x08\xd1\x46\x82\x61\x96\xb5\x17\x84\x69\xec\x40\xdc\x97\xc6\x7f\x5a\x2c\x25\xb7\x94\xaf\x70\xcd\xd3\xb2\x76\x5d\x4d\x8e\x65\xb7\x0c\x1d\x93\x6d\x4c\x36\xe6\x30\xbd\xa8\x14\x66\xdb\x52\xee\xdd\x2c\x97\xf1\x05\xd5\x6c\x77\x16\x0a\x47\xd7\x57\x18\xa2\x30\xb5\xcb\xa3\x2c\x4c\xae\x29\x3d\xfa\xdf\xfd\xf5\x49\xb1\x8d\x2a\x31\x16\x40\xde\x82\x66\xeb\xb3\x51\x55\xb2\x07\xa6\x55\xca\x17\xa3\x86\xab\x54\x90\x5e\x1a\x57\x61\x6f\xc2\xa5\xf1\xd4\xeb\xd1\xba\xe3\xb7\x1c\x22\x72\x94\x65\xaa\xbc\xb0\xcc\xaf\x39\x05\x31\x2f\x35\xa5\xc3\xa5\x59\xff\x5b\xf0\x8e\xa2\x5c\xa0\x2b\xf0\x14\x4b\x15\x7d\x40\xa4\xde\xd5\x0a\xe2\xe3\x31\xde\x9f\x5b\xe5\xa0\x07\x22\x31\xf7\x58\x6b\x48\xba\x5c\xe0\xbc\xf0\x46\x0b\x68\x62\x3d\x53\xce\xe8\x29\x9a\x4a\x97\xb5\xc8\x19\x9a\x0e\x7d\x83\x37\xa8\x4a\x45\x7c\xc5\x65\x1b\xe4\xaa\x47\xb7\x2f\x40\xf1\xd6\xbb\xf8\xbe\xc0\x72\x7b\xf5\x0b\x24\x69\xb6\x09\xf4\xcf\xe8\x14\x21\x1a\x2f\xac\xb2\x60\x81\x0e\xcd\x1c\xce\x34\x33\x84\x11\x08\x4c\x89\xab\x54\xab\x49\x2d\xc2\x08\xe6\x52\xa7\x7e\x19\x1d\x58\xcb\x3a\x16\x1e\x10\x24\x11\xed\xdb\xf1\x58\x95\x0a\x3e\x32\xea\xa7\x5f\xba\x66\x7a\xe4\x95\x2a\xda\xda\xf5\xf9\xbf\x02\x82\xde\x1c\xbc\x7b\xb5\xff\x41\xe7\x5b\xdd\xf8\xc5\x8a\x74\x7f\x33\x71\xfd\x0d\xab\x0d\x3a\x43\x41\xfb\x24\x2f\xa2\x58\x83\xb2\xf7\xca\x24\xea\xee\x31\xcc\x77\x82\xf0\x03\xd7\x48\x6c\x80\xc4\x24\x2f\xc7\x53\x33\x63\x24\x04\xe4\x70\x17\x2f\x49\xa1\x91\x35\xb4\x80\x20\x77\xdc\x21\x71\xd3\xfb\xce\x64\xdf\xa7\x1c\x9b\x51\x41\x15\xc6\x45\xdb\x84\xae\x97\xec\x39\xbe\xb0\x10\x68\xb4\xc5\x42\xb3\xa5\x49\x98\x08\x19\x26\x2c\xfd\x5d\x01\x97\xd0\xd3\x85\x06\x54\xb4\xc2\xb8\x8d\xc1\x0d\xf0\x17\x1f\x24\xf4\x5d\x75\x44\xa8\x30\x9b\x60\x82\x67\xf4\x48\xb4\xfd\xee\x09\xaa\x91\x7c\xe8\xca\x65\x5a\x44\x03\xf3\xf5\x22\x5e\x96\x60\x16\xe8\xe9\xd3\xc1\xcb\xd3\xc1\x3f\x47\x67\x83\x93\xaf\x94\xaf\x4b\x49\x5c\xad\x69\x9e\x6c\xac\x69\xde\x06\xbd\x64\xcd\x12\xb7\xa2\xd1\x3c\x36\x23\x59\x5e\x3f\x77\x78\xd2\x3a\x62\xc9\x7b\xe7\x20\x7c\xf9\x0c\xc4\x30\x38\x91\xf5\x42\x9e\xcf\x97\x06\xb9\x7c\x8c\x84\x38\x4b\x78\x07\xf7\x93\x25\xbe\xe4\x27\x01\xaf\xf7\x60\xa9\x0f\x3f\x05\x7b\xf1\x1a\xc5\x6f\x25\x12\x71\x67\x4d\x8f\x77\xf6\xe3\xcf\x2e\x91\xfb\xf3\x9b\xdb\x76\x04\x49\xe9\x8e\x57\x19\x2f\x42\x93\xd1\xfb\xf8\xd0\xb9\x87\x5f\xa6\x7d\xd8\x6a\x1d\x27\xdd\x4e\x57\x6a\x97\xb6\x4b\x89\x10\x5a\x2f\x3f\xf8\x28\x6d\x4a\xea\x95\xd5\x7a\x58\x7a\xf8\x50\xcc\x57\xfa\x2e\xd2\x5c\xb5\xa5\x14\xad\xd7\x45\x81\x6b\xf9\x52\x78\xd0\x4b\xfe\x0b\x00\x00\xff\xff\xd2\x54\x87\x52\x3f\x0a\x00\x00"

func dataAwsSimpleBuildBuildNodeShBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleBuildBuildNodeSh,
		"data/aws-simple/build/build-node.sh",
	)
}

func dataAwsSimpleBuildBuildNodeSh() (*asset, error) {
	bytes, err := dataAwsSimpleBuildBuildNodeShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/build/build-node.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsSimpleBuildTemplateJsonTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\xed\x6e\xa3\x30\x10\xfc\xcf\x53\x58\x96\xf2\x0f\x48\xee\x4e\xba\x54\x7d\x95\x2a\x22\x06\xb6\x60\xc5\x36\x96\xd7\x4e\x95\x20\xbf\x7b\xcd\x37\x54\x4d\xc2\x1f\xa3\x9d\xf1\xec\x78\x76\xdb\x88\x84\x8f\x4a\xae\x32\xcd\x8a\x0b\x98\xec\x0a\x06\x79\xa3\xe8\x3b\xa1\x87\xf4\x2d\x3d\xd0\x38\x1a\x38\x57\x66\x38\xcb\x05\x60\x80\x86\x6b\xa1\xc8\xbe\x30\x63\x45\x01\x88\xd9\x05\x6e\x01\x51\x4e\x88\x78\x8d\x22\x14\x06\xec\x23\xd4\x40\x35\x34\xdb\x20\x28\x5c\x15\xfc\xd8\x7a\x04\xfa\xba\x9f\x8c\x68\xd3\x5c\x79\xe7\x31\x38\x0d\x84\x8f\xf1\xd6\xe4\x29\x30\xec\x4d\x43\xf7\x80\x4f\x2e\x80\xc6\x4b\x1d\x1b\x67\x8a\x1e\x69\x77\x24\x3c\x34\x67\x96\x4b\xb2\xf3\x6d\x4b\x1c\x82\x21\xe7\xb9\xf1\x99\x78\x1f\x38\xa0\xca\x15\x6d\x2d\x55\x02\x5a\xae\x02\x30\x44\xb5\xb7\x52\xef\x1b\x6b\x9b\x84\x69\x9d\xda\xea\x4e\x47\xaa\x8f\x1f\xdb\xc3\x1a\x84\xd8\xf8\x2b\x0c\xd7\xb6\x83\x72\xc7\x45\x99\xa8\xa6\x84\x14\xeb\x59\xab\x3f\x4f\x53\x0e\x3d\x67\xcc\x60\x1e\x88\x62\xb2\xd7\xee\xbc\xcc\xd2\x73\x47\x26\xd9\xbd\x51\x09\xe4\xb8\x60\x9b\xf1\x3d\x0a\x66\x3b\xe7\xe7\xe9\xd0\xcd\xc8\x9f\x29\x2e\xc4\x17\x8a\xf3\x9a\x3c\x53\x1b\x48\xaf\xbc\xf5\x2b\x90\x31\xc9\x87\x3c\x78\x72\xfc\x9f\xff\x65\xc7\x3f\xcb\xa2\x50\xae\xd0\x32\x15\x58\x53\x6c\xc5\xbf\x54\x30\x53\xad\x28\x88\x75\xd6\x75\x9e\xe2\x76\xb9\x53\xd6\xad\x42\x95\x3c\x9b\xb0\xb6\xed\xfe\xbc\x27\x3f\xbd\x87\x33\x6c\x11\x93\xfa\x37\xc7\xc3\xce\x9f\xa2\xc8\x47\xdf\x01\x00\x00\xff\xff\x2a\xa6\xb3\x8a\xa5\x03\x00\x00"

func dataAwsSimpleBuildTemplateJsonTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleBuildTemplateJsonTpl,
		"data/aws-simple/build/template.json.tpl",
	)
}

func dataAwsSimpleBuildTemplateJsonTpl() (*asset, error) {
	bytes, err := dataAwsSimpleBuildTemplateJsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/build/template.json.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsSimpleDeployMainTfTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x55\x4d\x6f\x1b\x21\x10\xbd\xfb\x57\x8c\x48\x4f\x55\xb3\x4e\x73\x8a\x22\xf5\x16\xa9\xb7\xe6\xd2\x5b\x15\xad\x58\x16\xbb\x28\x18\x10\x1f\xae\x56\xd6\xfe\xf7\x0e\xe0\x35\xcb\xda\xf9\xa8\x22\xd5\xb9\xc4\x6f\x66\x78\x33\xef\xc1\xf8\x0a\xbe\x73\xc5\x2d\xf5\xbc\x87\x6e\x80\x47\xef\xf5\x17\xe8\x35\x28\xed\x81\xf7\xc2\xc3\x8e\xaa\x40\xa5\x1c\x56\xab\x3d\xb5\x82\x76\x92\x03\x11\x6a\x63\x69\x2b\x7a\x02\x87\x71\x06\xd3\x3f\xae\xa5\x8c\x71\xe7\xda\x67\x3e\x5c\x08\x3a\xce\x2c\xf7\x2f\x04\x2d\xdf\x0a\xad\x16\x01\x4c\x6d\x15\xdd\xf1\x04\xcf\x0b\x76\x62\x91\x29\x94\xf3\x54\x31\xde\xfa\xc1\xc4\x74\xe8\xf9\x86\x06\xe9\xe1\x1b\x10\x7f\xdb\xb8\x1d\x0e\x41\x60\x5e\xe1\x42\xa7\xb0\x1b\x13\x3a\x29\xd8\xe2\xb4\xbd\x61\x2d\x13\xbd\xbd\x00\x1f\xc7\x5e\x19\xab\xf7\xa2\xe7\x36\x75\x8f\xd0\x0a\xa0\x0c\x1f\x59\x3f\x1d\xb0\xb0\xa9\x45\x19\x09\xa6\x15\x19\xea\xb4\x82\xa7\xb4\x2c\x08\xc4\x4f\x95\x96\x71\x4c\xc1\x26\x2c\x77\x3a\x58\x56\xf4\x0d\x56\xf8\xa1\xdd\x5a\x1d\x0c\x01\xc2\x65\x97\x3b\x8b\x1a\xc6\x53\x0e\x87\xfc\xef\x38\x5e\x63\xec\x3a\x1f\x3a\xd9\x99\x58\xf3\x88\x85\x31\x7f\xc7\x10\xc6\xf8\x16\xf9\x5c\x3a\x10\x00\xe7\xf7\x9a\x69\x99\xfb\xbb\xfe\x9a\xc0\x8d\xd5\xbb\xd6\x68\xeb\x13\x78\x93\x30\xaf\x27\xa4\x60\x51\xdb\xb6\x93\x9a\x3d\x3b\xc4\x7e\x91\x9b\x26\xfd\xad\x6f\xc8\x13\xc6\xc7\x48\x26\xd4\xcb\x6c\xc4\x33\x43\x2e\x10\xde\x5d\x62\xbc\x7b\x1f\xe5\xdb\x6a\x52\x63\x66\x6a\xc2\x42\xcf\x7f\xd4\xf2\xb5\xf1\x3e\x28\x66\x21\x8b\x91\xf1\x63\x92\xde\xde\x5e\xe0\x3d\x82\xef\x70\xf1\xff\x5d\x99\x33\xff\xd2\xe5\x3f\x33\xed\xf4\x79\xd3\xbd\xbc\x1f\xdc\xac\x60\x92\xb6\xda\x1c\x59\xdf\xfa\xb2\x4c\x3e\x9c\x5f\xa3\x06\xbb\x6a\x22\xc1\x53\xf2\x23\xef\x2c\x57\x31\xc4\xa2\x29\xd2\x60\xfb\xcd\xe7\x63\x01\x56\x5c\xc1\xcf\xc7\x87\xc7\x7b\xdc\xca\xcf\x1c\xa4\x70\x9e\x2b\x34\x15\xa2\x58\x0e\x98\x56\x1b\xb1\x0d\x36\xee\x2a\xcc\xcd\x61\x5c\x50\x59\x7c\xd9\x15\x4d\xa1\x7e\x1a\x31\x34\xb3\x66\x71\x1f\x4e\x9b\xf5\xfc\x4d\x95\xd0\x54\x5e\x0a\x93\x23\x57\xf0\xc0\x8d\xd4\x03\x50\x54\xc8\x83\xde\x94\x99\x17\x6e\x4d\xf8\xdc\x32\xdc\xf2\xb5\x61\xc7\x25\xb8\x13\xc9\xa0\x6a\xe5\x97\x70\x05\xcf\x9c\x8c\x4f\xb1\x3a\x67\x61\x23\x26\x4e\x3f\x37\x0b\xc2\x09\xce\x2f\x37\x3e\xac\xda\x54\x3c\xf9\x15\xc7\xa3\x85\x27\x03\x3d\xdd\x4e\xaf\xe1\xc7\xd9\x4e\x3e\xc9\xa6\x83\x37\xc1\x03\x09\x56\x66\x25\xf6\x54\x86\x94\xfc\xdb\x7b\x73\xbf\x5e\x67\xa2\x78\x97\xe2\xe9\xbd\x72\xb9\xbf\x75\xfc\x51\xf8\x1b\x00\x00\xff\xff\x9d\x62\x7b\x60\xd3\x07\x00\x00"

func dataAwsSimpleDeployMainTfTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleDeployMainTfTpl,
		"data/aws-simple/deploy/main.tf.tpl",
	)
}

func dataAwsSimpleDeployMainTfTpl() (*asset, error) {
	bytes, err := dataAwsSimpleDeployMainTfTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/deploy/main.tf.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x55\x61\x6f\xdb\x46\x0f\xfe\xae\x5f\xc1\x2a\xed\x8b\x16\x88\x24\xbc\x45\xd1\x0f\x59\x13\x2c\x4b\xb2\x25\xc0\x96\x14\x75\xba\x2f\xc3\xe0\x9e\x75\x94\x74\xcb\xf9\x78\xbb\x3b\x29\x76\x13\xff\xf7\xf1\x4e\xb2\x9b\xa4\x2b\x36\x60\x40\x62\xc8\x14\xf9\xf0\x21\xf9\x90\xde\x83\x9f\xd0\xa0\x13\x01\x25\x2c\xd6\x70\x15\x02\xed\x83\x24\x30\x14\x00\xa5\x0a\xcf\xb2\xbd\x6c\x0f\xae\x3b\xe5\x81\xff\x42\x87\xf0\xab\x68\x9d\x30\xa1\x51\x1a\xa1\x7d\x1a\x0b\x0d\xb9\xe4\x25\x71\x40\x4d\x76\x89\x26\x00\x35\x0c\x11\x22\x84\xb0\x56\xab\x5a\x04\x45\xa6\xf2\xe8\x06\x55\x63\x09\x17\x01\x7c\x47\xbd\x96\x29\xe9\x02\xa1\x13\x46\x16\x31\x39\xca\x12\xae\x09\x96\x24\x55\xb3\x8e\xb0\x8c\xf3\x20\xfd\x3e\xf4\x1e\x53\xb6\x63\x6b\xa3\xa1\xcc\xb2\xe9\x75\x59\x93\x69\x54\xdb\x3b\x7c\x99\xbf\xce\x5f\xc5\x8a\xee\x47\xd3\x7d\x06\x30\x3e\x95\xc3\xb2\x5c\xd0\x0a\x0e\x21\xef\x84\xef\x54\x4d\xce\x56\xd6\x61\xad\x3c\xbe\x7d\x93\x67\xec\xb8\x07\xe7\xe4\xb9\x00\xa3\xd7\x60\x30\xdc\x92\xbb\x79\x14\x3e\xd9\x20\xb7\x4e\x0d\xdc\x87\xf9\x64\xc8\xf7\x41\xd9\x03\xc8\xef\xee\x62\x23\xe6\xca\xce\x85\x94\x0e\xbd\x87\xcd\x66\x02\x9e\x61\xe8\x2d\x08\xf0\x6b\x53\x73\xff\x1a\xd2\x12\x1d\x34\x8e\x96\x40\xbd\x83\x88\xa2\x4c\x0b\x52\x31\xa1\x40\x8e\xcb\x27\xa8\x86\xb1\xba\x47\x1c\x46\x80\xf9\x04\x10\x53\x5a\x11\xba\x72\x0b\xc0\x09\xf7\x21\xdf\x46\xe6\xfb\x1c\x0b\x40\xb7\x3c\x37\xe6\xb7\xb3\x42\xeb\xa8\xb7\x0f\x2c\x23\xc9\x33\x23\x16\x3c\xe6\xd9\xec\x1c\x44\x1b\x47\xc9\xe3\xbd\x15\x4e\x46\x60\x4f\x3c\xfe\x10\xe2\xe3\x54\x3d\xd7\x6a\xd1\x48\x34\xb5\x42\x9f\x2a\xf0\x5f\x98\x7a\xdf\x95\x53\xf4\x7c\xc4\x3a\x84\xe0\x7a\x1c\x13\xfd\x4c\x42\x82\xd0\x3a\xd5\xde\x38\xd1\x46\xe1\x78\xe8\xd0\x61\x92\x94\x30\xeb\x47\xe8\x25\x47\xdd\xbd\x48\xaf\xb6\xde\xa0\x4c\x6a\xf6\x97\xe8\x17\x9b\xe8\x75\xb7\xf3\xb8\x77\xc8\x59\x36\x9b\x31\x96\xb1\x62\x38\x3b\x25\x06\x17\xc6\x87\x48\x60\xd1\x2b\x56\x22\x9a\x41\x39\x32\x31\xea\x51\xb3\xad\xa3\x41\x79\x96\x2f\xe4\xbe\x43\xad\xe3\xa0\x8d\x56\x06\x0f\xe0\xb9\xaf\x9d\xb2\x61\xce\x1a\xcf\x18\x3b\xcb\x1e\x18\xb8\xd6\x77\xef\x66\x27\x1f\x2e\xde\x5f\x67\x1e\x03\x14\x5c\xf6\x1e\x10\x2f\x4c\x81\x2b\xac\x0f\x20\x7e\xf6\xdc\xc1\x9a\x96\x4b\x56\x3f\xdc\xaa\xd0\x71\x2f\x82\xed\x03\x68\x6a\xdb\xb8\x61\xfc\x18\x17\x44\x2a\x6f\xb5\x58\xa3\xcc\x08\x5f\xbe\x82\x3b\x78\xfe\x3d\xbc\x3e\xfa\xdf\xff\xe1\x7e\xf4\x74\x50\x84\x04\x0d\x47\x50\x71\x43\x2a\xd3\x6b\xfd\x1d\x6c\x76\x19\xd9\xeb\x60\x8b\x2d\x78\x76\xd8\xa8\x15\xe3\x2f\x59\x9e\x3c\x98\x8c\x74\x42\xc5\xba\x23\xc8\x7f\x8b\x11\xbf\x73\x8a\x7c\x42\xf8\x45\xdc\x20\xa8\x10\xa7\x1f\x3a\x11\xe0\xd3\x24\x18\xe0\xf9\x7e\x82\x96\x78\xf0\xa3\x64\x75\x52\x6c\x5c\x4e\xde\xab\x68\x88\xf6\x6c\x44\xad\xe5\x4e\xca\x39\x1c\x31\xcd\x8e\x96\xb8\xb5\x54\xe5\x82\xb7\xd1\xd5\x31\xdb\xc9\xb4\xc5\x51\x64\x51\x84\x69\xde\xc2\x07\x2e\x92\xab\x50\x26\x53\x0d\x3c\x63\xed\xa2\x85\xfc\xa3\xc7\xd3\xcb\x19\xb7\x28\x87\x0a\x43\x5d\x31\xa1\xf8\x2f\xe7\xe3\xf4\xe0\xe8\x41\x33\x98\x96\xe1\xb9\x8e\x6c\x1e\x04\xde\x83\xef\xf9\x54\x04\x44\x28\xc4\x3f\xc1\x30\x00\xe1\x18\x30\xdd\xb2\xd8\x04\xe0\x35\x0f\xc2\x85\xac\x51\x19\xf7\x12\xf2\x53\x5e\x36\xcd\xf2\x8e\x35\x5c\x92\x44\x98\x8e\x82\xe1\xe7\xf9\x80\x2e\xa9\x69\xb3\x29\xcb\x32\xe7\x89\xc2\x6d\x1b\xf5\xf1\x27\x14\x57\x4f\xda\x12\xfd\x4b\x46\x2e\xdb\xcf\xd0\x85\x60\xfd\x41\x95\x6c\x7f\xf8\x92\x5c\x5b\xb1\x2c\x42\x35\xfc\x3d\x76\xf2\x2b\xbe\xf1\xb2\x60\xf9\xf6\xab\x62\xf5\xf6\xcd\x84\x3e\xd2\xfe\x68\xf8\x9b\xdb\x92\xde\xb2\x1b\xdb\x23\x58\x63\x27\x50\x91\x65\xa6\xab\xcf\xcd\xb7\x89\x8e\x50\xb3\xe9\x4c\xf0\xbd\x7b\x7f\x7c\x7d\xfe\x08\x4b\x1b\x28\x7c\x82\xfa\x97\x24\xab\x85\x32\xc9\x15\xaa\xde\xbb\x4a\x53\x2d\xf4\xce\xf6\x5f\x61\xed\xf2\x2b\x54\xbb\x1c\x8b\x98\xee\x43\xac\x23\x9d\x88\x82\xd7\x85\xaf\x83\x12\x3a\xa9\xd2\xf0\x8f\xda\x80\x7c\x7a\xeb\x1b\x5e\x22\x9f\x6a\xc4\x95\x25\x17\xe0\xf4\xec\x87\x8b\xe3\xcb\xf9\x8f\x1f\xae\x2e\xaf\xcf\x2e\x4f\x0f\x0d\x19\x65\x58\xc2\xa2\x8e\x21\x3b\xca\xc2\x86\x22\xce\xbe\xb7\x32\xde\xd2\x62\xfd\xd5\x1b\x35\x9d\xa8\x62\xfd\x94\x42\x36\xdd\x96\xbf\x02\x00\x00\xff\xff\xac\x28\x17\xad\xce\x07\x00\x00"

func dataCommonDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevVagrantfileTpl,
		"data/common/dev/Vagrantfile.tpl",
	)
}

func dataCommonDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/aws-simple/build/build-node.sh": dataAwsSimpleBuildBuildNodeSh,
	"data/aws-simple/build/template.json.tpl": dataAwsSimpleBuildTemplateJsonTpl,
	"data/aws-simple/deploy/main.tf.tpl": dataAwsSimpleDeployMainTfTpl,
	"data/common/dev/Vagrantfile.tpl": dataCommonDevVagrantfileTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"aws-simple": &bintree{nil, map[string]*bintree{
			"build": &bintree{nil, map[string]*bintree{
				"build-node.sh": &bintree{dataAwsSimpleBuildBuildNodeSh, map[string]*bintree{
				}},
				"template.json.tpl": &bintree{dataAwsSimpleBuildTemplateJsonTpl, map[string]*bintree{
				}},
			}},
			"deploy": &bintree{nil, map[string]*bintree{
				"main.tf.tpl": &bintree{dataAwsSimpleDeployMainTfTpl, map[string]*bintree{
				}},
			}},
		}},
		"common": &bintree{nil, map[string]*bintree{
			"dev": &bintree{nil, map[string]*bintree{
				"Vagrantfile.tpl": &bintree{dataCommonDevVagrantfileTpl, map[string]*bintree{
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

