// Code generated by go-bindata.
// sources:
// data/aws-simple/build/build-php.sh
// data/aws-simple/build/template.json.tpl
// data/aws-simple/deploy/main.tf.tpl
// data/common/dev/Vagrantfile.tpl
// DO NOT EDIT!

package phpapp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAwsSimpleBuildBuildPhpSh = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x6d\x6f\xdb\x36\x10\xfe\xae\x5f\x71\x55\x83\x65\x1b\x4a\xd3\x0d\x90\x61\x70\x5e\x30\xd7\x71\x97\x00\x85\x1d\xd8\x5b\xf7\x21\x0b\x0a\x5a\x3a\xc9\x6c\x24\x92\x23\x29\x3b\x4e\xea\xff\xbe\x23\xe5\xd8\x71\x8a\x05\xfb\x64\x8a\xbc\x97\xe7\x9e\x7b\xee\xfc\xf6\x0d\x9f\x49\xc5\x67\xc2\xcd\x93\xc4\xa1\x07\xa6\x41\xe9\x46\x6d\x8e\x68\x2d\xde\xcb\x78\x34\xd2\x60\x21\x64\xb5\xb9\xf6\x56\x64\x98\x24\x74\xd2\xf6\xc7\x9f\xe0\x31\x01\x80\x4a\x67\xa2\x02\xa7\x1b\x9b\x61\x21\x2b\x3c\x3b\x78\xbf\xbb\xae\xa4\x42\xa5\xcf\x0e\x8e\xc2\x15\x66\x73\x0d\xe9\x70\x32\x19\x4f\x40\x78\x38\x78\xdc\x39\xad\x7b\x07\x8f\xad\xed\xfa\x04\x3e\x09\xe7\xc9\xbf\x74\xbd\x34\xb8\x95\x16\x0d\x68\xef\x35\xf0\x85\xb0\x9c\x1e\xb8\x5b\x39\xfa\x81\x6f\xe0\x23\x36\x05\x47\xdd\x64\x9d\x10\x3a\x03\x87\x11\x1c\xa4\x07\x8f\x1f\xfa\xd3\xcb\x2f\xd3\xf1\x9f\x93\xc1\x70\x9d\x86\x8b\x4f\x57\xa3\xe1\x68\xbc\x4e\x0f\x81\x30\x24\x89\xc6\x50\x02\x3d\xfc\x96\xc2\xd1\xf9\x0f\xef\x29\x1c\x05\x2d\xd1\x02\xf3\x6d\xbe\x73\xe0\x39\x2e\xb8\x6a\xaa\xea\x04\xd6\x89\xae\xa2\x43\x5b\xc6\x4d\xb0\xb8\x05\x72\x0e\x4f\xc9\x5b\xc8\x2a\xdd\xe4\x2c\xd3\xaa\x90\x25\x64\x42\x81\x54\x1e\x6d\x81\x16\x61\x29\xfd\x1c\x84\xf1\x90\xe9\xba\x16\x2a\x77\x20\x0b\x90\xfe\xd0\x81\xf3\xb2\xaa\xc8\x12\x8c\xd5\x54\xa7\x73\x94\x04\xd2\xbf\x84\xf4\x52\x95\x50\x50\x21\x7b\x61\x09\x13\x85\x30\x15\x7a\xec\x74\x3a\x69\xd2\x28\xf2\x87\x9b\x1b\x60\xc5\x86\x1c\x39\xe3\xd1\x83\x4b\xe5\xbc\x50\x19\xf2\x99\xd6\x9e\x15\x52\x49\x37\xc7\x1c\x6e\x6f\x4f\x20\xd7\x44\xab\xab\x90\x68\xed\x76\x8e\x93\x5c\x2b\xea\x69\xc8\xdb\xcf\xf3\x90\x36\x20\x25\x2c\x46\x3b\xe9\xb5\x95\xe8\x80\x30\x43\x63\x72\x11\x50\xc5\xc4\x78\x6f\xb4\xf5\x70\x31\xfc\x70\xd5\x1f\x7d\xf9\x38\x19\x8f\xfe\x18\x8e\x2e\xce\x94\x56\xb1\x6a\x91\x79\xb9\x40\x62\x18\x5c\x93\xeb\x10\x90\x95\xa4\xad\x18\x02\x81\xad\xbe\x7b\x89\x68\x89\x09\xb6\x22\x25\x15\x7e\x29\x2c\x32\xa2\xc4\xa0\xf5\x94\x9f\x05\xde\xb4\xda\x79\xe5\x39\x0b\x9e\x24\x8c\x16\xe3\x2a\x38\x1a\x23\x7a\xd9\xdc\x4a\xc7\x2a\x14\x5c\xe9\x1c\x3b\x5f\xdd\xff\xf0\xd1\x2a\xb7\xf8\x95\x9b\xb9\x39\x66\xc7\x9d\x5f\xa8\x95\x53\xc4\xda\x05\xb2\x67\x48\x44\xfc\xd3\x48\x4b\xcc\xd1\xa7\xb1\xb8\x40\xe5\x21\x6d\x94\x68\xfc\x9c\x8e\x32\xa3\x82\x72\x30\x22\xbb\x13\x25\xba\x94\x9c\xa3\xfe\x1c\xe8\x86\x44\x54\xbc\x2c\xb0\xb3\x57\xf9\x1d\xae\x36\x9c\xbc\x42\x55\xec\xcc\x55\xeb\x1e\xba\x73\x7d\x79\x0d\x9f\x07\x53\xf7\x0e\xfa\x94\x76\x8e\xef\x62\x77\x34\xc1\xb1\x5b\x1c\xb1\x47\xaf\x70\x2c\xa2\xe7\x11\x84\x9a\x69\x46\x67\x9b\x6f\x56\xeb\x9c\xc5\xbb\x48\x46\x9d\xd9\x15\x49\xe1\x6f\x52\xcb\xec\xc1\x42\x49\x2b\xa1\x46\x9b\x35\x56\xd2\x64\xcf\x1a\x59\xe5\x8c\x14\x1b\x58\xa0\xef\x60\x45\x4f\xd5\x77\x78\x07\x24\x58\xed\xd0\x46\x4c\x59\x0e\xdc\xd7\x26\x09\x96\xc0\xdc\x14\xe6\xde\x1b\xd7\xe3\x9c\x00\x66\x4f\x86\xda\x96\x7c\x03\x96\x6a\xfa\x16\xc0\x6c\x8b\xa9\x17\xb0\xb5\x33\x73\x61\x81\x37\x2e\xec\x04\x5a\x36\x71\xa7\x3d\x3d\xb6\x30\x86\xf7\x3e\x6a\x31\x8a\xda\x44\x04\x6d\x94\xbb\x5c\xd2\x98\x1b\xe0\xce\x2e\x78\x98\x64\xd2\x86\x69\xdf\x3c\x05\x7d\xb8\x2f\x22\xce\xed\x53\xc7\x97\x0f\xc0\x06\x2f\xec\x63\x8e\x29\xfa\x98\x80\xb4\x5a\x4b\xe7\xa4\x56\xfb\xf4\xd3\xb6\x58\x2a\x60\x13\x58\x2e\x97\x8c\x9a\x2a\x7a\x2f\xa3\xd0\x32\x68\x27\xf8\xf9\xf5\xb6\x12\x12\xb1\x56\x40\x63\x1b\x04\x47\x24\x87\x9c\x93\x46\xa9\x90\xf3\xc9\x66\x2b\xaf\x90\x98\x4c\x36\xa9\x59\xb3\x4d\xfa\x5f\x3c\xed\x54\xc1\x96\xda\xde\x51\x50\x16\xa8\xd9\x83\x42\x6f\x4a\x33\xda\x84\xed\x61\x3b\xe1\x34\x91\x85\x4c\x5a\x16\x06\x71\x41\x91\x34\x22\xd5\x41\x4d\x7b\x24\xd8\x1a\x38\x75\x98\x6f\x84\xc6\x69\x02\x69\xac\x51\x89\x59\x85\x39\xef\x76\xbb\x14\xbe\x10\x4d\xe5\x3b\x61\xd3\x25\x09\x8d\x15\x9c\x9e\xf6\xaf\xfb\x83\xcb\xe1\x60\x3c\xfa\x48\x2a\x68\x9b\x83\xf8\x5a\xa0\x6d\xbb\x42\x94\xe7\xeb\x9b\xe6\xf2\x77\x54\x04\x3b\x4c\xeb\x6c\x05\x63\x32\x4c\x4e\x3f\x4b\xeb\x1b\x51\x5d\x6a\xfa\xbf\xf9\xb9\xf7\x6b\xf7\x9c\xb8\xbb\xd0\x59\x53\x93\xa6\x27\xb4\x36\x5f\x36\x0a\xe0\xf4\x82\x76\x41\x16\xb7\xc7\x7e\xb7\x82\x2b\xc0\xa4\x5d\x16\x10\x08\x2d\xad\x20\xa2\xf2\xe0\xc4\xb7\x5e\xe7\xc9\x29\x7f\x96\xf5\x3c\xd9\x95\xb8\x21\x92\x68\x0b\x0b\xf9\x4d\x9a\xfc\x1b\x00\x00\xff\xff\x51\xaf\x55\x5e\xa6\x07\x00\x00"

func dataAwsSimpleBuildBuildPhpShBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleBuildBuildPhpSh,
		"data/aws-simple/build/build-php.sh",
	)
}

func dataAwsSimpleBuildBuildPhpSh() (*asset, error) {
	bytes, err := dataAwsSimpleBuildBuildPhpShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/build/build-php.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsSimpleBuildTemplateJsonTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\x5b\x6e\x83\x30\x10\xfc\xe7\x14\x96\xa5\xfc\x01\x49\x5b\xa9\xa9\x7a\x95\x2a\x22\x86\x6c\xc1\x8a\x6d\x2c\xaf\x9d\x2a\x41\xbe\x7b\xcd\x1b\xaa\x26\xe1\xc7\x68\x67\x3c\x3b\x9e\xdd\x26\x22\xe1\xa3\x92\xab\x4c\xb3\xe2\x0c\x26\xbb\x80\x41\x5e\x2b\xfa\x49\xe8\x2e\xfd\x48\x77\x34\x8e\x7a\xce\x85\x19\xce\x72\x01\x18\xa0\xfe\x5a\x28\xb2\x1f\xcc\x58\x51\x00\x62\x76\x86\x6b\x40\x94\x13\x22\x5e\xa2\x08\x85\x01\x7b\x0f\x35\x50\xf6\xcd\x56\x08\x0a\x57\x06\x3f\xb6\x1a\x80\xae\xee\x47\x23\xda\xd4\x17\xde\x7a\x0c\x4e\x03\xe1\x6b\xb8\x35\x7a\x0a\x0c\x7b\xd5\xd0\x3e\xe0\x9b\x0b\xa0\xf1\x5c\xc7\xda\x99\xa2\x43\x9a\x0d\x09\x0f\xcd\x99\xe5\x92\x6c\x7c\xd3\x10\x87\x60\xc8\x71\x6a\x7c\x24\xde\x07\x0e\xa8\xd3\x82\xb6\x94\x3a\x01\x5a\xae\x02\xd0\x47\xb5\xb5\x52\x6f\x6b\x6b\xeb\x84\x69\x9d\xda\xf2\x46\x07\xaa\x8f\xef\xdb\xc3\x0a\x84\x58\xf9\x2b\x0c\xd7\xb6\x85\x72\xc7\xc5\x29\xd1\x95\x4e\xb1\x9a\xa4\xba\xf3\x30\xc6\xd0\x51\x86\x08\xa6\x79\x28\x26\x3b\xe9\xd6\xca\xa4\x3c\x35\x64\x92\xdd\x6a\x95\x40\x8e\x33\xb6\x9a\xde\xbd\x5c\xd6\x63\x7e\x1c\x0e\x5d\x4d\xfc\x91\xe2\x4c\x7c\xa2\x38\x6d\xc9\x23\xb5\x9e\xf4\xcc\x5b\xb7\x01\x19\x93\xbc\xcf\x83\x27\xfb\xf7\xfc\x95\xed\x5f\xe6\x3d\xa1\x5c\xa1\x65\x2a\xb0\xc6\xd8\x8a\xb7\x54\x30\x53\x2e\x28\x88\x55\xd6\x76\x1e\xe3\x76\xb9\x53\xd6\x2d\x42\x95\x3c\x1b\xb1\xa6\x69\xff\xbc\x27\x7f\xbd\x87\x33\x2c\x11\x93\xfa\x3f\xc7\xfd\xca\x1f\xa2\xc8\x47\xbf\x01\x00\x00\xff\xff\x1b\x49\xbc\xf4\xa4\x03\x00\x00"

func dataAwsSimpleBuildTemplateJsonTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleBuildTemplateJsonTpl,
		"data/aws-simple/build/template.json.tpl",
	)
}

func dataAwsSimpleBuildTemplateJsonTpl() (*asset, error) {
	bytes, err := dataAwsSimpleBuildTemplateJsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/build/template.json.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsSimpleDeployMainTfTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x52\xc1\x8e\xdb\x20\x10\xbd\xe7\x2b\x46\x74\x8f\x5d\x27\xed\xb1\x52\xcf\xbd\xb5\x1f\x50\xad\x10\xc6\x24\x45\x8b\x01\xc1\x90\xca\xb2\xfc\xef\x1d\xa0\x16\xc1\xbb\xbd\x36\x39\xf9\xcd\x63\xde\xcc\x9b\xf7\x01\xbe\x29\xab\x82\x40\x35\xc1\xb8\xc0\x0f\x44\xf7\x11\x26\x07\xd6\x21\xa8\x49\x23\xcc\xc2\x26\x61\xcc\x72\x3a\xdd\x45\xd0\x62\x34\x0a\x98\xb6\xd7\x20\xb8\x9e\x18\xac\xdb\x03\x2c\x7e\x47\x2e\xa4\x54\x31\xf2\x57\xb5\xbc\x53\x8c\x4a\x06\x85\xff\x28\x06\x75\xd3\xce\x1e\x0a\x44\xe5\x56\xcc\xaa\xc0\x8f\x0f\x66\x7d\x60\x6a\x1b\x51\x58\xa9\x38\x2e\x3e\xd3\x61\x52\x57\x91\x0c\xc2\x57\x60\xf8\x79\x98\xb5\x0c\x8e\xc1\xe3\x8b\x98\x46\x4b\xd3\xf8\x34\x1a\x2d\x0f\xdd\xee\x5e\x72\xa9\xa7\xf0\x0e\xfc\x77\xed\x93\x0f\xee\xae\x27\x15\xca\xf4\x04\x9d\x00\xda\xf2\x59\xf5\x69\xa5\x87\x43\x6f\xca\xc6\x88\xd6\x6c\xe8\x69\x0d\x2f\xb4\x6a\x08\xe4\x5f\x47\xab\x38\x51\x68\x88\xa0\xa2\x4b\x41\x36\x7f\x53\xd0\xb8\xf0\x5b\x70\xc9\x33\x02\xbd\xaf\x93\x65\x0f\x6b\x9f\x75\xad\x1f\xdb\xf6\x5c\x5b\xee\xc7\x2c\x9a\x75\xc1\xa6\x57\xbf\xa9\x44\x35\x6d\x6f\x24\x17\x4b\x3f\x00\x5a\x1f\x9d\x74\xa6\x8e\xf7\xfc\xa9\x80\xd7\xe0\x66\xee\x5d\xc0\x02\x5e\x0a\x86\x6e\x47\x1a\x96\xad\xe5\xa3\x71\xf2\x35\x12\xf6\x93\x5d\x86\xf2\x3f\x5f\xd8\x0b\xd5\xb7\xac\xa6\xfe\x9b\xd8\x1b\x1b\xf7\x28\x3d\x1a\x48\x81\x83\xf6\x6b\xf7\x98\x75\xf1\xad\x4b\x5f\x2b\x77\x70\xbd\x7d\x0d\x1d\x79\xdc\xf5\xe9\xb2\x58\x88\x7b\xf2\x0f\x82\x3b\x5c\x4f\x92\xcf\xd3\x1f\x9d\x3a\xd7\x2d\x9f\xd6\xb7\x89\x18\x68\x9d\x21\x9f\xf3\x25\x3f\x46\x71\x23\x7f\xe1\x7b\x16\xe9\x82\xc1\xaa\x29\x2e\xa1\x4f\x08\x2c\x05\x53\x3d\xb8\x0b\x93\x0a\xf5\x17\xa2\xff\x72\x3e\x57\x89\x7d\xc7\xd2\xbc\x2e\xc0\x27\x1b\xb7\x73\x0e\xe8\x9f\x00\x00\x00\xff\xff\x5f\x73\x79\x4b\x5f\x04\x00\x00"

func dataAwsSimpleDeployMainTfTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleDeployMainTfTpl,
		"data/aws-simple/deploy/main.tf.tpl",
	)
}

func dataAwsSimpleDeployMainTfTpl() (*asset, error) {
	bytes, err := dataAwsSimpleDeployMainTfTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/deploy/main.tf.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\xdd\x6e\xdc\x46\x0f\xbd\xd7\x53\x30\xda\xc4\xb0\x01\x4b\xc2\x17\x7c\xc9\x85\x1b\x1b\x4d\x6d\xa7\x36\xd0\x3a\x46\xd6\xed\x4d\x51\x6c\x66\x35\x94\x34\x8d\x34\x1c\xcc\x8c\xd6\x5e\x78\xf7\xdd\x4b\x4a\x5a\xff\x34\x41\x5b\x14\x48\x8c\x59\x8a\x3c\x24\x0f\x0f\x39\x83\x1f\xd1\xa2\x57\x11\x35\x2c\xd7\xf0\x31\x46\x3a\x04\x4d\x60\x29\x02\x6a\x13\x5f\x24\xb3\x64\x06\x37\x8d\x09\xc0\xff\x62\x83\xf0\xab\xaa\xbd\xb2\xb1\x32\x2d\x42\xfd\xd7\x58\xa8\xc8\x0f\x5e\x1a\x57\xd8\x92\xeb\xd0\x46\xa0\x8a\x21\xa2\x40\x28\xe7\x5a\x53\xaa\x68\xc8\x16\x01\xfd\xca\x94\x98\xc3\x65\x84\xd0\x50\xdf\xea\x21\xe9\x12\xa1\x51\x56\x67\x92\x1c\x75\x0e\x37\x04\x1d\x69\x53\xad\x05\x96\x71\x9e\xa4\x3f\x84\x3e\xe0\x90\xed\xbd\x73\x62\xc8\x93\x64\xfa\x9c\x97\x64\x2b\x53\xf7\x1e\xf7\xd3\xd7\xe9\x81\x74\xb4\x19\x4d\x9b\x04\x60\x7c\xe5\xab\x2e\x5f\xd2\x1d\x1c\x43\xda\xa8\xd0\x98\x92\xbc\x2b\x9c\xc7\xd2\x04\x7c\xfb\xff\x34\x61\xc7\x19\x5c\x50\xe0\x06\x6c\xbb\x06\x8b\xf1\x96\xfc\x97\x67\xe1\x93\x0d\x52\xe7\xcd\x8a\x79\x58\x4c\x86\xf4\x10\x8c\x3b\x82\xf4\xfe\x5e\x88\x58\x18\xb7\x50\x5a\x7b\x0c\x01\xb6\xdb\x09\x78\x8e\xb1\x77\xa0\x20\xac\x6d\xc9\xfc\x55\xd4\x6a\xf4\x50\x79\xea\x80\x7a\x0f\x82\x62\x6c\x0d\xda\x70\x41\x91\x3c\xb7\x4f\x50\xac\xc6\xee\x9e\xd5\x30\x02\x2c\x26\x00\x49\xe9\x54\x6c\xf2\x1d\x00\x27\x3c\x84\x74\x17\x99\x1e\x72\x2c\x00\xdd\xf2\xdc\xb8\xbe\x07\x2b\xd4\x9e\x7a\xf7\xc4\x32\x16\x79\x6e\xd5\x92\xc7\x3c\x9f\x5f\x80\xaa\x65\x94\x3c\xde\x5b\xe5\xb5\x00\x07\xe2\xf1\xc7\x28\xcf\xa9\x7b\xee\xd5\xa1\xd5\x68\x4b\x83\x61\xe8\x20\x3c\x56\x1a\x42\x93\x4f\xd1\x8b\x11\xeb\x18\xa2\xef\x71\x4c\xf4\x81\x7a\xab\x07\x5d\xc0\x6e\x72\xe3\xaf\x7d\x53\x81\xb2\xeb\x03\xf6\xba\x7f\x35\xa8\x8b\x19\x01\x63\xf9\xb9\x8b\x58\xb0\x25\xe4\xcc\x33\xbc\xda\xb2\x9b\x7c\xe7\x91\x16\xc4\x72\x2c\x1e\xbd\x32\x26\x86\xc3\x5b\x22\x97\x9f\xb2\x35\x32\x59\x32\x8c\xbf\xa7\x52\xc0\x06\x06\xf9\xf1\xcc\xd5\x79\x5a\x99\x20\x15\xa6\xa1\xc1\xb6\x95\x89\xdb\xd6\x58\x64\x0e\x4b\x0d\xb3\x7b\x0e\xd8\xc2\xde\x1e\x2c\x59\x5a\xd3\xcf\xa2\x53\xc6\xe6\xa1\x49\xc7\x66\x98\x2a\xe9\x87\x8b\x1e\x28\xf8\x89\x94\x06\xd5\xb6\xc3\xf8\x2b\xaf\x6a\xd9\x9d\x00\x0d\x7a\x1c\xfa\x66\x16\x9e\x11\x9c\x3f\x52\xb2\xf3\x16\x5e\x44\x6f\x8f\xd1\x03\x23\xd2\xf9\x64\xd9\x78\xe4\x2c\xdb\xed\x37\x2b\xb8\xb4\x21\x4a\x01\xcb\xde\xf0\x32\xa2\x5d\x19\x4f\x56\xa2\xfe\x6d\xe7\x2f\x43\xe9\x8d\x8b\x0b\x5e\xf3\x84\xb1\x93\xe4\x89\x81\x67\xf2\xee\xdd\xfc\xf4\xd3\xe5\xf5\x4d\x12\x30\x42\xc6\x93\x9f\x81\x0c\x29\xc3\x3b\x2c\x8f\x40\xfe\xf6\x2c\xa2\x92\xba\x8e\x0f\x00\xdc\x9a\xd8\x30\x17\xd1\xf5\x11\x5a\xaa\x6b\x39\x32\xfc\x94\x1b\xa1\x4d\x70\xad\x5a\xa3\x4e\x08\xf7\x0f\xe0\x1e\x5e\x7e\x0f\xaf\x4f\xf6\xfe\x07\x9b\xd1\xd3\x43\x16\x07\x68\x38\x81\x82\x09\x29\x6c\xdf\xb6\xdf\xc1\xf6\x21\x23\x7b\x1d\xed\xb0\x15\xcb\x17\x2b\x73\xc7\xf8\x1d\x6f\x28\x6b\x33\xa1\x76\x40\xc5\xb2\x21\x48\x7f\x93\x88\xdf\x39\x45\x3a\x21\xfc\xac\xbe\x20\x98\x28\x0b\x10\x1b\x15\xe1\xf3\xb4\x33\xc0\x12\xff\x0c\x35\xb1\xf6\xc7\xad\x6d\x87\xa5\x95\xfb\xc4\xa7\x45\x0c\x83\x8a\x46\x54\xd6\xc8\xc3\x4e\xc2\x09\x97\xd9\x50\x87\x3b\x4b\x91\x8b\x6a\x7c\x29\xd9\x4e\xa7\x75\x90\x3d\x93\x3d\x1c\xe6\xad\x82\xc8\x97\xbb\x30\x36\xe1\x05\x79\xc1\xeb\x8b\x0e\xd2\x5f\x02\x9e\x5d\xcd\x99\xa2\x14\x0a\x8c\x65\xc1\x05\xc9\x7f\xbd\x18\xa7\x07\x27\x4f\xc8\xe0\xb2\x2c\xcf\x75\xac\xe6\x49\xe0\x06\x42\xcf\xd7\x32\x22\x42\xa6\xfe\x09\x86\x01\x08\xc7\x80\xe9\x9c\x0b\x09\xc0\x97\x2e\x2a\x1f\x93\xca\x24\xcc\x25\xa4\x93\xb0\xa4\x85\xeb\x8b\xeb\x3c\xcf\xd3\x04\xef\x1c\xf9\x08\x67\xe7\x3f\x5c\xbe\xbf\x5a\x7c\xf8\xf4\xf1\xea\xe6\xfc\xea\xec\xd8\x92\x35\xb2\x9a\xaa\x8c\x66\xc5\x83\x98\xc0\x95\x8b\x19\x1f\x1b\xe8\x9d\x96\x3b\x93\xad\xbf\xfa\x62\x26\xed\x66\x6b\x70\xeb\xd8\xf0\xbe\x07\xaa\x22\x5f\x1b\xcc\x58\xb0\x0e\x7d\x94\x9b\xf4\x0d\x5b\x26\x7a\x23\xfb\x08\xa8\x75\x26\xa0\x4c\x28\x05\x33\x5c\x5e\xc1\x74\xea\x88\x2c\x9f\xf0\x3f\x0a\xd7\xb8\x37\xd9\x9b\xfc\xed\x7f\x2b\xae\xec\x7d\x0b\x02\xf1\x15\x33\xa7\xd4\x71\x46\xf4\x03\x3d\x22\x8f\xd8\xb9\x64\x70\xcf\xc2\x1c\x9a\x18\x5d\x38\x2a\x0a\x86\x2b\x77\x8e\xe4\xeb\x62\x82\x66\x35\x6c\x04\xf6\x21\x75\xb7\x82\x07\x3f\xd7\x28\x0f\x45\x1f\x7c\xd1\x52\xa9\xda\x62\x69\x6c\xb1\xfb\x98\x4c\x2b\xf9\x67\x00\x00\x00\xff\xff\x90\x0e\xad\xa3\x08\x08\x00\x00"

func dataCommonDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevVagrantfileTpl,
		"data/common/dev/Vagrantfile.tpl",
	)
}

func dataCommonDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/aws-simple/build/build-php.sh": dataAwsSimpleBuildBuildPhpSh,
	"data/aws-simple/build/template.json.tpl": dataAwsSimpleBuildTemplateJsonTpl,
	"data/aws-simple/deploy/main.tf.tpl": dataAwsSimpleDeployMainTfTpl,
	"data/common/dev/Vagrantfile.tpl": dataCommonDevVagrantfileTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"aws-simple": &bintree{nil, map[string]*bintree{
			"build": &bintree{nil, map[string]*bintree{
				"build-php.sh": &bintree{dataAwsSimpleBuildBuildPhpSh, map[string]*bintree{
				}},
				"template.json.tpl": &bintree{dataAwsSimpleBuildTemplateJsonTpl, map[string]*bintree{
				}},
			}},
			"deploy": &bintree{nil, map[string]*bintree{
				"main.tf.tpl": &bintree{dataAwsSimpleDeployMainTfTpl, map[string]*bintree{
				}},
			}},
		}},
		"common": &bintree{nil, map[string]*bintree{
			"dev": &bintree{nil, map[string]*bintree{
				"Vagrantfile.tpl": &bintree{dataCommonDevVagrantfileTpl, map[string]*bintree{
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

