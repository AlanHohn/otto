// Code generated by go-bindata.
// sources:
// data/aws-simple/build/build-php.sh
// data/aws-simple/build/template.json.tpl
// data/aws-simple/deploy/main.tf.tpl
// data/common/dev/Vagrantfile.tpl
// DO NOT EDIT!

package phpapp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAwsSimpleBuildBuildPhpSh = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\xdb\x6e\x1b\x37\x10\x7d\xdf\xaf\x98\x28\x46\xd3\x16\xa1\xa8\x18\x48\x51\xc8\x17\x54\x91\x95\xda\x40\x20\x19\x52\x9b\x3e\xb8\x46\x40\x2d\x67\x57\x8c\x77\x49\x86\xe4\x4a\x96\x1d\xfd\x7b\x87\x5c\x59\xb6\x5c\xd4\xe8\x93\xb8\xe4\x5c\xce\x9c\x39\x33\x7a\xfd\x8a\xcf\x95\xe6\x73\xe1\x17\x59\xe6\x31\x00\x33\xa0\x4d\xa3\xb7\x47\x74\x0e\x6f\x55\x3a\x5a\x65\xb1\x10\xaa\xda\x5e\x07\x27\x72\xcc\x32\x3a\x19\xf7\xe3\x4f\x70\x9f\x01\x40\x65\x72\x51\x81\x37\x8d\xcb\xb1\x50\x15\x9e\x1c\xbc\x7b\xbc\xae\x94\x46\x6d\x4e\x0e\x0e\xe3\x15\xe6\x0b\x03\x9d\xd1\x74\x3a\x99\x82\x08\x70\x70\xff\xe8\xb4\xe9\x1f\xdc\xb7\xb6\x9b\x23\xf8\x24\x7c\x20\xff\xd2\xf7\x3b\xd1\xad\x74\x68\xc1\x84\x60\x80\x2f\x85\xe3\xf4\xc0\xfd\xda\xd3\x0f\x7c\x87\x90\xb0\x69\x38\xec\x65\x9b\x8c\xd0\x59\x78\x93\xc0\x41\xe7\xe0\xfe\xc3\x60\x76\xfe\x65\x36\xf9\x73\x3a\x1c\x6d\x3a\xf1\xe2\xd3\xc5\x78\x34\x9e\x6c\x3a\x6f\x80\x30\x64\x99\xc1\x58\x02\x3d\xfc\xd6\x81\xc3\xd3\x1f\xde\x51\x38\x0a\x5a\xa2\x03\x16\xda\x7c\xa7\xc0\x25\x2e\xb9\x6e\xaa\xea\x08\x36\x99\xa9\x92\x43\x5b\xc6\x55\xb4\xb8\x06\x72\x8e\x4f\xd9\x6b\xc8\x2b\xd3\x48\x96\x1b\x5d\xa8\x12\x72\xa1\x41\xe9\x80\xae\x40\x87\xb0\x52\x61\x01\xc2\x06\xc8\x4d\x5d\x0b\x2d\x3d\xa8\x02\x54\x78\xe3\xc1\x07\x55\x55\x64\x09\xd6\x19\xaa\xd3\x7b\x4a\x02\x9d\xbf\x84\x0a\x4a\x97\x50\x50\x21\x7b\x61\x09\x13\x85\xb0\x15\x06\xec\x76\xbb\x9d\xac\xd1\xe4\x0f\x57\x57\xc0\x8a\x2d\x39\x6a\xce\x93\x07\x57\xda\x07\xa1\x73\xe4\x73\x63\x02\x2b\x94\x56\x7e\x81\x12\xae\xaf\x8f\x40\x1a\xa2\xd5\x57\x48\xb4\xf6\xba\xef\x33\x69\x34\xf5\x34\xe6\x1d\x48\x19\xd3\x46\xa4\x84\xc5\x1a\xaf\x82\x71\x0a\x3d\x10\x66\x68\xac\x14\x11\x55\x4a\x8c\xb7\xd6\xb8\x00\x67\xa3\x0f\x17\x83\xf1\x97\x8f\xd3\xc9\xf8\x8f\xd1\xf8\xec\x44\x1b\x9d\xaa\x16\x79\x50\x4b\x24\x86\xc1\x37\xd2\xc4\x80\xac\x24\x6d\xa5\x10\x08\x6c\xfd\xaf\x97\x84\x96\x98\x60\x6b\x52\x52\x11\x56\xc2\x21\x23\x4a\x2c\xba\x40\xf9\x59\xe4\xcd\xe8\x47\x2f\x29\x59\xf4\x24\x61\xb4\x18\xd7\xd1\xd1\x5a\xd1\xcf\x17\x4e\x79\x56\xa1\xe0\xda\x48\xec\x7e\xf5\xff\xc3\xc7\x68\xe9\xf0\x2b\xb7\x0b\xfb\x9e\xbd\xef\xfe\x42\xad\x9c\x21\xd6\x3e\x92\x3d\x47\x22\xe2\x5b\xa3\x1c\x31\x47\x9f\xd6\xe1\x12\x75\x80\x4e\xa3\x45\x13\x16\x74\x54\x39\x15\x24\xc1\x8a\xfc\x46\x94\xe8\x3b\xe4\x9c\xf4\xe7\xc1\x34\x24\xa2\xe2\x79\x81\xdd\xbd\xca\x6f\x70\xbd\xe5\xe4\x05\xaa\x52\x67\x2e\x5a\xf7\xd8\x9d\xcb\xf3\x4b\xf8\x3c\x9c\xf9\xb7\x30\xa0\xb4\x0b\x7c\x9b\xba\x63\x08\x8e\xdb\xe1\x48\x3d\x7a\x81\x63\x91\x3c\x0f\x21\xd6\x4c\x33\x3a\xdf\x7e\xb3\xda\x48\x96\xee\xfe\x26\x85\xcc\xef\x1c\x94\xb4\x06\x6a\x74\x79\xe3\x14\x4d\xf3\xbc\x51\x95\x64\xa4\xd2\x58\x39\x7d\x47\x2b\x7a\x6a\x0f\x89\xbf\x3a\x77\x6b\x52\x4f\x7b\x5e\xfb\x6f\x55\x7b\x2c\x6c\xdd\x1e\x4a\xd9\xfe\x3a\x14\x32\xce\x7b\xfb\x65\x4b\xb2\x6c\x0b\x1d\xdd\x86\xa4\x9e\x24\x43\x9b\xea\x48\x45\xd4\x37\x52\xd1\x60\x5a\xe0\xde\x2d\x79\x9c\x3d\xea\xa6\x6d\xdf\x82\x70\x70\x77\x4b\x13\x10\x6a\xbb\x7b\xea\x86\xf2\x0e\xd8\xf0\x99\x7d\xca\x31\xc3\x90\x12\x90\xba\x6a\xe5\xbd\x32\x7a\x9f\x30\x9a\xef\x95\x06\x36\x85\xd5\x6a\xc5\xa8\x0d\xa2\xff\x3c\x0a\x8d\x6f\x3b\x73\x4f\xaf\x79\x1c\x4d\xe3\xd1\x91\xec\x8c\x06\x1a\xb4\x28\x11\x62\xe6\x59\x03\x87\x0f\x66\x31\x27\x11\x28\x13\xf0\x07\x2a\x99\x9f\xc1\x22\x04\xeb\xfb\x9c\x53\xd7\x76\x31\x8d\x2b\xf9\xb6\x83\xd4\xe8\xef\x91\xb8\x18\x7a\x0b\xb9\x5e\xc2\xce\xd2\x2e\x88\x0f\xde\xf8\xb8\x2a\x69\x07\xa7\x55\xff\xf0\x98\x6d\xe1\x4c\x1b\xad\x23\x96\x87\xfb\x9d\x3e\x5b\x4c\x0f\x61\x59\xb3\xe3\xe0\xbf\x22\x3e\xca\x8a\xad\x8c\xbb\xa1\xa0\x2c\x76\x6a\x8f\x19\x7a\xd3\x86\xd1\x2a\x6d\x0f\xbb\x15\x41\x23\x5d\xa8\xac\x6d\xca\x30\x6d\x38\xd2\x59\xea\x7c\x94\xe3\x5e\x4f\x5c\x0d\x9c\xd8\xe0\x5b\xa5\x72\x1a\x61\xda\x0b\xa8\xc5\xbc\x42\xc9\x7b\xbd\x1e\x85\x2f\x44\x53\x85\x6e\x5c\x95\x59\x46\x73\x09\xc7\xc7\x83\xcb\xc1\xf0\x7c\x34\x9c\x8c\x3f\x12\x63\xad\x56\x10\x5f\x0a\xb4\x53\x4f\x8c\xf2\x74\xff\xd3\x60\xff\x8e\x9a\x60\xc7\x71\x9f\xaf\x61\x42\x86\xd9\xf1\x67\xe5\x42\x23\xaa\x73\x43\x7f\x58\x3f\xf7\x7f\xed\x9d\x12\x77\x67\x26\x6f\x6a\x1a\x90\x29\xed\xdd\xe7\xba\x01\x38\x3e\xa3\x65\x92\xa7\xf5\xb3\x2f\x9e\xe8\x0a\x30\x6d\xb7\x0d\x44\x42\x4b\x27\x88\x28\x19\x9d\xf8\xce\xeb\x34\x3b\xe6\x4f\xb2\x9e\x66\x8f\x25\x6e\x89\x24\xda\xe2\x46\x7f\xd5\xc9\xfe\x09\x00\x00\xff\xff\x4f\xa2\x54\xd3\xe7\x07\x00\x00"

func dataAwsSimpleBuildBuildPhpShBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleBuildBuildPhpSh,
		"data/aws-simple/build/build-php.sh",
	)
}

func dataAwsSimpleBuildBuildPhpSh() (*asset, error) {
	bytes, err := dataAwsSimpleBuildBuildPhpShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/build/build-php.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsSimpleBuildTemplateJsonTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x5d\x6f\x9b\x30\x14\x7d\xe7\x57\x58\x48\xe9\x53\x80\x6c\xad\xa6\x69\xaf\xfb\x19\x55\x44\x0d\xb8\xe1\x2a\xb6\xb1\x7c\x4d\xa6\x16\xf9\xbf\xef\x9a\xef\x4c\x0d\xcd\x9a\x17\x23\x9f\xc3\x39\xc7\x87\xeb\x74\x11\xa3\x5f\xac\x40\xe7\x86\x97\x67\x61\xf3\x8b\xb0\x08\x8d\x8e\x7f\xb1\xf8\x90\xfe\x4c\x0f\xf1\x3e\x1a\x38\x17\x6e\x81\x17\x52\x20\x41\xc3\x6b\xb4\xc9\xff\x60\xce\xcb\x52\x20\xe6\x67\xf1\x46\x88\x6e\xa5\xdc\xaf\x51\x14\xa5\x15\xee\x16\x6a\xc5\x69\x30\xbb\x42\x50\xb6\x27\xca\xe3\xea\x11\xe8\xf7\xfd\x14\xc4\xd8\xe6\x02\x21\x23\x25\x25\xc2\xf3\xf8\x56\xb7\x63\xaf\x8d\x65\x15\x58\x06\x9a\x1e\x5b\x5d\x71\x47\xac\x9c\x76\x30\x2d\x5a\x90\x15\xdb\xf9\x89\x3c\xae\x24\xe7\xde\x8c\x08\xa7\xc5\x5a\x48\x19\xef\x17\x00\xb4\x04\x1d\xa0\xe7\x58\x9d\x83\x6c\x62\x58\xe6\x94\xc9\x1a\xe7\x9a\x6c\x31\x48\xba\x2e\x38\xcb\xa6\x31\xe9\x6f\xda\x75\xc2\x32\xef\xe3\xe3\xa8\xe4\xf7\xb7\x3d\x5f\x41\x8a\xb5\x25\x36\xad\x2d\x7b\x84\x34\x83\xa5\xf7\xd9\x1a\xaf\x04\x3a\xd0\xbd\x6b\x20\xfd\x47\x9a\x3b\xc2\x6c\x15\x50\x56\xf7\x1e\xdd\x7b\xf6\xf0\xc0\x0a\x8e\x35\x4b\x33\xc5\x41\xa7\x58\x7f\xd0\xc5\x8e\x09\x5d\x85\xef\xb5\xf5\x49\x36\xea\xd9\x31\x1a\xd4\x82\x42\x28\x52\xa0\x14\x2d\xd2\x39\x5f\xe6\xc1\x79\xa1\x33\x0f\x1e\x2b\xda\x3d\x4d\x26\xdc\x98\xd4\x9d\xde\xbf\x54\x18\x96\x16\x8c\x0b\x50\x3f\x6e\x89\xa9\x4d\x38\xfd\x24\xd5\xaf\xc7\x69\x8c\x7b\xca\x38\xc2\xf3\x7d\xd2\x5c\xf5\xd2\x21\xca\xac\x3c\x1b\x72\xc5\xdf\xa9\x74\x51\xe0\x82\x5d\xdd\xbe\x5b\xbd\x5c\x5f\xd3\xed\x72\xe2\xab\x1b\xbb\xa5\xb8\x10\x3f\x51\x9c\x6f\xf9\x96\xda\x40\xfa\x2c\x5b\x3f\x01\x39\x57\x30\xf4\x01\xc9\xf7\x6f\x3f\x1e\x0f\xd5\xd3\xd3\xc2\x01\x8d\x8e\x6b\x62\x4d\xb5\x95\x8f\xa9\xe4\xf6\x24\x56\x32\x58\xe7\xc1\x79\xaa\xbb\x2d\x68\x76\xdb\x55\xa9\x0a\xf2\x09\xeb\xba\xf0\x44\x63\xfd\x6f\x76\x5a\x69\x88\xb8\x32\x1f\x25\x1e\xfe\xb2\x8e\x51\xe4\xa3\xbf\x01\x00\x00\xff\xff\x4f\xd6\x14\x86\x64\x05\x00\x00"

func dataAwsSimpleBuildTemplateJsonTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleBuildTemplateJsonTpl,
		"data/aws-simple/build/template.json.tpl",
	)
}

func dataAwsSimpleBuildTemplateJsonTpl() (*asset, error) {
	bytes, err := dataAwsSimpleBuildTemplateJsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/build/template.json.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsSimpleDeployMainTfTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x52\xc1\x8e\xdb\x20\x10\xbd\xe7\x2b\x46\x74\x8f\x5d\x27\xed\xb1\x52\xcf\xbd\xb5\x1f\x50\xad\x10\xc6\x24\x45\x8b\x01\xc1\x90\xca\xb2\xfc\xef\x1d\xa0\x16\xc1\xbb\xbd\x36\x39\xf9\xcd\x63\xde\xcc\x9b\xf7\x01\xbe\x29\xab\x82\x40\x35\xc1\xb8\xc0\x0f\x44\xf7\x11\x26\x07\xd6\x21\xa8\x49\x23\xcc\xc2\x26\x61\xcc\x72\x3a\xdd\x45\xd0\x62\x34\x0a\x98\xb6\xd7\x20\xb8\x9e\x18\xac\xdb\x03\x2c\x7e\x47\x2e\xa4\x54\x31\xf2\x57\xb5\xbc\x53\x8c\x4a\x06\x85\xff\x28\x06\x75\xd3\xce\x1e\x0a\x44\xe5\x56\xcc\xaa\xc0\x8f\x0f\x66\x7d\x60\x6a\x1b\x51\x58\xa9\x38\x2e\x3e\xd3\x61\x52\x57\x91\x0c\xc2\x57\x60\xf8\x79\x98\xb5\x0c\x8e\xc1\xe3\x8b\x98\x46\x4b\xd3\xf8\x34\x1a\x2d\x0f\xdd\xee\x5e\x72\xa9\xa7\xf0\x0e\xfc\x77\xed\x93\x0f\xee\xae\x27\x15\xca\xf4\x04\x9d\x00\xda\xf2\x59\xf5\x69\xa5\x87\x43\x6f\xca\xc6\x88\xd6\x6c\xe8\x69\x0d\x2f\xb4\x6a\x08\xe4\x5f\x47\xab\x38\x51\x68\x88\xa0\xa2\x4b\x41\x36\x7f\x53\xd0\xb8\xf0\x5b\x70\xc9\x33\x02\xbd\xaf\x93\x65\x0f\x6b\x9f\x75\xad\x1f\xdb\xf6\x5c\x5b\xee\xc7\x2c\x9a\x75\xc1\xa6\x57\xbf\xa9\x44\x35\x6d\x6f\x24\x17\x4b\x3f\x00\x5a\x1f\x9d\x74\xa6\x8e\xf7\xfc\xa9\x80\xd7\xe0\x66\xee\x5d\xc0\x02\x5e\x0a\x86\x6e\x47\x1a\x96\xad\xe5\xa3\x71\xf2\x35\x12\xf6\x93\x5d\x86\xf2\x3f\x5f\xd8\x0b\xd5\xb7\xac\xa6\xfe\x9b\xd8\x1b\x1b\xf7\x28\x3d\x1a\x48\x81\x83\xf6\x6b\xf7\x98\x75\xf1\xad\x4b\x5f\x2b\x77\x70\xbd\x7d\x0d\x1d\x79\xdc\xf5\xe9\xb2\x58\x88\x7b\xf2\x0f\x82\x3b\x5c\x4f\x92\xcf\xd3\x1f\x9d\x3a\xd7\x2d\x9f\xd6\xb7\x89\x18\x68\x9d\x21\x9f\xf3\x25\x3f\x46\x71\x23\x7f\xe1\x7b\x16\xe9\x82\xc1\xaa\x29\x2e\xa1\x4f\x08\x2c\x05\x53\x3d\xb8\x0b\x93\x0a\xf5\x17\xa2\xff\x72\x3e\x57\x89\x7d\xc7\xd2\xbc\x2e\xc0\x27\x1b\xb7\x73\x0e\xe8\x9f\x00\x00\x00\xff\xff\x5f\x73\x79\x4b\x5f\x04\x00\x00"

func dataAwsSimpleDeployMainTfTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleDeployMainTfTpl,
		"data/aws-simple/deploy/main.tf.tpl",
	)
}

func dataAwsSimpleDeployMainTfTpl() (*asset, error) {
	bytes, err := dataAwsSimpleDeployMainTfTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/deploy/main.tf.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\xdd\x6e\xdc\x46\x0f\xbd\xd7\x53\x30\xda\xc4\xb0\x01\x4b\xc2\x17\x7c\xc9\x85\x1b\x1b\x4d\x6d\xa7\x36\xd0\x3a\x46\xd6\xed\x4d\x51\x6c\x66\x35\x94\x34\x8d\x34\x1c\xcc\x8c\xd6\x5e\x78\xf7\xdd\x4b\x4a\x5a\xff\x34\x41\x5b\x14\x48\x8c\x59\x8a\x3c\x24\x0f\x0f\x39\x83\x1f\xd1\xa2\x57\x11\x35\x2c\xd7\xf0\x31\x46\x3a\x04\x4d\x60\x29\x02\x6a\x13\x5f\x24\xb3\x64\x06\x37\x8d\x09\xc0\xff\x62\x83\xf0\xab\xaa\xbd\xb2\xb1\x32\x2d\x42\xfd\xd7\x58\xa8\xc8\x0f\x5e\x1a\x57\xd8\x92\xeb\xd0\x46\xa0\x8a\x21\xa2\x40\x28\xe7\x5a\x53\xaa\x68\xc8\x16\x01\xfd\xca\x94\x98\xc3\x65\x84\xd0\x50\xdf\xea\x21\xe9\x12\xa1\x51\x56\x67\x92\x1c\x75\x0e\x37\x04\x1d\x69\x53\xad\x05\x96\x71\x9e\xa4\x3f\x84\x3e\xe0\x90\xed\xbd\x73\x62\xc8\x93\x64\xfa\x9c\x97\x64\x2b\x53\xf7\x1e\xf7\xd3\xd7\xe9\x81\x74\xb4\x19\x4d\x9b\x04\x60\x7c\xe5\xab\x2e\x5f\xd2\x1d\x1c\x43\xda\xa8\xd0\x98\x92\xbc\x2b\x9c\xc7\xd2\x04\x7c\xfb\xff\x34\x61\xc7\x19\x5c\x50\xe0\x06\x6c\xbb\x06\x8b\xf1\x96\xfc\x97\x67\xe1\x93\x0d\x52\xe7\xcd\x8a\x79\x58\x4c\x86\xf4\x10\x8c\x3b\x82\xf4\xfe\x5e\x88\x58\x18\xb7\x50\x5a\x7b\x0c\x01\xb6\xdb\x09\x78\x8e\xb1\x77\xa0\x20\xac\x6d\xc9\xfc\x55\xd4\x6a\xf4\x50\x79\xea\x80\x7a\x0f\x82\x62\x6c\x0d\xda\x70\x41\x91\x3c\xb7\x4f\x50\xac\xc6\xee\x9e\xd5\x30\x02\x2c\x26\x00\x49\xe9\x54\x6c\xf2\x1d\x00\x27\x3c\x84\x74\x17\x99\x1e\x72\x2c\x00\xdd\xf2\xdc\xb8\xbe\x07\x2b\xd4\x9e\x7a\xf7\xc4\x32\x16\x79\x6e\xd5\x92\xc7\x3c\x9f\x5f\x80\xaa\x65\x94\x3c\xde\x5b\xe5\xb5\x00\x07\xe2\xf1\xc7\x28\xcf\xa9\x7b\xee\xd5\xa1\xd5\x68\x4b\x83\x61\xe8\x20\x3c\x56\x1a\x42\x93\x4f\xd1\x8b\x11\xeb\x18\xa2\xef\x71\x4c\xf4\x81\x7a\xab\x07\x5d\xc0\x6e\x72\xe3\xaf\x7d\x53\x81\xb2\xeb\x03\xf6\xba\x7f\x35\xa8\x8b\x19\x01\x63\xf9\xb9\x8b\x58\xb0\x25\xe4\xcc\x33\xbc\xda\xb2\x9b\x7c\xe7\x91\x16\xc4\x72\x2c\x1e\xbd\x32\x26\x86\xc3\x5b\x22\x97\x9f\xb2\x35\x32\x59\x32\x8c\xbf\xa7\x52\xc0\x06\x06\xf9\xf1\xcc\xd5\x79\x5a\x99\x20\x15\xa6\xa1\xc1\xb6\x95\x89\xdb\xd6\x58\x64\x0e\x4b\x0d\xb3\x7b\x0e\xd8\xc2\xde\x1e\x2c\x59\x5a\xd3\xcf\xa2\x53\xc6\xe6\xa1\x49\xc7\x66\x98\x2a\xe9\x87\x8b\x1e\x28\xf8\x89\x94\x06\xd5\xb6\xc3\xf8\x2b\xaf\x6a\xd9\x9d\x00\x0d\x7a\x1c\xfa\x66\x16\x9e\x11\x9c\x3f\x52\xb2\xf3\x16\x5e\x44\x6f\x8f\xd1\x03\x23\xd2\xf9\x64\xd9\x78\xe4\x2c\xdb\xed\x37\x2b\xb8\xb4\x21\x4a\x01\xcb\xde\xf0\x32\xa2\x5d\x19\x4f\x56\xa2\xfe\x6d\xe7\x2f\x43\xe9\x8d\x8b\x0b\x5e\xf3\x84\xb1\x93\xe4\x89\x81\x67\xf2\xee\xdd\xfc\xf4\xd3\xe5\xf5\x4d\x12\x30\x42\xc6\x93\x9f\x81\x0c\x29\xc3\x3b\x2c\x8f\x40\xfe\xf6\x2c\xa2\x92\xba\x8e\x0f\x00\xdc\x9a\xd8\x30\x17\xd1\xf5\x11\x5a\xaa\x6b\x39\x32\xfc\x94\x1b\xa1\x4d\x70\xad\x5a\xa3\x4e\x08\xf7\x0f\xe0\x1e\x5e\x7e\x0f\xaf\x4f\xf6\xfe\x07\x9b\xd1\xd3\x43\x16\x07\x68\x38\x81\x82\x09\x29\x6c\xdf\xb6\xdf\xc1\xf6\x21\x23\x7b\x1d\xed\xb0\x15\xcb\x17\x2b\x73\xc7\xf8\x1d\x6f\x28\x6b\x33\xa1\x76\x40\xc5\xb2\x21\x48\x7f\x93\x88\xdf\x39\x45\x3a\x21\xfc\xac\xbe\x20\x98\x28\x0b\x10\x1b\x15\xe1\xf3\xb4\x33\xc0\x12\xff\x0c\x35\xb1\xf6\xc7\xad\x6d\x87\xa5\x95\xfb\xc4\xa7\x45\x0c\x83\x8a\x46\x54\xd6\xc8\xc3\x4e\xc2\x09\x97\xd9\x50\x87\x3b\x4b\x91\x8b\x6a\x7c\x29\xd9\x4e\xa7\x75\x90\x3d\x93\x3d\x1c\xe6\xad\x82\xc8\x97\xbb\x30\x36\xe1\x05\x79\xc1\xeb\x8b\x0e\xd2\x5f\x02\x9e\x5d\xcd\x99\xa2\x14\x0a\x8c\x65\xc1\x05\xc9\x7f\xbd\x18\xa7\x07\x27\x4f\xc8\xe0\xb2\x2c\xcf\x75\xac\xe6\x49\xe0\x06\x42\xcf\xd7\x32\x22\x42\xa6\xfe\x09\x86\x01\x08\xc7\x80\xe9\x9c\x0b\x09\xc0\x97\x2e\x2a\x1f\x93\xca\x24\xcc\x25\xa4\x93\xb0\xa4\x85\xeb\x8b\xeb\x3c\xcf\xd3\x04\xef\x1c\xf9\x08\x67\xe7\x3f\x5c\xbe\xbf\x5a\x7c\xf8\xf4\xf1\xea\xe6\xfc\xea\xec\xd8\x92\x35\xb2\x9a\xaa\x8c\x66\xc5\x83\x98\xc0\x95\x8b\x19\x1f\x1b\xe8\x9d\x96\x3b\x93\xad\xbf\xfa\x62\x26\xed\x66\x6b\x70\xeb\xd8\xf0\xbe\x07\xaa\x22\x5f\x1b\xcc\x58\xb0\x0e\x7d\x94\x9b\xf4\x0d\x5b\x26\x7a\x23\xfb\x08\xa8\x75\x26\xa0\x4c\x28\x05\x33\x5c\x5e\xc1\x74\xea\x88\x2c\x9f\xf0\x3f\x0a\xd7\xb8\x37\xd9\x9b\xfc\xed\x7f\x2b\xae\xec\x7d\x0b\x02\xf1\x15\x33\xa7\xd4\x71\x46\xf4\x03\x3d\x22\x8f\xd8\xb9\x64\x70\xcf\xc2\x1c\x9a\x18\x5d\x38\x2a\x0a\x86\x2b\x77\x8e\xe4\xeb\x62\x82\x66\x35\x6c\x04\xf6\x21\x75\xb7\x82\x07\x3f\xd7\x28\x0f\x45\x1f\x7c\xd1\x52\xa9\xda\x62\x69\x6c\xb1\xfb\x98\x4c\x2b\xf9\x67\x00\x00\x00\xff\xff\x90\x0e\xad\xa3\x08\x08\x00\x00"

func dataCommonDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevVagrantfileTpl,
		"data/common/dev/Vagrantfile.tpl",
	)
}

func dataCommonDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/aws-simple/build/build-php.sh": dataAwsSimpleBuildBuildPhpSh,
	"data/aws-simple/build/template.json.tpl": dataAwsSimpleBuildTemplateJsonTpl,
	"data/aws-simple/deploy/main.tf.tpl": dataAwsSimpleDeployMainTfTpl,
	"data/common/dev/Vagrantfile.tpl": dataCommonDevVagrantfileTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"aws-simple": &bintree{nil, map[string]*bintree{
			"build": &bintree{nil, map[string]*bintree{
				"build-php.sh": &bintree{dataAwsSimpleBuildBuildPhpSh, map[string]*bintree{
				}},
				"template.json.tpl": &bintree{dataAwsSimpleBuildTemplateJsonTpl, map[string]*bintree{
				}},
			}},
			"deploy": &bintree{nil, map[string]*bintree{
				"main.tf.tpl": &bintree{dataAwsSimpleDeployMainTfTpl, map[string]*bintree{
				}},
			}},
		}},
		"common": &bintree{nil, map[string]*bintree{
			"dev": &bintree{nil, map[string]*bintree{
				"Vagrantfile.tpl": &bintree{dataCommonDevVagrantfileTpl, map[string]*bintree{
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

