// Code generated by go-bindata.
// sources:
// data/common/dev/Vagrantfile.tpl
// DO NOT EDIT!

package phpapp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCommonDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\xdd\x6e\xdc\x46\x0f\xbd\xd7\x53\x30\xda\xc4\xb0\x01\x4b\xc2\x17\x7c\xc9\x85\x1b\x1b\x4d\x6d\xa7\x36\xd0\x3a\x46\xd6\xed\x4d\x51\x6c\x66\x35\x94\x34\x8d\x34\x1c\xcc\x8c\xd6\x5e\x78\xf7\xdd\x4b\x4a\x5a\xff\x34\x41\x5b\x14\x48\x8c\x59\x8a\x3c\x24\x0f\x0f\x39\x83\x1f\xd1\xa2\x57\x11\x35\x2c\xd7\xf0\x31\x46\x3a\x04\x4d\x60\x29\x02\x6a\x13\x5f\x24\xb3\x64\x06\x37\x8d\x09\xc0\xff\x62\x83\xf0\xab\xaa\xbd\xb2\xb1\x32\x2d\x42\xfd\xd7\x58\xa8\xc8\x0f\x5e\x1a\x57\xd8\x92\xeb\xd0\x46\xa0\x8a\x21\xa2\x40\x28\xe7\x5a\x53\xaa\x68\xc8\x16\x01\xfd\xca\x94\x98\xc3\x65\x84\xd0\x50\xdf\xea\x21\xe9\x12\xa1\x51\x56\x67\x92\x1c\x75\x0e\x37\x04\x1d\x69\x53\xad\x05\x96\x71\x9e\xa4\x3f\x84\x3e\xe0\x90\xed\xbd\x73\x62\xc8\x93\x64\xfa\x9c\x97\x64\x2b\x53\xf7\x1e\xf7\xd3\xd7\xe9\x81\x74\xb4\x19\x4d\x9b\x04\x60\x7c\xe5\xab\x2e\x5f\xd2\x1d\x1c\x43\xda\xa8\xd0\x98\x92\xbc\x2b\x9c\xc7\xd2\x04\x7c\xfb\xff\x34\x61\xc7\x19\x5c\x50\xe0\x06\x6c\xbb\x06\x8b\xf1\x96\xfc\x97\x67\xe1\x93\x0d\x52\xe7\xcd\x8a\x79\x58\x4c\x86\xf4\x10\x8c\x3b\x82\xf4\xfe\x5e\x88\x58\x18\xb7\x50\x5a\x7b\x0c\x01\xb6\xdb\x09\x78\x8e\xb1\x77\xa0\x20\xac\x6d\xc9\xfc\x55\xd4\x6a\xf4\x50\x79\xea\x80\x7a\x0f\x82\x62\x6c\x0d\xda\x70\x41\x91\x3c\xb7\x4f\x50\xac\xc6\xee\x9e\xd5\x30\x02\x2c\x26\x00\x49\xe9\x54\x6c\xf2\x1d\x00\x27\x3c\x84\x74\x17\x99\x1e\x72\x2c\x00\xdd\xf2\xdc\xb8\xbe\x07\x2b\xd4\x9e\x7a\xf7\xc4\x32\x16\x79\x6e\xd5\x92\xc7\x3c\x9f\x5f\x80\xaa\x65\x94\x3c\xde\x5b\xe5\xb5\x00\x07\xe2\xf1\xc7\x28\xcf\xa9\x7b\xee\xd5\xa1\xd5\x68\x4b\x83\x61\xe8\x20\x3c\x56\x1a\x42\x93\x4f\xd1\x8b\x11\xeb\x18\xa2\xef\x71\x4c\xf4\x81\x7a\xab\x07\x5d\xc0\x6e\x72\xe3\xaf\x7d\x53\x81\xb2\xeb\x03\xf6\xba\x7f\x35\xa8\x8b\x19\x01\x63\xf9\xb9\x8b\x58\xb0\x25\xe4\xcc\x33\xbc\xda\xb2\x9b\x7c\xe7\x91\x16\xc4\x72\x2c\x1e\xbd\x32\x26\x86\xc3\x5b\x22\x97\x9f\xb2\x35\x32\x59\x32\x8c\xbf\xa7\x52\xc0\x06\x06\xf9\xf1\xcc\xd5\x79\x5a\x99\x20\x15\xa6\xa1\xc1\xb6\x95\x89\xdb\xd6\x58\x64\x0e\x4b\x0d\xb3\x7b\x0e\xd8\xc2\xde\x1e\x2c\x59\x5a\xd3\xcf\xa2\x53\xc6\xe6\xa1\x49\xc7\x66\x98\x2a\xe9\x87\x8b\x1e\x28\xf8\x89\x94\x06\xd5\xb6\xc3\xf8\x2b\xaf\x6a\xd9\x9d\x00\x0d\x7a\x1c\xfa\x66\x16\x9e\x11\x9c\x3f\x52\xb2\xf3\x16\x5e\x44\x6f\x8f\xd1\x03\x23\xd2\xf9\x64\xd9\x78\xe4\x2c\xdb\xed\x37\x2b\xb8\xb4\x21\x4a\x01\xcb\xde\xf0\x32\xa2\x5d\x19\x4f\x56\xa2\xfe\x6d\xe7\x2f\x43\xe9\x8d\x8b\x0b\x5e\xf3\x84\xb1\x93\xe4\x89\x81\x67\xf2\xee\xdd\xfc\xf4\xd3\xe5\xf5\x4d\x12\x30\x42\xc6\x93\x9f\x81\x0c\x29\xc3\x3b\x2c\x8f\x40\xfe\xf6\x2c\xa2\x92\xba\x8e\x0f\x00\xdc\x9a\xd8\x30\x17\xd1\xf5\x11\x5a\xaa\x6b\x39\x32\xfc\x94\x1b\xa1\x4d\x70\xad\x5a\xa3\x4e\x08\xf7\x0f\xe0\x1e\x5e\x7e\x0f\xaf\x4f\xf6\xfe\x07\x9b\xd1\xd3\x43\x16\x07\x68\x38\x81\x82\x09\x29\x6c\xdf\xb6\xdf\xc1\xf6\x21\x23\x7b\x1d\xed\xb0\x15\xcb\x17\x2b\x73\xc7\xf8\x1d\x6f\x28\x6b\x33\xa1\x76\x40\xc5\xb2\x21\x48\x7f\x93\x88\xdf\x39\x45\x3a\x21\xfc\xac\xbe\x20\x98\x28\x0b\x10\x1b\x15\xe1\xf3\xb4\x33\xc0\x12\xff\x0c\x35\xb1\xf6\xc7\xad\x6d\x87\xa5\x95\xfb\xc4\xa7\x45\x0c\x83\x8a\x46\x54\xd6\xc8\xc3\x4e\xc2\x09\x97\xd9\x50\x87\x3b\x4b\x91\x8b\x6a\x7c\x29\xd9\x4e\xa7\x75\x90\x3d\x93\x3d\x1c\xe6\xad\x82\xc8\x97\xbb\x30\x36\xe1\x05\x79\xc1\xeb\x8b\x0e\xd2\x5f\x02\x9e\x5d\xcd\x99\xa2\x14\x0a\x8c\x65\xc1\x05\xc9\x7f\xbd\x18\xa7\x07\x27\x4f\xc8\xe0\xb2\x2c\xcf\x75\xac\xe6\x49\xe0\x06\x42\xcf\xd7\x32\x22\x42\xa6\xfe\x09\x86\x01\x08\xc7\x80\xe9\x9c\x0b\x09\xc0\x97\x2e\x2a\x1f\x93\xca\x24\xcc\x25\xa4\x93\xb0\xa4\x85\xeb\x8b\xeb\x3c\xcf\xd3\x04\xef\x1c\xf9\x08\x67\xe7\x3f\x5c\xbe\xbf\x5a\x7c\xf8\xf4\xf1\xea\xe6\xfc\xea\xec\xd8\x92\x35\xb2\x9a\xaa\x8c\x66\xc5\x83\x98\xc0\x95\x8b\x19\x1f\x1b\xe8\x9d\x96\x3b\x93\xad\xbf\xfa\x62\x26\xed\x66\x6b\x70\xeb\xd8\xf0\xbe\x07\xaa\x22\x5f\x1b\xcc\x58\xb0\x0e\x7d\x94\x9b\xf4\x0d\x5b\x26\x7a\x23\xfb\x08\xa8\x75\x26\xa0\x4c\x28\x05\x33\x5c\x5e\xc1\x74\xea\x88\x2c\x9f\xf0\x3f\x0a\xd7\xb8\x37\xd9\x9b\xfc\xed\x7f\x2b\xae\xec\x7d\x0b\x02\xf1\x15\x33\xa7\xd4\x71\x46\xf4\x03\x3d\x22\x8f\xd8\xb9\x64\x70\xcf\xc2\x1c\x9a\x18\x5d\x38\x2a\x0a\x86\x2b\x77\x8e\xe4\xeb\x62\x82\x66\x35\x6c\x04\xf6\x21\x75\xb7\x82\x07\x3f\xd7\x28\x0f\x45\x1f\x7c\xd1\x52\xa9\xda\x62\x69\x6c\xb1\xfb\x98\x4c\x2b\xf9\x67\x00\x00\x00\xff\xff\x90\x0e\xad\xa3\x08\x08\x00\x00"

func dataCommonDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevVagrantfileTpl,
		"data/common/dev/Vagrantfile.tpl",
	)
}

func dataCommonDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/common/dev/Vagrantfile.tpl": dataCommonDevVagrantfileTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"common": &bintree{nil, map[string]*bintree{
			"dev": &bintree{nil, map[string]*bintree{
				"Vagrantfile.tpl": &bintree{dataCommonDevVagrantfileTpl, map[string]*bintree{
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

