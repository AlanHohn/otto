// Code generated by go-bindata.
// sources:
// data/aws-simple/build/build-php.sh
// data/aws-simple/build/template.json.tpl
// data/aws-simple/deploy/main.tf.tpl
// data/common/dev/Vagrantfile.tpl
// DO NOT EDIT!

package phpapp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAwsSimpleBuildBuildPhpSh = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x55\xdd\x6e\x1b\x37\x13\xbd\xdf\xa7\x98\x28\xc6\x97\xaf\x45\x28\x2a\x06\x5c\x14\xf2\x0f\xaa\xc8\x4a\x6d\x20\x90\x0c\xa9\x4d\x2f\x5c\x23\xa0\x96\xb3\x2b\xc6\xbb\x24\x43\x72\x25\xcb\x8e\xde\xbd\x43\xae\x2c\x5b\x2e\xea\x2b\x71\xc9\xf9\x39\x73\xe6\xcc\xe8\xed\x1b\x3e\x57\x9a\xcf\x85\x5f\x64\x99\xc7\x00\xcc\x80\x36\x8d\xde\x1e\xd1\x39\xbc\x53\xe9\x68\x95\xc5\x42\xa8\x6a\x7b\x1d\x9c\xc8\x31\xcb\xe8\x64\xdc\xff\x7f\x82\x87\x0c\x00\x2a\x93\x8b\x0a\xbc\x69\x5c\x8e\x85\xaa\xf0\xf4\xe0\xc3\xd3\x75\xa5\x34\x6a\x73\x7a\x70\x18\xaf\x30\x5f\x18\xe8\x8c\xa6\xd3\xc9\x14\x44\x80\x83\x87\x27\xa7\x4d\xff\xe0\xa1\xb5\xdd\x1c\xc3\x67\xe1\x03\xf9\x97\xbe\xdf\x89\x6e\xa5\x43\x0b\x26\x04\x03\x7c\x29\x1c\xa7\x07\xee\xd7\x9e\x7e\xe0\x07\x84\x84\x4d\xc3\x61\x2f\xdb\x64\x84\xce\xc2\xbb\x04\x0e\x3a\x07\x0f\x1f\x07\xb3\x8b\xaf\xb3\xc9\x9f\xd3\xe1\x68\xd3\x89\x17\x9f\x2f\xc7\xa3\xf1\x64\xd3\x79\x07\x84\x21\xcb\x0c\xc6\x12\xe8\xe1\xb7\x0e\x1c\x9e\xfd\xef\x03\x85\xa3\xa0\x25\x3a\x60\xa1\xcd\x77\x06\x5c\xe2\x92\xeb\xa6\xaa\x8e\x61\x93\x99\x2a\x39\xb4\x65\x5c\x47\x8b\x1b\x20\xe7\xf8\x94\xbd\x85\xbc\x32\x8d\x64\xb9\xd1\x85\x2a\x21\x17\x1a\x94\x0e\xe8\x0a\x74\x08\x2b\x15\x16\x20\x6c\x80\xdc\xd4\xb5\xd0\xd2\x83\x2a\x40\x85\x77\x1e\x7c\x50\x55\x45\x96\x60\x9d\xa1\x3a\xbd\xa7\x24\xd0\xf9\x4b\xa8\xa0\x74\x09\x05\x15\xb2\x17\x96\x30\x51\x08\x5b\x61\xc0\x6e\xb7\xdb\xc9\x1a\x4d\xfe\x70\x7d\x0d\xac\xd8\x92\xa3\xe6\x3c\x79\x70\xa5\x7d\x10\x3a\x47\x3e\x37\x26\xb0\x42\x69\xe5\x17\x28\xe1\xe6\xe6\x18\xa4\x21\x5a\x7d\x85\x44\x6b\xaf\x7b\x94\x49\xa3\xa9\xa7\x31\xef\x40\xca\x98\x36\x22\x25\x2c\xd6\x78\x15\x8c\x53\xe8\x81\x30\x43\x63\xa5\x88\xa8\x52\x62\xbc\xb3\xc6\x05\x38\x1f\x7d\xbc\x1c\x8c\xbf\x7e\x9a\x4e\xc6\x7f\x8c\xc6\xe7\xa7\xda\xe8\x54\xb5\xc8\x83\x5a\x22\x31\x0c\xbe\x91\x26\x06\x64\x25\x69\x2b\x85\x40\x60\xeb\x7f\xbd\x24\xb4\xc4\x04\x5b\x93\x92\x8a\xb0\x12\x0e\x19\x51\x62\xd1\x05\xca\xcf\x22\x6f\x46\x3f\x79\x49\xc9\xa2\x27\x09\xa3\xc5\xb8\x8e\x8e\xd6\x8a\xbe\xd1\xd2\xe1\x37\x6e\x17\xf6\x88\x1d\x75\x7f\xa1\xb6\xcc\x10\x6b\x1f\x89\x9b\x23\x15\xf5\xbd\x51\x8e\x58\xa0\x4f\xeb\x70\x89\x3a\x40\xa7\xd1\xa2\x09\x0b\x3a\xaa\x9c\xc0\x49\xb0\x22\xbf\x15\x25\xfa\x0e\x39\x27\x2d\x79\x30\x0d\x09\xa2\x78\x09\xb6\xbb\x57\xc5\x2d\xae\xb7\xf5\xbd\x52\x76\x62\xf9\xb2\x75\x8f\x4c\x5f\x5d\x5c\xc1\x97\xe1\xcc\xbf\x87\x01\xa5\x5d\xe0\xfb\xc4\xb4\x21\x38\x6e\x87\x23\xf1\xfd\x0a\x5f\x22\x79\x1e\x42\xac\x99\xe6\x6d\xbe\xfd\x66\xb5\x91\x2c\xdd\xfd\x4d\xdd\x9e\xdf\x3b\x28\x69\xa4\x6b\x74\x79\xe3\x14\x4d\xe6\xbc\x51\x95\x64\xa4\xb8\x58\x39\x7d\x47\x2b\x7a\x6a\x0f\x89\xbf\x3a\x77\x6b\x52\x42\x7b\x5e\xfb\xef\x55\x7b\x2c\x6c\xdd\x1e\x4a\xd9\xfe\x3a\x14\x32\xce\x6e\xfb\x65\x4b\xb2\x6c\x0b\x1d\xdd\x85\xa4\x84\x24\x29\x9b\xea\x48\x45\xd4\xb7\x52\xd1\x90\x59\xe0\xde\x2d\x79\x9c\x23\xea\xa6\x6d\xdf\x82\x70\x70\x7f\x47\x6a\x0e\xb5\xdd\x3d\x75\x43\x79\x0f\x6c\xf8\xc2\x3e\xe5\x98\x61\x48\x09\x48\x29\xb5\xf2\x5e\x19\xbd\x4f\x18\xcd\xea\x4a\x03\x9b\xc2\x6a\xb5\x62\xd4\x06\xd1\x7f\x19\x85\x46\xb1\x9d\x9f\xe7\xd7\x3c\x8e\x99\xf1\xe8\xba\xdf\xbc\xd1\x40\x43\x13\x25\x42\xcc\xbc\x68\xe0\xf0\xd1\x2c\xe6\x24\x02\x65\x02\xfe\x48\x25\xf3\x33\x58\x84\x60\x7d\x9f\x73\xea\xda\x2e\xa6\x71\x25\xdf\x76\x90\x1a\xfd\x23\x12\x17\x43\x6f\x21\xd7\x4b\xd8\x59\xda\x05\xf1\xc1\x1b\x1f\xd7\x1e\xed\xd3\xb4\xb6\x1f\x1f\xb3\x2d\x9c\x69\xa3\x75\xc4\xf2\x78\xbf\xd3\x67\x8b\xe9\x31\x2c\x6b\x76\x1c\xfc\x57\xc4\x27\x59\xb1\x95\x71\xb7\x14\x94\xc5\x4e\xed\x31\x43\x6f\xda\x30\x5a\x8b\xed\x61\x37\xee\x34\x9e\x85\xca\xda\xa6\x0c\xd3\xb6\x22\x9d\xa5\xce\x47\x39\xee\xf5\xc4\xd5\xc0\x89\x0d\xbe\x55\x2a\xa7\x11\xa6\x19\x47\x2d\xe6\x15\x4a\xde\xeb\xf5\x28\x7c\x21\x9a\x2a\x74\xe3\xda\xcb\x32\x9a\x4b\x38\x39\x19\x5c\x0d\x86\x17\xa3\xe1\x64\xfc\x89\x18\x6b\xb5\x82\xf8\x5a\xa0\x9d\x7a\x62\x94\xe7\xbb\x9c\x06\xfb\x77\xd4\x04\x3b\x8e\xfb\x7c\x0d\x13\x32\xcc\x4e\xbe\x28\x17\x1a\x51\x5d\x18\xfa\xf3\xf9\xb9\xff\x6b\xef\x8c\xb8\x3b\x37\x79\x53\xd3\x80\x4c\x69\x87\xbe\xd4\x0d\xc0\xc9\x39\x2d\x93\x3c\xad\x9f\x7d\xf1\x44\x57\x80\x69\xbb\x6d\x20\x12\x5a\x3a\x41\x44\xc9\xe8\xc4\x77\x5e\x67\xd9\x09\x7f\x96\xf5\x2c\x7b\x2a\x71\x4b\x24\xd1\x16\xb7\xf3\x9b\x4e\xf6\x4f\x00\x00\x00\xff\xff\xe1\x4e\x14\x9c\xb3\x07\x00\x00"

func dataAwsSimpleBuildBuildPhpShBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleBuildBuildPhpSh,
		"data/aws-simple/build/build-php.sh",
	)
}

func dataAwsSimpleBuildBuildPhpSh() (*asset, error) {
	bytes, err := dataAwsSimpleBuildBuildPhpShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/build/build-php.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsSimpleBuildTemplateJsonTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x5d\x6f\x9b\x30\x14\x7d\xe7\x57\x58\x48\xe9\x53\x80\x6c\xad\xa6\x69\xaf\xfb\x19\x55\x44\x0d\xb8\xe1\x2a\xb6\xb1\x7c\x4d\xa6\x16\xf9\xbf\xef\x9a\xef\x4c\x0d\xcd\x9a\x17\x23\x9f\xc3\x39\xc7\x87\xeb\x74\x11\xa3\x5f\xac\x40\xe7\x86\x97\x67\x61\xf3\x8b\xb0\x08\x8d\x8e\x7f\xb1\xf8\x90\xfe\x4c\x0f\xf1\x3e\x1a\x38\x17\x6e\x81\x17\x52\x20\x41\xc3\x6b\xb4\xc9\xff\x60\xce\xcb\x52\x20\xe6\x67\xf1\x46\x88\x6e\xa5\xdc\xaf\x51\x14\xa5\x15\xee\x16\x6a\xc5\x69\x30\xbb\x42\x50\xb6\x27\xca\xe3\xea\x11\xe8\xf7\xfd\x14\xc4\xd8\xe6\x02\x21\x23\x25\x25\xc2\xf3\xf8\x56\xb7\x63\xaf\x8d\x65\x15\x58\x06\x9a\x1e\x5b\x5d\x71\x47\xac\x9c\x76\x30\x2d\x5a\x90\x15\xdb\xf9\x89\x3c\xae\x24\xe7\xde\x8c\x08\xa7\xc5\x5a\x48\x19\xef\x17\x00\xb4\x04\x1d\xa0\xe7\x58\x9d\x83\x6c\x62\x58\xe6\x94\xc9\x1a\xe7\x9a\x6c\x31\x48\xba\x2e\x38\xcb\xa6\x31\xe9\x6f\xda\x75\xc2\x32\xef\xe3\xe3\xa8\xe4\xf7\xb7\x3d\x5f\x41\x8a\xb5\x25\x36\xad\x2d\x7b\x84\x34\x83\xa5\xf7\xd9\x1a\xaf\x04\x3a\xd0\xbd\x6b\x20\xfd\x47\x9a\x3b\xc2\x6c\x15\x50\x56\xf7\x1e\xdd\x7b\xf6\xf0\xc0\x0a\x8e\x35\x4b\x33\xc5\x41\xa7\x58\x7f\xd0\xc5\x8e\x09\x5d\x85\xef\xb5\xf5\x49\x36\xea\xd9\x31\x1a\xd4\x82\x42\x28\x52\xa0\x14\x2d\xd2\x39\x5f\xe6\xc1\x79\xa1\x33\x0f\x1e\x2b\xda\x3d\x4d\x26\xdc\x98\xd4\x9d\xde\xbf\x54\x18\x96\x16\x8c\x0b\x50\x3f\x6e\x89\xa9\x4d\x38\xfd\x24\xd5\xaf\xc7\x69\x8c\x7b\xca\x38\xc2\xf3\x7d\xd2\x5c\xf5\xd2\x21\xca\xac\x3c\x1b\x72\xc5\xdf\xa9\x74\x51\xe0\x82\x5d\xdd\xbe\x5b\xbd\x5c\x5f\xd3\xed\x72\xe2\xab\x1b\xbb\xa5\xb8\x10\x3f\x51\x9c\x6f\xf9\x96\xda\x40\xfa\x2c\x5b\x3f\x01\x39\x57\x30\xf4\x01\xc9\xf7\x6f\x3f\x1e\x0f\xd5\xd3\xd3\xc2\x01\x8d\x8e\x6b\x62\x4d\xb5\x95\x8f\xa9\xe4\xf6\x24\x56\x32\x58\xe7\xc1\x79\xaa\xbb\x2d\x68\x76\xdb\x55\xa9\x0a\xf2\x09\xeb\xba\xf0\x44\x63\xfd\x6f\x76\x5a\x69\x88\xb8\x32\x1f\x25\x1e\xfe\xb2\x8e\x51\xe4\xa3\xbf\x01\x00\x00\xff\xff\x4f\xd6\x14\x86\x64\x05\x00\x00"

func dataAwsSimpleBuildTemplateJsonTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleBuildTemplateJsonTpl,
		"data/aws-simple/build/template.json.tpl",
	)
}

func dataAwsSimpleBuildTemplateJsonTpl() (*asset, error) {
	bytes, err := dataAwsSimpleBuildTemplateJsonTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/build/template.json.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsSimpleDeployMainTfTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x52\xc1\x8e\xdb\x20\x10\xbd\xe7\x2b\x46\x74\x8f\x5d\x27\xed\xb1\x52\xcf\xbd\xb5\x1f\x50\xad\x10\xc6\x24\x45\x8b\x01\xc1\x90\xca\xb2\xfc\xef\x1d\xa0\x16\xc1\xbb\xbd\x36\x39\xf9\xcd\x63\xde\xcc\x9b\xf7\x01\xbe\x29\xab\x82\x40\x35\xc1\xb8\xc0\x0f\x44\xf7\x11\x26\x07\xd6\x21\xa8\x49\x23\xcc\xc2\x26\x61\xcc\x72\x3a\xdd\x45\xd0\x62\x34\x0a\x98\xb6\xd7\x20\xb8\x9e\x18\xac\xdb\x03\x2c\x7e\x47\x2e\xa4\x54\x31\xf2\x57\xb5\xbc\x53\x8c\x4a\x06\x85\xff\x28\x06\x75\xd3\xce\x1e\x0a\x44\xe5\x56\xcc\xaa\xc0\x8f\x0f\x66\x7d\x60\x6a\x1b\x51\x58\xa9\x38\x2e\x3e\xd3\x61\x52\x57\x91\x0c\xc2\x57\x60\xf8\x79\x98\xb5\x0c\x8e\xc1\xe3\x8b\x98\x46\x4b\xd3\xf8\x34\x1a\x2d\x0f\xdd\xee\x5e\x72\xa9\xa7\xf0\x0e\xfc\x77\xed\x93\x0f\xee\xae\x27\x15\xca\xf4\x04\x9d\x00\xda\xf2\x59\xf5\x69\xa5\x87\x43\x6f\xca\xc6\x88\xd6\x6c\xe8\x69\x0d\x2f\xb4\x6a\x08\xe4\x5f\x47\xab\x38\x51\x68\x88\xa0\xa2\x4b\x41\x36\x7f\x53\xd0\xb8\xf0\x5b\x70\xc9\x33\x02\xbd\xaf\x93\x65\x0f\x6b\x9f\x75\xad\x1f\xdb\xf6\x5c\x5b\xee\xc7\x2c\x9a\x75\xc1\xa6\x57\xbf\xa9\x44\x35\x6d\x6f\x24\x17\x4b\x3f\x00\x5a\x1f\x9d\x74\xa6\x8e\xf7\xfc\xa9\x80\xd7\xe0\x66\xee\x5d\xc0\x02\x5e\x0a\x86\x6e\x47\x1a\x96\xad\xe5\xa3\x71\xf2\x35\x12\xf6\x93\x5d\x86\xf2\x3f\x5f\xd8\x0b\xd5\xb7\xac\xa6\xfe\x9b\xd8\x1b\x1b\xf7\x28\x3d\x1a\x48\x81\x83\xf6\x6b\xf7\x98\x75\xf1\xad\x4b\x5f\x2b\x77\x70\xbd\x7d\x0d\x1d\x79\xdc\xf5\xe9\xb2\x58\x88\x7b\xf2\x0f\x82\x3b\x5c\x4f\x92\xcf\xd3\x1f\x9d\x3a\xd7\x2d\x9f\xd6\xb7\x89\x18\x68\x9d\x21\x9f\xf3\x25\x3f\x46\x71\x23\x7f\xe1\x7b\x16\xe9\x82\xc1\xaa\x29\x2e\xa1\x4f\x08\x2c\x05\x53\x3d\xb8\x0b\x93\x0a\xf5\x17\xa2\xff\x72\x3e\x57\x89\x7d\xc7\xd2\xbc\x2e\xc0\x27\x1b\xb7\x73\x0e\xe8\x9f\x00\x00\x00\xff\xff\x5f\x73\x79\x4b\x5f\x04\x00\x00"

func dataAwsSimpleDeployMainTfTplBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsSimpleDeployMainTfTpl,
		"data/aws-simple/deploy/main.tf.tpl",
	)
}

func dataAwsSimpleDeployMainTfTpl() (*asset, error) {
	bytes, err := dataAwsSimpleDeployMainTfTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-simple/deploy/main.tf.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataCommonDevVagrantfileTpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\x6f\x6f\xdb\xbc\x11\x7f\xcf\x4f\x71\x55\xd2\x7f\x43\x24\xa5\xc1\x5a\x0c\x69\x62\x2c\x75\xd2\x25\x40\x97\x04\x76\xda\x37\xdb\xe0\xd2\x12\x2d\x71\x91\x48\x96\xa4\xdc\x7a\x8e\xbf\xfb\xee\x48\x39\xb6\xdb\x22\xcf\x03\x24\x30\x75\xe4\x1d\xef\x7e\x77\xf7\x3b\xee\xc1\x3f\x84\x12\x96\x7b\x51\xc2\x74\x01\x37\xde\xeb\x03\x28\x35\x28\xed\x41\x94\xd2\x3f\x63\x7b\x6c\x0f\xee\x6a\xe9\x00\xff\x7c\x2d\xe0\x0b\xaf\x2c\x57\x7e\x26\x1b\x01\xd5\xcf\xba\x30\xd3\x36\x9c\x2a\xc5\x5c\x34\xda\xb4\x42\x79\xd0\x33\x34\xe1\xc9\x04\x37\xa6\x91\x05\xf7\x52\xab\xdc\x09\x3b\x97\x85\xc8\xe0\xca\x83\xab\x75\xd7\x94\xe1\xd2\xa9\x80\x9a\xab\x32\xa5\xcb\x45\x99\xc1\x9d\x86\x56\x97\x72\xb6\x20\xb3\x68\x67\xeb\xfa\x03\xe8\x9c\x08\xb7\x9d\x19\x43\x82\x8c\xb1\x7e\x3b\x2b\xb4\x9a\xc9\xaa\xb3\xe2\x55\x72\x94\xbc\xa6\x88\x1e\xa2\xe8\x81\x01\xc4\x55\x36\x6f\xb3\xa9\xfe\x01\xa7\x90\xd4\xdc\xd5\xb2\xd0\xd6\xe4\xc6\x8a\x42\x3a\xf1\xee\xaf\x09\xc3\x83\x7b\x70\xa9\x1d\x06\xa0\x9a\x05\x28\xe1\xbf\x6b\x7b\xbf\xa3\xde\xcb\x20\x31\x56\xce\x11\x87\x49\x2f\x48\x0e\x40\x9a\x63\x48\x96\x4b\x02\x62\x22\xcd\x84\x97\xa5\x15\xce\xc1\x6a\xd5\x1b\x1e\x0b\xdf\x19\xe0\xe0\x16\xaa\x40\xfc\x66\xba\x29\x85\x85\x99\xd5\x2d\xe8\xce\x02\x59\x91\xaa\x82\x52\xa2\x43\x5e\x5b\x0c\x5f\x43\x3e\x8f\xd1\xed\xf8\x10\x0d\x4c\x7a\x03\x74\xa5\xe1\xbe\xce\xd6\x06\xf0\xc2\x03\x48\x72\x67\xe7\xb9\xc6\x04\xa5\x98\x82\xe4\x00\x0d\x00\xe8\xef\x98\x3c\x74\xb2\x37\x8a\xc7\x2a\xab\x3b\xb3\x25\x89\x9e\x5e\x28\x3e\xc5\x5c\x8f\xc7\x97\xc0\x2b\xca\x27\xe6\xf8\x3b\xb7\x25\x59\x77\x1a\x6b\xc0\x7b\x5a\xf6\x10\x60\xc0\x46\xa8\x52\xa8\x42\x0a\x17\xc2\x70\x1b\x77\x9d\xab\xb3\x5e\x7b\x12\x6d\x9d\x82\xb7\x9d\x88\x17\x7d\xd4\x9d\x2a\x43\x71\xc0\x3a\x7d\xf1\xeb\x95\x9c\x01\x57\x8b\xd7\x78\x6a\xf9\x3c\x94\x18\xc2\x02\x52\xe1\x72\xad\x31\x41\x89\xcb\x10\x6c\x78\xbe\xc2\x63\xb4\x8f\x79\x0d\x21\xe7\x9b\x53\x29\xa2\x83\xea\x8d\xd6\x26\x1b\xa2\xd4\x23\x62\x94\x91\xa7\xf1\x24\x63\x01\x46\x5c\xec\x1c\x35\x56\xcf\xa5\x23\x0f\x13\x57\x8b\xa6\xa1\xb4\xab\x46\x2a\x81\x18\x16\x25\xec\x2d\x51\x61\x05\x2f\x5e\xc0\x14\xeb\xab\xff\xcc\x5b\x2e\x55\xe6\xea\x24\x06\x83\x50\x51\x3c\xe8\x74\x80\xe0\x93\xe6\x25\xf0\xa6\x09\x35\x30\xb3\xbc\xa2\x06\x72\x50\x0b\x2b\x42\xdc\x88\xc2\x0e\xc0\xd9\x06\x92\xf5\x69\xc2\x85\x8a\x6e\xa3\x1d\x10\xa1\xc8\x7b\xc9\x83\x15\x78\xcb\x6a\xf5\x5b\x0f\xae\x94\xf3\xe4\xc0\xb4\x93\xd8\x91\x42\xcd\xa5\xd5\x8a\xb4\xfe\x6c\xe4\xfb\xae\xb0\xd2\xf8\x09\x16\x1a\x43\xdb\x8c\x6d\x09\x30\x27\x27\x27\xe3\xe1\xe8\xea\xf6\x8e\xed\x3d\xcb\xa7\x52\xe5\x04\x0d\x63\x4e\x78\x48\x89\x75\x3a\xd5\x2f\x85\xb5\xe2\x87\x0c\x4b\x23\x8d\x98\x71\xd9\xf4\x62\x6f\x79\x81\x15\x83\x2b\x6d\x5f\xbd\x86\x25\x15\x73\xa3\x0b\xde\x60\x35\x76\xb6\x10\xc4\x04\xa7\xfb\x6f\x36\x62\xf2\x4b\xe9\xd3\xfd\x23\x12\x89\xa2\xd6\x90\x5c\x8c\x46\x37\x23\xe0\x1e\xf6\x97\x1b\xa5\xd5\xf1\xfe\x32\x9e\x5d\xbd\x87\x4f\x1c\x1b\xbf\xd1\x95\x3b\xa6\x4c\x61\x6b\x08\x03\x54\x4d\xd4\x84\x36\xc7\x8d\xdc\x2d\x1c\xfe\xc0\x03\xf8\xe0\x9b\x82\xa3\x43\xb6\x62\xe8\x9d\x81\x97\xc1\x39\x48\xf6\x97\x1f\xce\xc6\x97\x93\xf1\xcd\xe7\xd1\xf0\x62\x95\x90\xe0\xd3\xd5\xf5\xc5\xf5\xcd\x2a\x79\x09\xe8\x03\x63\x5a\x50\x08\xb8\xf1\xf7\x04\x8e\x06\x2f\xde\xa0\x39\x34\x5a\x61\xe5\xa5\x3e\xde\x37\x80\x1c\xd3\x99\xab\xae\x69\xde\xc3\x8a\xe9\x26\x28\xc4\x30\xfe\x45\x27\xfe\x03\xa8\x4c\x5b\x0c\xe9\xf1\x9f\xfc\x5e\x00\xc2\x86\x8d\xe9\x6b\x8c\xef\x6b\xdf\xcb\x80\xad\xf7\x15\x2a\x8d\x3d\x19\x29\xa5\x09\x8c\x42\xe4\x89\xbc\x47\x82\x50\xdd\xd1\x2c\xd6\xee\x2e\x61\xc0\x00\xbd\xa8\x75\x2b\xd6\x0c\x94\x67\x94\x37\x5b\xd0\x95\xc3\xbe\x57\x89\x04\x88\x24\x42\x31\x22\x7a\x18\x03\x86\x22\x15\xc3\xee\x7d\x16\x01\x4c\x3e\x3b\x71\x7e\x3d\xc6\x3c\x27\x90\x0b\x5f\xe4\xe8\x15\xfd\x97\x93\x58\x5a\x30\xd8\x8a\x15\x7d\x53\x6c\x9d\xb0\x2d\xc5\x07\x70\x1d\xf2\xb9\x17\x02\x52\xfe\x47\x66\xd0\x80\x16\x51\xa1\x1f\x38\x84\x04\x20\x17\x7b\x6e\x3d\x9b\x49\x4c\x41\x03\xc9\x59\x19\xe8\x8c\x1b\x4f\x5b\x46\x3b\x89\x9c\x4b\x04\x86\xa3\x08\x3a\x43\xec\xa1\xaa\x2c\xcb\x12\x26\x7e\x18\x6d\x3d\x9c\x5f\x7c\xb8\x3a\xbb\x9e\x7c\x1c\xdd\x5c\xdf\x5d\x5c\x9f\x9f\x2a\xad\x24\xd1\x09\x2f\xbc\x9c\x0b\xb6\xbe\x13\x0d\xa6\x48\x90\xd1\x04\xfa\xbb\xf8\x65\x47\xf6\xfd\x96\x2e\xc0\x2c\x7c\x8d\x1c\xe5\xf4\xcc\x23\x43\x8a\x14\x9b\xcc\x08\xeb\xc9\x8d\xdf\xc8\xd2\x42\xb7\x2d\x36\x20\x19\xc2\xa2\x53\x8e\xfc\x4a\x6b\xef\x8d\xdb\x5c\x52\x96\x29\xed\x23\xf6\x31\xa4\x45\xb8\xc7\xf0\x63\xad\x70\x1e\xfd\x37\x37\xb5\x79\x9b\xbe\xcd\xde\x31\x1a\x48\xa2\x75\x54\x13\x38\x81\xad\xf8\xd6\x61\x95\x94\xf4\x89\x13\x71\x4e\xb4\x92\x74\x8a\x77\x94\x13\x4f\x13\x1c\xf7\x0c\x2f\xee\x91\xc4\x5d\x82\xca\xa1\xde\x1d\xb2\x16\x4d\xfb\x9f\x63\xcb\x76\x82\xbe\x17\x8b\x1e\x8e\x27\x50\x0a\x49\xe9\xa9\x88\x12\x73\x7b\x79\x0b\x5f\x86\x63\x77\x80\xa3\x9e\x17\x35\x8e\x7e\x4a\x8c\x46\x77\xec\xa3\x1f\x21\x3d\x4f\xc0\xcb\x83\xe6\x11\x50\xcc\xc8\x09\xd3\xfe\x3b\xc5\xe7\x45\x1a\x64\xff\xc6\x62\x99\xfe\xcf\x42\x85\xfd\xd3\x0a\x5b\x60\x49\xf3\x9e\x08\x53\x9c\xdd\x14\x39\x7e\xd3\x29\xdc\x8a\x8b\x80\x5f\x5b\xd8\x05\x16\x4e\x5c\x2f\xdc\xb7\x26\x2e\x67\xa6\x8d\x8b\xaa\x8c\xbf\x44\xbb\xc4\x2f\xf1\xcb\x54\x78\xf2\x97\x40\x87\xba\xc5\x54\x09\x1b\x82\xa1\x3e\xf4\xad\x61\xe1\xba\xd4\x8d\x21\x64\xf7\x38\xcf\x31\xb2\x62\x7d\x50\xdb\x2a\xef\xa3\x44\x30\x1e\xc8\xf8\x23\x0a\xed\x1c\x1e\xcf\x99\x9a\x5b\xc8\x3b\x47\xe4\x85\xac\x18\xc8\x77\xbd\x19\xdd\xd8\x6e\xe4\x08\xce\x0e\xa4\xb6\x8d\xcd\xd6\xe3\x96\x63\x41\x61\x15\x8a\xf0\x3a\x28\xf3\xc3\xc3\xc3\xb4\x44\x9a\xee\x9a\xf8\xf8\x62\x0c\xab\x04\xd9\xfe\xec\xf6\x6c\x78\x79\x31\xbc\xb9\xfe\xb8\xdd\xb8\x4f\x18\x5a\x93\x4e\xb0\xb2\xcd\x7e\xec\x37\x6f\x55\x76\xf2\x45\x5a\xdf\xf1\x26\xbc\xd3\xfe\x72\xfc\xb7\xc3\x01\x66\xe5\x5c\x17\x1d\x8d\xac\x91\xc6\x07\xe5\x0e\x93\xd1\x8c\x3b\x39\x7f\x7c\x53\xed\xec\xe5\x83\xf0\x2c\x1a\xc5\xda\x0f\x53\x38\x70\x9d\x28\x49\x29\x7f\xd4\x1a\xb0\x93\x7c\xeb\xd6\x01\xdb\x84\xc8\xfa\xd9\xf6\xff\x00\x00\x00\xff\xff\x89\x79\x25\x50\x56\x0b\x00\x00"

func dataCommonDevVagrantfileTplBytes() ([]byte, error) {
	return bindataRead(
		_dataCommonDevVagrantfileTpl,
		"data/common/dev/Vagrantfile.tpl",
	)
}

func dataCommonDevVagrantfileTpl() (*asset, error) {
	bytes, err := dataCommonDevVagrantfileTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/common/dev/Vagrantfile.tpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/aws-simple/build/build-php.sh": dataAwsSimpleBuildBuildPhpSh,
	"data/aws-simple/build/template.json.tpl": dataAwsSimpleBuildTemplateJsonTpl,
	"data/aws-simple/deploy/main.tf.tpl": dataAwsSimpleDeployMainTfTpl,
	"data/common/dev/Vagrantfile.tpl": dataCommonDevVagrantfileTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"aws-simple": &bintree{nil, map[string]*bintree{
			"build": &bintree{nil, map[string]*bintree{
				"build-php.sh": &bintree{dataAwsSimpleBuildBuildPhpSh, map[string]*bintree{
				}},
				"template.json.tpl": &bintree{dataAwsSimpleBuildTemplateJsonTpl, map[string]*bintree{
				}},
			}},
			"deploy": &bintree{nil, map[string]*bintree{
				"main.tf.tpl": &bintree{dataAwsSimpleDeployMainTfTpl, map[string]*bintree{
				}},
			}},
		}},
		"common": &bintree{nil, map[string]*bintree{
			"dev": &bintree{nil, map[string]*bintree{
				"Vagrantfile.tpl": &bintree{dataCommonDevVagrantfileTpl, map[string]*bintree{
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

