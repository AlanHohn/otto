// Code generated by go-bindata.
// sources:
// data/aws-vpc-public-private/deploy/main.tf
// data/aws-vpc-public-private/deploy/module/main.tf
// data/aws-vpc-public-private/deploy/module/outputs.tf
// data/aws-vpc-public-private/deploy/module/variables.tf
// data/aws-vpc-public-private/deploy/variables.tf
// DO NOT EDIT!

package consul

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAwsVpcPublicPrivateDeployMainTf = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x8f\xd1\x6a\xc3\x20\x14\x86\xef\xf3\x14\x22\xbb\xd5\x35\x09\xeb\x76\xb3\x67\x09\x46\x0f\xe3\xb0\x46\x45\xa3\xdb\x28\x7d\xf7\x69\xb4\xc8\x58\x29\xbd\x4c\x6e\xc2\xf9\xff\x4f\x3d\x9f\x75\x26\xa2\x02\x47\xa8\xf8\xf2\x94\x9c\x3b\x92\x3e\x21\x25\x78\x3f\x7d\xc2\x0f\x79\x27\xf4\xe9\x1c\x85\xe3\xa9\x9e\x5a\x7e\xa1\x1b\xe8\x41\x3a\x58\xff\x83\x2d\xaf\xa0\x83\x0f\x34\xba\x41\x65\x4e\xe5\xa5\xeb\x16\xa3\xc2\x09\x08\x95\x46\xfb\x70\x62\xfd\x75\x0b\x6f\x82\x93\x90\xcf\xf0\xe7\xc2\xd0\x6e\x2b\x50\x2b\xf8\xce\x79\x5f\x2e\xb7\x0e\xa3\x58\x81\xa1\xdd\xc2\x03\x3f\xf0\x9e\xbf\x95\x4e\x2c\x98\xc3\xf4\x63\x0a\x86\x97\x71\x9e\x8f\xa5\x48\xbb\x31\x2d\x16\x68\x3b\xa5\x64\xca\xc9\xd5\x2d\xcc\x1a\x56\x86\xaa\x11\x35\xaa\xef\x55\x2e\x5a\xf9\x07\x4a\xf3\x84\xea\xa6\xda\xf0\xb8\xda\x70\x47\xed\x75\x87\x6a\xe3\xe3\x6a\xe3\x1d\xb5\xe3\x0e\xd4\x7e\x03\x00\x00\xff\xff\xce\xa6\x97\x92\x13\x03\x00\x00"

func dataAwsVpcPublicPrivateDeployMainTfBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsVpcPublicPrivateDeployMainTf,
		"data/aws-vpc-public-private/deploy/main.tf",
	)
}

func dataAwsVpcPublicPrivateDeployMainTf() (*asset, error) {
	bytes, err := dataAwsVpcPublicPrivateDeployMainTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-vpc-public-private/deploy/main.tf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsVpcPublicPrivateDeployModuleMainTf = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x51\xcd\x6e\xf3\x20\x10\xbc\xfb\x29\x10\xfa\xae\xf6\xe7\xb4\x4a\x6f\x3d\xf5\xde\x4b\x8f\x55\x85\x08\x26\x11\x8a\xcd\xa2\x65\x49\x1b\x45\x7e\xf7\x82\x21\x3f\x56\xd3\x56\x91\x6a\x9f\x98\x9d\xd9\x19\x06\xd4\x1e\x02\x2a\xcd\xb8\x7c\xf7\xc2\x58\x4f\xd2\x2a\xcd\x19\x57\x60\x7d\xe8\x39\x3b\x54\x2c\x7e\x72\x30\xec\x91\xf1\x7f\x87\x9d\xc4\x26\x1e\x46\x3e\xc1\x47\xbe\xa0\xbd\xd3\x89\x40\x77\x8d\x1f\x64\xdf\xe7\xf1\x56\xef\x85\x95\x83\x3e\x4b\x23\x52\x27\xa4\xe8\x7d\x58\x59\x4d\xc2\x74\x67\x46\x86\x6a\xd3\x15\xca\xce\x29\xe1\xb5\x0a\x68\x68\x2f\x36\x08\xc1\x45\xba\x8f\xfc\xd7\x28\x48\x99\xe7\xc3\x26\xe7\x6e\x92\xfe\x6d\x5a\xe0\xd0\xec\x24\x69\x61\xdc\xd9\xa4\x60\xb5\x71\xd1\x65\x62\x91\xdc\xf8\x72\xd7\xf4\x3d\x97\xd4\x79\x1b\xcb\x2a\x63\x3b\xfd\x51\x62\x8d\xd5\x58\x55\xf3\xf2\xe6\x41\xbe\x54\x68\x7f\x5b\xd9\x69\xaf\xd0\x38\x32\x60\x13\xef\xa5\xac\x63\xd3\x3a\xb6\x06\x64\x4f\xdf\x49\x53\x49\x97\x25\xc6\x73\x6e\xb0\xbc\xd2\x26\x26\xbd\xbc\xde\x1a\x61\x10\x0e\x90\xa2\x64\x71\x42\x09\x8e\xd8\xc3\x72\x79\xbf\x3c\xe1\x0e\x81\x40\x41\x9f\xf6\x87\xce\xf1\xd3\x40\x99\x0e\xc5\xaa\x07\xb5\xcd\x0f\xd2\x36\xd3\xff\xbf\x2d\xd5\x8f\x7f\xef\x4f\xea\x76\x7f\xfd\x93\x7d\x7b\xc5\xbe\xbd\x6a\x5d\x2f\x6e\x71\x1e\xab\xcf\x00\x00\x00\xff\xff\x0e\x96\x87\x72\x5b\x03\x00\x00"

func dataAwsVpcPublicPrivateDeployModuleMainTfBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsVpcPublicPrivateDeployModuleMainTf,
		"data/aws-vpc-public-private/deploy/module/main.tf",
	)
}

func dataAwsVpcPublicPrivateDeployModuleMainTf() (*asset, error) {
	bytes, err := dataAwsVpcPublicPrivateDeployModuleMainTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-vpc-public-private/deploy/module/main.tf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsVpcPublicPrivateDeployModuleOutputsTf = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0c\xc0\x41\x0a\x05\x21\x08\x00\xd0\x7d\xa7\x10\xf9\xeb\x6e\xf0\xcf\x12\x52\x2e\x82\x30\x49\x6d\x16\xd1\xdd\x67\xde\x0c\xd7\x70\x40\x6a\x6d\xb1\x19\xc2\x49\xf0\xd9\x34\x82\xe1\x0f\xf8\x3b\xf4\x58\xe9\x62\x4e\x52\x39\xd7\x29\x16\x23\xeb\xea\x9b\x9c\x4b\xd7\x8b\xe9\xa6\x37\x00\x00\xff\xff\x7c\x4c\xbb\x14\x45\x00\x00\x00"

func dataAwsVpcPublicPrivateDeployModuleOutputsTfBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsVpcPublicPrivateDeployModuleOutputsTf,
		"data/aws-vpc-public-private/deploy/module/outputs.tf",
	)
}

func dataAwsVpcPublicPrivateDeployModuleOutputsTf() (*asset, error) {
	bytes, err := dataAwsVpcPublicPrivateDeployModuleOutputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-vpc-public-private/deploy/module/outputs.tf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsVpcPublicPrivateDeployModuleVariablesTf = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\xce\xc1\xca\x83\x30\x0c\x07\xf0\x7b\x9f\x22\xf4\xee\x23\x7c\x87\x0f\x77\x98\x87\x81\x20\xec\x1e\x35\xdb\xc2\x34\x2d\x4d\x95\x8d\xb1\x77\x9f\x95\xc1\x40\x6c\x4f\xa5\xff\xfe\x92\xff\x8c\x81\xb1\x1d\x08\x2c\x8e\x6c\xe1\x65\x60\x39\x3d\x69\x17\xd8\x47\x76\x02\x7f\x60\xff\x4f\x15\x44\x07\x93\x12\x5c\x5c\x80\xd2\x89\x4e\x83\x35\x6f\x63\x7e\x9a\xa5\xa7\x47\xc6\x57\x29\x5b\x69\xbc\x11\x08\x8e\xb4\xc1\x77\x7a\x16\xeb\xf3\xbe\x6f\x9a\x23\x2c\x5f\xf6\xa4\x0f\x3c\x63\xa4\x82\x7d\x6e\x77\x9d\xaa\xa3\x2a\x5f\x25\xdd\x52\x03\x16\x8d\x28\xdd\x76\x96\x4e\xad\x50\x2c\xb8\xcf\xd5\x58\x73\xa8\x0e\x1b\x37\xfb\x2e\x8f\xce\x75\xf9\x15\x9f\x00\x00\x00\xff\xff\x28\x6f\x5b\x11\x6a\x01\x00\x00"

func dataAwsVpcPublicPrivateDeployModuleVariablesTfBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsVpcPublicPrivateDeployModuleVariablesTf,
		"data/aws-vpc-public-private/deploy/module/variables.tf",
	)
}

func dataAwsVpcPublicPrivateDeployModuleVariablesTf() (*asset, error) {
	bytes, err := dataAwsVpcPublicPrivateDeployModuleVariablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-vpc-public-private/deploy/module/variables.tf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataAwsVpcPublicPrivateDeployVariablesTf = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x90\x41\x4b\x03\x31\x10\x85\xef\xf9\x15\x43\x7a\xae\xff\xc0\x43\x51\xd0\xde\x8a\x0b\x7a\x0c\x69\x3a\xad\xc1\x98\x84\x99\xb8\x8b\x88\xff\xdd\x31\x2b\x48\x17\xb2\x97\xdd\x21\xb7\x79\xef\xcb\xbc\xb7\xd9\xae\x30\x6a\x03\x3b\xe7\x90\x19\xf6\xf1\x9c\xd4\x3a\x4c\xd5\x5b\xf2\xf6\x18\x10\xb4\x1d\xd8\xd8\xfa\x81\x79\xc3\x4f\x0d\x5f\x0a\x64\x4e\xc8\x8e\x7c\x2e\x3e\x45\xb8\x05\xfd\x77\x81\x08\xe0\x9c\x08\x76\x2f\x9d\x56\xdf\x53\x0a\xa3\x23\x2c\x33\x94\xae\x0a\x66\x28\x84\x17\x91\x36\xdc\x4f\x75\x09\xc3\x2b\x12\xc2\x20\xcf\x87\x00\x29\x23\xd9\x82\x37\x15\xb4\xb0\x1b\x69\xfa\x01\xa3\xf0\x02\x30\x96\xe2\xe3\x85\x17\x23\xff\xb3\x49\x6a\x13\xed\x3b\xb6\xba\xe9\x1e\x6b\x31\x55\x72\xdd\x0a\x7f\x1c\x23\x96\x6d\x26\xdf\x4b\xd4\x86\xff\x30\x6e\x61\x14\x4f\x08\x7d\x76\xc6\x9f\x1a\xce\xe7\xc3\x1d\xec\xef\x7f\x1d\x3f\x01\x00\x00\xff\xff\x05\x04\xf1\x50\xb0\x02\x00\x00"

func dataAwsVpcPublicPrivateDeployVariablesTfBytes() ([]byte, error) {
	return bindataRead(
		_dataAwsVpcPublicPrivateDeployVariablesTf,
		"data/aws-vpc-public-private/deploy/variables.tf",
	)
}

func dataAwsVpcPublicPrivateDeployVariablesTf() (*asset, error) {
	bytes, err := dataAwsVpcPublicPrivateDeployVariablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/aws-vpc-public-private/deploy/variables.tf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/aws-vpc-public-private/deploy/main.tf": dataAwsVpcPublicPrivateDeployMainTf,
	"data/aws-vpc-public-private/deploy/module/main.tf": dataAwsVpcPublicPrivateDeployModuleMainTf,
	"data/aws-vpc-public-private/deploy/module/outputs.tf": dataAwsVpcPublicPrivateDeployModuleOutputsTf,
	"data/aws-vpc-public-private/deploy/module/variables.tf": dataAwsVpcPublicPrivateDeployModuleVariablesTf,
	"data/aws-vpc-public-private/deploy/variables.tf": dataAwsVpcPublicPrivateDeployVariablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"aws-vpc-public-private": &bintree{nil, map[string]*bintree{
			"deploy": &bintree{nil, map[string]*bintree{
				"main.tf": &bintree{dataAwsVpcPublicPrivateDeployMainTf, map[string]*bintree{
				}},
				"module": &bintree{nil, map[string]*bintree{
					"main.tf": &bintree{dataAwsVpcPublicPrivateDeployModuleMainTf, map[string]*bintree{
					}},
					"outputs.tf": &bintree{dataAwsVpcPublicPrivateDeployModuleOutputsTf, map[string]*bintree{
					}},
					"variables.tf": &bintree{dataAwsVpcPublicPrivateDeployModuleVariablesTf, map[string]*bintree{
					}},
				}},
				"variables.tf": &bintree{dataAwsVpcPublicPrivateDeployVariablesTf, map[string]*bintree{
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

