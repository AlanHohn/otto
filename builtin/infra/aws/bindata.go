// Code generated by go-bindata.
// sources:
// data/vpc-public-private/main.tf
// data/vpc-public-private/outputs.tf
// data/vpc-public-private/variables.tf
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"reflect"
	"strings"
	"unsafe"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	var empty [0]byte
	sx := (*reflect.StringHeader)(unsafe.Pointer(&data))
	b := empty[:]
	bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	bx.Data = sx.Data
	bx.Len = len(data)
	bx.Cap = bx.Len

	gz, err := gzip.NewReader(bytes.NewBuffer(b))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataVpcPublicPrivateMainTf = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x92\xcf\x6a\xe3\x30\x10\x87\xef\x7a\x8a\x41\xd9\xe3\xe2\xdd\x84\x65\x6f\x3d\xf5\xd0\x53\xff\x1c\x4a\xaf\x46\x96\x06\x5b\x44\x91\xc2\x68\xec\x60\x42\xde\xbd\x92\x65\x37\xb4\x29\x69\xa1\xf2\x6d\xf4\x63\xe6\xfb\xc6\x5a\xc1\x1d\x7a\x24\xc5\x68\xa0\x19\xe1\x91\x39\xfc\x06\x13\xc0\x07\x06\x34\x96\x61\xa7\x7c\xaf\x9c\x1b\x2b\x21\xf6\x14\x06\x6b\x90\x40\xaa\x43\x94\x70\x14\x90\x8e\xd2\x1a\x63\xac\xb7\x38\xc2\x0d\xc8\x5f\xc7\x41\x51\x95\xae\xeb\x73\xfd\x24\xa7\x60\x44\x4d\xc8\x97\xc1\x73\x7d\x0e\x12\xb6\x36\xf8\xf7\xa1\x52\x4b\x81\x93\x10\x2b\xb8\x57\xd6\xc3\xcb\xd3\x2d\x70\xa7\x18\x0e\xd6\x39\xd0\xc1\x73\xae\xe2\x80\x34\x72\x67\x7d\x5b\x09\xc2\x18\x7a\xd2\x38\xf1\xd6\xc3\x5e\x4b\x90\xbb\x14\x5a\xd0\xb5\x35\x54\x37\x2e\xe8\x6d\x1e\xb6\xfe\x5b\x4d\xdf\x9f\xf5\x7f\x29\xa6\x7b\x56\x6d\x9c\xa3\xf9\x3c\xa8\x1d\xe6\x60\x48\x3b\x2a\xa4\xa7\x82\xf3\xdc\x21\xec\xfb\xc6\x59\x0d\xb1\x6f\x3c\x32\xd8\x08\x87\x0e\x09\x61\x41\x88\x19\xd0\xa3\xce\x6b\xe6\x90\xb8\x11\xac\x67\xa4\x1c\x9e\xf8\xdb\xf0\x01\xb7\x74\x4a\xc4\xa5\xf3\xc2\x9c\x2c\x6a\x6b\xca\x72\x66\xab\x2a\x3b\x55\xd6\xcc\xeb\xfb\xc4\x6a\x9d\xac\x36\xff\xae\x5b\xcd\x63\x2e\xbc\xc8\x0e\xe9\x71\x5c\x11\x9b\xfe\x81\xa2\x45\x48\x39\x08\xde\x8d\x5f\x5a\x95\xbe\x3f\xd2\xda\x7c\x47\x6b\x9e\xf3\xe6\xf5\x1a\x00\x00\xff\xff\x56\xbd\x6c\x6e\xf1\x02\x00\x00"

func dataVpcPublicPrivateMainTfBytes() ([]byte, error) {
	return bindataRead(
		_dataVpcPublicPrivateMainTf,
		"data/vpc-public-private/main.tf",
	)
}

func dataVpcPublicPrivateMainTf() (*asset, error) {
	bytes, err := dataVpcPublicPrivateMainTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/vpc-public-private/main.tf", size: 753, mode: os.FileMode(420), modTime: time.Unix(1440697362, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataVpcPublicPrivateOutputsTf = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\xb1\x6e\x83\x30\x14\x45\x77\xbe\xe2\x8a\x74\xa4\xfc\x41\x97\x2e\x1d\xbb\x74\x8f\x1e\xf6\x23\x58\x31\x36\xb2\x9f\x89\xa2\x28\xff\xde\x07\x56\x54\x55\x6a\x54\x36\x7c\xef\x39\xbe\x82\x03\x3e\x38\x70\x22\x61\x8b\xe1\x8a\x4f\x91\xd8\xc1\x46\x84\x28\x60\xeb\x04\x33\x85\x42\xde\x5f\xfb\xe6\xd0\x1c\xf6\x1c\x25\x73\x46\x2c\xb2\x14\xc9\xa0\x0c\x99\x18\x33\xcb\x14\x2d\xc6\x98\x20\x89\x42\x1e\x39\x25\x17\x4e\xb0\x24\x84\x31\xc5\x19\x5f\x7a\x42\x9a\xcf\xaa\x19\xc8\x9c\xe1\x82\xba\x76\xa1\x4c\x24\xb8\x38\xef\x31\xf0\x66\xaf\x1e\xcb\x8b\x8f\xd7\xdc\x61\x2c\x52\x12\x6b\x7f\x4c\x94\x25\x15\xb3\xbd\xaa\xc5\x4c\x14\x4e\xdc\x81\xc5\xd4\x75\xef\x6c\x48\x71\xc4\x71\xdf\xe4\xe6\x25\x26\xa1\x60\x1e\x27\x1a\xad\xe4\x8b\xae\xdf\xfc\xf5\xea\xa8\xfa\x60\xc4\xc5\xd0\xc1\xd0\xee\xcd\x53\x2c\xde\x6e\x5b\x84\xce\x1c\xe0\x1e\xb0\xc6\x98\xa3\x75\xa3\x63\xdb\x37\x4d\xfd\x04\x68\x13\x9f\x14\x6f\x71\x6b\xa0\xcf\x7e\x03\xde\xd0\xbe\xdc\x56\x4a\x3d\x5d\xf2\xb1\x16\xee\x6d\x73\xff\x81\xd6\xc5\x1c\x9d\xfd\x03\xda\x00\x0d\xfb\x99\x5c\xe8\x9d\xfd\x4d\xe5\x32\x04\x96\xd7\xa5\x0c\xde\x99\x27\x70\xed\xf4\xb5\xf3\xd4\x90\xdc\xaa\x3f\xfd\x1f\x45\x2d\x3d\x1c\xdf\x01\x00\x00\xff\xff\x0f\x07\x6b\x1b\x2c\x02\x00\x00"

func dataVpcPublicPrivateOutputsTfBytes() ([]byte, error) {
	return bindataRead(
		_dataVpcPublicPrivateOutputsTf,
		"data/vpc-public-private/outputs.tf",
	)
}

func dataVpcPublicPrivateOutputsTf() (*asset, error) {
	bytes, err := dataVpcPublicPrivateOutputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/vpc-public-private/outputs.tf", size: 556, mode: os.FileMode(420), modTime: time.Unix(1440697246, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataVpcPublicPrivateVariablesTf = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xcc\x31\x0e\x02\x21\x10\x85\xe1\x9e\x53\xbc\x70\x00\x6f\x60\xb1\x57\x70\x0b\xcb\xcd\x88\x4f\x25\x12\x21\x33\x44\x62\x8c\x77\x17\xe9\x2c\x74\x27\xd3\xbd\x3f\xdf\x5d\x34\xca\x21\x11\x5e\x9a\x2d\x12\x02\xcd\x96\x2b\x1f\x1e\x4f\x87\x7e\x47\x5a\xd0\x58\x6a\xcc\x37\x6c\xe1\xa7\x11\xa0\x07\x38\x65\xc5\xb4\x9f\xbd\x7b\x39\xf7\xad\x18\x83\xb2\xfe\x51\xe6\x11\xac\x28\xca\x73\xcf\x7f\x08\xbb\x31\xa2\x5d\xa8\x44\xeb\x1f\x53\x42\x2e\x54\xa9\xdc\x7c\xb0\x77\x00\x00\x00\xff\xff\x90\xae\x4e\x91\xd8\x00\x00\x00"

func dataVpcPublicPrivateVariablesTfBytes() ([]byte, error) {
	return bindataRead(
		_dataVpcPublicPrivateVariablesTf,
		"data/vpc-public-private/variables.tf",
	)
}

func dataVpcPublicPrivateVariablesTf() (*asset, error) {
	bytes, err := dataVpcPublicPrivateVariablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/vpc-public-private/variables.tf", size: 216, mode: os.FileMode(420), modTime: time.Unix(1440697193, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/vpc-public-private/main.tf": dataVpcPublicPrivateMainTf,
	"data/vpc-public-private/outputs.tf": dataVpcPublicPrivateOutputsTf,
	"data/vpc-public-private/variables.tf": dataVpcPublicPrivateVariablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"vpc-public-private": &bintree{nil, map[string]*bintree{
			"main.tf": &bintree{dataVpcPublicPrivateMainTf, map[string]*bintree{
			}},
			"outputs.tf": &bintree{dataVpcPublicPrivateOutputsTf, map[string]*bintree{
			}},
			"variables.tf": &bintree{dataVpcPublicPrivateVariablesTf, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

