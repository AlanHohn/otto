// Code generated by go-bindata.
// sources:
// data/vpc-public-private/main.tf
// data/vpc-public-private/nat_user_data.conf.tftpl
// data/vpc-public-private/outputs.tf
// data/vpc-public-private/variables.tf
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataVpcPublicPrivateMainTf = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\x6d\x8b\x1b\xb7\x13\x7f\xef\x4f\x31\x6c\x0e\xfe\x77\xfc\xcf\xeb\xb3\x1b\xf2\xa2\xa5\x85\x4b\x52\xda\x40\x93\x2b\x24\xb4\xd0\x10\x16\x79\x77\x6c\xab\xa7\x95\x16\x49\xeb\xab\x7b\xf8\xbb\x77\xf4\xb0\xf6\x6a\xed\x7b\x0a\x6d\xa0\xf5\xc1\x61\x4b\x23\xcd\xd3\x6f\x7e\x33\x7a\x06\x3f\xa0\x44\xcd\x2c\x56\x30\xdf\xc0\x95\xb5\xea\x1c\x2a\x05\x52\x59\xc0\x8a\x5b\xa8\x99\x6c\x99\x10\x9b\x7c\x34\x6a\xb4\x5a\xf3\x0a\x35\x64\xec\xc6\x64\x70\x3b\x02\x60\x65\x89\xc6\x14\xd7\xb8\x81\x6f\x21\x3b\xb9\x5d\x33\x9d\xd3\x66\xb1\x5f\xdf\x66\x24\x66\xb0\xd4\x68\x0f\xc5\xf6\xeb\x5e\x4c\xe3\x92\x2b\x09\xee\x93\x88\x85\x75\x12\xd9\x8e\x46\xcf\xe0\x2d\xe3\x12\x7e\xf9\xf9\x15\xd8\x15\xb3\x70\xc3\x85\x80\x52\x49\xeb\x56\x71\x8d\x7a\x63\x57\x5c\x2e\xf3\x91\x46\xa3\x5a\x5d\xa2\xb7\xb6\x58\x37\x65\x06\x59\x4d\x42\xc1\xf0\x92\x57\xba\x98\x0b\x55\x5e\x3b\x55\xd3\x8b\xdc\xff\x4d\xa6\x2f\xb2\x11\xed\x5a\xb6\x34\x70\x0b\xef\x58\x8d\x6e\x5b\x51\x54\x32\xd8\x06\xf5\x1f\x56\x08\x4d\x3b\x17\xbc\x04\xd3\xce\x25\x5a\xe0\x06\x6e\x56\xa8\x11\x3a\x95\xc6\x19\x24\xb1\x74\x41\xb5\x8a\xec\x44\xe0\xd2\xa2\x76\xc2\xde\xde\xa5\x1a\x98\x17\x6e\x22\x0b\xc3\xcd\xc1\x46\x00\xb2\xba\xe0\x15\x1c\x7c\x7c\x74\xa2\x5b\xb9\x73\x2a\xe7\x95\x8f\x60\xe2\xd8\xf0\x88\xf7\x72\x4a\x5e\xce\x9e\x07\xd9\x9a\x35\x45\x50\x58\xf0\xa6\x50\xb2\x10\xac\x95\xe5\x8a\x64\xad\x6e\x71\xe4\x65\x06\xa1\xe8\xec\xeb\x07\x43\xf3\x35\xe1\xe7\x9e\x68\xf8\x44\x31\xdd\x45\x81\x09\x50\x52\x6c\x1e\x0c\x45\xb8\xf7\x48\x2c\x1e\xe7\x7e\xe7\xf1\x2c\x7a\xec\xf7\x9f\xc1\x6b\x85\x46\xfe\xcf\x01\xdb\x92\x31\x64\x2b\x27\x8f\x2f\x7f\x83\x1b\x04\xc1\x64\x45\x36\x9e\xc3\xbc\xb5\x31\xc7\x93\xd4\x3b\x13\x2f\x91\x18\x52\x3b\x47\x4a\x35\x69\xf3\xf5\x43\x00\x64\xd2\x5d\xb5\x50\x1a\xbe\xff\xe9\xa5\x89\x12\x6c\x2e\xd0\x7d\xd5\xaa\xb5\x98\xfb\x1b\xd8\x9a\x71\xc1\xe6\x5c\x70\xbb\x29\xfe\x54\x12\xf7\x3e\x05\x45\x79\x50\x9f\x1f\x08\x6e\xb3\xe3\x79\xe9\x82\x15\x13\xf3\xa6\xc3\x5b\xa8\x44\xee\x4c\xf0\xfa\xe9\xa0\xfb\xfe\x7f\x58\x92\xf8\x0d\xdb\x78\x63\xed\x10\xd3\x83\x9c\x74\xe8\x2d\xe2\xa1\x01\x50\x63\x6a\xee\x48\x0b\xd9\x93\xde\xe6\xed\x28\xbc\x1d\x4f\xba\x08\xa2\x07\x01\x0f\xc3\x5c\x77\x25\x7c\x91\xc5\xed\x68\x6b\x72\xe1\xd0\x91\x2e\xcc\xf1\xfe\xed\x61\xed\x27\x80\xbf\xd3\x8f\x82\x19\xa3\x4a\xce\x2c\xf1\xd4\xc0\xa7\x10\xd0\x5d\x19\xdf\x91\xe7\xbe\x83\xf1\xca\xbe\xdd\xbd\xf5\xe4\x84\xcf\xf5\xfb\xf7\x3f\x82\xa3\xd6\x50\x66\x4d\x03\xbc\x6e\x04\xd6\x48\x9c\xe8\xec\x21\x36\x22\x58\xb6\xc6\x63\x70\xa9\x99\xb4\xfe\x44\x00\x86\x5b\xe3\xd2\x58\x26\xe9\xd7\xc0\x3f\xba\xb3\x68\x18\xd7\x09\x71\xba\x45\xe9\x62\x03\x1d\x33\x8e\x4f\x6e\x31\xa8\x3b\x35\x0d\xe1\xf4\x34\x1b\x67\xe7\x30\x48\xdf\xd9\x39\x4c\xcf\xbc\x8b\x91\x70\x92\x5e\x60\xcc\xaa\xd8\xaf\x77\x7e\xbd\x64\xc6\xd9\xbf\xb3\xcf\x43\x35\x35\xbd\xab\xce\x95\x32\x76\x68\x3e\x35\x97\x56\xbb\xb2\x59\x52\xf4\x1a\x72\x62\x1e\xee\x0b\x7e\x0c\x7c\x88\x7b\x4f\xf4\xe5\x7e\xbc\x92\x00\x2e\xb5\xb3\x34\x20\x96\xfa\xa7\x55\x44\x17\x01\x06\xe3\xa9\x5f\x5c\x68\x55\x17\x8d\xd2\xd6\x2f\x5e\x84\xda\x56\xdd\xca\x7e\x6d\x0f\x76\x43\x6b\x1f\x7b\x70\xff\xe4\x81\x4b\xff\xa8\xed\xfd\x53\xda\xfa\x0d\xf2\x51\xfa\x32\x5b\x36\xd9\x11\x95\xb3\xd9\x11\x9d\x71\xf1\x21\x17\x0f\x0a\xb0\x03\xc6\x30\xb7\xd4\x97\xae\x5e\x5f\x7d\x0d\x42\xa9\xeb\xb6\x81\x76\xde\x4a\xdb\xc2\xe5\xdb\x37\x6e\xc4\x89\x43\xc6\x64\x0f\x2b\xbb\x69\xf0\xf7\xde\x31\x6a\xde\x0b\xbe\x6c\xb5\x27\xca\x44\xca\x4d\x3c\x35\x3f\xec\xc7\xde\x63\xda\x19\xcf\xa6\x2f\xbe\xba\xa8\x9e\xfb\xfe\xda\x9d\x2c\xdc\xc9\x44\xd2\xce\xf2\x9a\x97\x5a\x65\x69\x3d\x1d\xed\xf0\x5d\x11\x26\x3c\x38\xe0\x94\x83\x43\x47\xb9\xc5\x81\x35\xad\x09\xba\x20\x44\x3a\x9e\x4a\x36\xf3\x18\x52\x7f\xfc\xd3\xc8\xc7\xe7\x57\x46\x13\xa1\xab\xc2\x52\xa8\xb6\x1a\x73\x49\x3f\x4f\x51\x9a\x96\xf2\xb2\x8f\x14\x4d\x00\x8b\x96\x46\x46\x98\x2b\xe5\xe7\x4a\xa4\x23\x08\x35\x4d\x8f\x72\x49\xad\xff\x6c\xe4\xd1\xb2\xe6\x86\xae\x77\xe3\xa4\xc6\x9a\x04\xc7\xf8\x07\xee\x26\x1f\x2e\x05\xf7\x5d\xf1\x63\x46\x1d\x5a\xb8\xfe\x4b\x53\x69\x73\xed\x46\x86\xf1\x45\x5f\xff\xec\xbb\x49\x85\xeb\x89\x24\x8d\xdf\xb8\xc9\xd5\x08\xc4\x06\x66\xee\xbb\x44\x8f\x1c\xe8\xc6\x31\x97\xf7\xae\x79\x10\x1f\x6a\x17\xb0\x00\x8e\xae\x67\x38\x1e\x09\x61\x34\x28\x16\xf9\x6e\x38\x8a\xd3\xc5\xb6\x83\xfe\x91\x01\x71\xbc\x83\x60\x6c\xc1\xef\x2e\x3f\xa4\xd4\xc5\xd3\x9e\xec\x2b\x23\xb4\xde\x64\xc6\x78\x88\xc6\x24\xb3\x47\x29\x8c\xd6\xff\x6e\xfa\xfa\xa2\x8c\xf2\x25\xd9\x32\xa1\x12\x8b\xd4\x2f\x29\xfe\xc5\x82\xfb\x89\x64\x17\x60\xf7\x5b\xc6\x14\x9f\xdc\x36\xcc\xae\xf2\x5a\x55\xad\xc0\xed\x84\x64\x0a\x07\xa1\xa2\x62\x96\xe5\x8e\x31\x72\xbb\xb0\x8d\xf0\x61\xa3\x96\x66\x7a\x53\xab\x33\xe6\xe0\x95\xf1\x10\xa1\xed\x8c\xf8\x37\x91\xd9\x67\xf1\xd2\x67\x31\xe0\x53\xc9\x8c\xc2\xd9\x27\xb2\x57\x31\x2a\x34\x9c\x1b\x5f\xa8\x35\x2b\xe9\xd9\xe8\x62\x12\xf2\x51\x54\x68\x6c\x51\xae\xd0\x0f\x97\x0b\x26\x8c\xdb\xdb\x65\x3c\xb5\x32\x01\x90\x57\xa5\x51\xd2\x43\x19\x63\x19\xfd\xf7\x88\xb3\xe7\xfe\x11\x02\x4d\x82\x13\x88\x34\x30\xdc\x9e\x49\x01\x22\x5d\x16\x7b\xca\xed\x57\xc0\xae\xfb\x0c\x29\x78\x7f\xf0\x18\x83\xdf\x4b\xd0\xbe\xa4\xee\x9f\xe3\x87\xcf\xce\x07\x19\xb2\xff\x22\xe9\x3f\xbd\x0f\x1f\x24\xbb\x0a\x4a\xdf\x23\xd1\xdd\x0e\x9f\xf7\xd9\x9f\xbe\xf1\x1e\xfb\x16\x21\xc6\x7a\xdc\x43\x24\xdc\xfe\xa4\x97\x48\xff\x08\x99\xf4\x57\x00\x00\x00\xff\xff\x44\xd4\x1f\x62\x4d\x12\x00\x00"

func dataVpcPublicPrivateMainTfBytes() ([]byte, error) {
	return bindataRead(
		_dataVpcPublicPrivateMainTf,
		"data/vpc-public-private/main.tf",
	)
}

func dataVpcPublicPrivateMainTf() (*asset, error) {
	bytes, err := dataVpcPublicPrivateMainTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/vpc-public-private/main.tf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataVpcPublicPrivateNat_user_dataConfTftpl = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\x61\x6f\xd3\x30\x10\xfd\xde\x5f\x71\x0a\x7c\x4c\x96\x31\xb6\x09\x15\x09\x29\x2c\x69\x89\x54\x9a\x90\x38\xda\x07\x84\x22\x63\x3b\x9d\x8b\x63\x5b\x8e\x5b\x86\x10\xff\x1d\x37\xe9\x58\x25\x4a\x8a\x06\xaa\x1a\xf9\xe2\x77\xef\xdd\xbb\xbb\x3c\x23\x42\x6d\x68\x40\x94\x6c\xf8\x6a\x82\xb5\xad\x37\x7a\x65\x30\x65\x53\xb0\x66\xc3\x26\x42\x11\x2c\x5c\xc0\x64\x5d\x95\x67\x15\x9a\x05\xaf\x26\x66\x23\x49\x4b\xa7\x13\x08\xe0\x23\x74\x77\x3e\x04\xc4\x07\x8f\x91\x3b\x05\x2f\xe0\x0d\x84\xda\x28\x12\x76\xdf\xba\x50\x32\x1b\x72\xbd\xbd\x74\x8f\xba\x51\xe6\x2b\x36\xf4\x75\x0f\xbb\xbe\xba\x7a\x79\xfd\x3b\xd6\xfd\x1b\x2e\x2c\x33\xa1\x6c\x6a\x57\x92\xb4\x06\x93\x2f\x75\x8b\xef\x3d\xf8\x34\xc8\x71\x6d\xf1\x67\xc1\x3a\x27\xba\xf4\x61\x91\xcd\xe7\xe9\x72\x3e\x1b\xbd\x4d\x8f\xdc\x46\x8f\xb9\x2e\x6a\x7d\x10\xbc\xe5\xd6\x1d\x83\xfd\xe1\x22\x6c\xb9\x74\xf1\xba\x07\xf6\x17\x6a\x15\x68\xc3\x1a\x7e\xef\xcc\xa6\x39\xea\xa9\x82\x59\x56\xdc\x46\x45\x1c\xc4\x46\x69\xcd\xe8\x14\xbc\x07\xac\x60\x5b\x26\x7c\xb8\x1c\x55\x4f\xff\x4d\x3d\x5d\xe6\x15\x7a\xaa\xf6\x6c\x10\x88\x8b\x2c\x3f\x59\xe3\x28\x6e\xdf\x03\x17\xb8\x17\xcf\xbf\x6f\x35\xa9\x09\xa7\xe6\xc7\x90\x17\xdd\xdc\x24\x39\x3a\x95\xb9\x1e\x1d\x66\x7e\x00\xfd\x43\x1d\xe9\x21\x9b\x6b\x69\x67\xb1\x65\xbb\x7e\xec\x0f\x5e\x52\xa2\xe8\xed\x22\x2d\xdf\x25\xb1\x5f\x24\x8b\x08\x25\xb1\x77\xa2\x42\x37\x09\x89\xed\x40\x9e\x67\x25\x2a\xb2\x0a\xb9\x0a\x8f\x19\xa5\x3e\x9c\x9f\xf5\xbf\xf0\x7c\x60\x7d\x1f\x95\x1f\xaa\xa4\x88\xe2\xe4\xb8\xf7\x7e\x76\x4f\xe8\xd9\x43\x9e\xf6\xc1\x12\xbd\x73\x48\xb5\x32\xbb\xa5\xb9\x38\xee\x7c\x99\xdc\x9e\x60\x4d\x1f\x59\xff\x53\xe7\x0e\x18\xb9\x5b\x6f\xf5\xf7\xb6\xd6\xa3\xdf\x6d\xfe\x0b\xb8\x5f\x83\x9f\x01\x00\x00\xff\xff\x79\x63\xd4\xe0\xc0\x04\x00\x00"

func dataVpcPublicPrivateNat_user_dataConfTftplBytes() ([]byte, error) {
	return bindataRead(
		_dataVpcPublicPrivateNat_user_dataConfTftpl,
		"data/vpc-public-private/nat_user_data.conf.tftpl",
	)
}

func dataVpcPublicPrivateNat_user_dataConfTftpl() (*asset, error) {
	bytes, err := dataVpcPublicPrivateNat_user_dataConfTftplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/vpc-public-private/nat_user_data.conf.tftpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataVpcPublicPrivateOutputsTf = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\xc1\x6e\xdb\x30\x0c\x86\xef\x7e\x0a\xc2\xd9\xa1\x05\x5c\x03\x7b\x80\x5d\x76\xd9\x71\x97\xdd\x0d\x5a\xa2\x63\x22\x12\x65\x48\x54\x8a\xa0\xe8\xbb\x8f\xb6\x1b\x0c\x5d\x12\x34\xb7\xe8\xff\xff\x8f\x34\xc9\x03\xfc\x22\xa1\x8c\x4a\x1e\xc6\x0b\xfc\x56\x4d\x1d\xf8\x04\x92\x14\xc8\xb3\x42\x44\xa9\x18\xc2\xa5\x6f\x0e\xcd\x61\xd3\xa1\x16\x2a\x90\xaa\x2e\x55\x0b\x60\x01\x9d\x09\x22\xe9\x9c\x3c\x4c\x29\x83\x66\x94\x32\x51\xce\x2c\x47\xf0\xa8\x08\x53\x4e\x11\xfe\xd8\x0b\x9a\x1e\x0d\x33\xa2\x3b\x01\x8b\xb1\x36\xa0\xce\xa8\xf0\xca\x21\xc0\x48\x2b\x7d\xe7\x78\x5a\x42\xba\x94\x0e\xa6\xaa\x35\x93\xf9\xa7\x8c\x45\x73\x75\xeb\x5f\xa3\xb8\x19\xe5\x48\x1d\x90\xba\xbd\xbb\x9f\xe4\xd0\xe2\x90\xa6\xad\x27\x8e\x4b\xca\x8a\xe2\xae\x2f\x26\x9d\x31\x54\xeb\x7e\xe5\xef\xa5\x93\xe1\xc5\x29\x27\xe9\xc0\xe1\xc6\x2d\x73\xaa\xc1\xaf\xbd\x28\x9e\x48\x80\xaf\x61\x93\x21\x26\xcf\x13\x93\xef\x9b\x66\x1f\x01\xb4\x99\x8e\x16\x6f\xe1\xad\x01\xfb\x6d\x15\xe0\x07\xb4\xdf\xde\xce\x98\x7b\x7c\x2d\xc3\x6e\x78\x6f\x9b\xf7\x7f\xa1\xf3\xe2\x06\xf6\x77\x42\x6b\xc0\xc4\x3e\x22\x4b\xcf\xfe\x36\xe5\xd8\xe7\xaf\x72\xab\x67\x18\x43\x72\xa7\xcf\xf9\x52\x47\x21\x7d\x59\xea\x18\xd8\x3d\x80\xec\x9e\x7e\xf7\xdc\x74\x70\x25\x64\x3e\xdb\xd1\x7c\x81\xd8\x4d\x37\x8c\x13\x5d\x06\xc1\xf8\x28\xbd\xca\x0b\x72\xbe\x3f\x82\xd1\x6e\xc0\xa6\x39\xcc\xa9\xe8\x03\x00\x4b\xd9\xd6\xde\x7f\x78\x3f\xbe\x65\xe0\xe5\x3e\xca\x6e\xe6\x76\xa2\x75\xac\xa2\xf5\x93\x7f\xbb\xc0\xfb\x5b\xa3\x40\x91\x44\x9f\xca\x12\x58\x9f\xda\x97\xb6\x83\xff\x16\xf9\xdc\xc1\xf7\xe7\xad\xfe\xdf\x00\x00\x00\xff\xff\x1e\xf4\xa2\x0f\x74\x03\x00\x00"

func dataVpcPublicPrivateOutputsTfBytes() ([]byte, error) {
	return bindataRead(
		_dataVpcPublicPrivateOutputsTf,
		"data/vpc-public-private/outputs.tf",
	)
}

func dataVpcPublicPrivateOutputsTf() (*asset, error) {
	bytes, err := dataVpcPublicPrivateOutputsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/vpc-public-private/outputs.tf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dataVpcPublicPrivateVariablesTf = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x90\x41\x4e\xc6\x20\x10\x85\xf7\x9c\xe2\x85\x03\x78\x03\x17\x7f\xdc\xb8\x96\x85\xcb\x66\x4a\xa7\x2d\x91\x40\x33\x33\xda\x18\xe3\xdd\xa5\x74\xa5\x89\xfd\x09\x1b\xe0\xe3\x7b\x0f\x3e\x48\x12\x8d\x99\xe1\x69\xd7\x81\x62\x64\xd5\xe1\x8d\x3f\x3d\xbe\x1c\xda\x98\x58\xa3\xa4\xcd\x52\x2d\x78\x84\xbf\x75\x00\x0d\xc0\x5c\x05\xb7\xd7\xe0\xdd\xb7\x73\xbf\x2d\xca\x51\xd8\x2e\x2c\xa1\x03\x77\x2c\xc2\x4b\xc3\xff\x31\xbc\xf4\x43\xec\x2b\x0b\x63\x6f\x33\xe5\x8c\xba\xb1\x90\xf1\xc3\x1f\x99\xea\x3a\x6c\xef\x63\x4e\xf1\xa2\xd2\x53\x2d\xc6\xc5\x14\x75\x06\x15\x84\xf0\x8c\xf3\x4e\x6f\x69\x15\x8b\x50\x31\x9c\x1f\x74\xac\xdb\x0b\x5a\xd6\x84\x54\xd4\xa8\xb4\xdd\x23\xf5\x27\x00\x00\xff\xff\xac\x64\x12\x68\x4e\x01\x00\x00"

func dataVpcPublicPrivateVariablesTfBytes() ([]byte, error) {
	return bindataRead(
		_dataVpcPublicPrivateVariablesTf,
		"data/vpc-public-private/variables.tf",
	)
}

func dataVpcPublicPrivateVariablesTf() (*asset, error) {
	bytes, err := dataVpcPublicPrivateVariablesTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/vpc-public-private/variables.tf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/vpc-public-private/main.tf": dataVpcPublicPrivateMainTf,
	"data/vpc-public-private/nat_user_data.conf.tftpl": dataVpcPublicPrivateNat_user_dataConfTftpl,
	"data/vpc-public-private/outputs.tf": dataVpcPublicPrivateOutputsTf,
	"data/vpc-public-private/variables.tf": dataVpcPublicPrivateVariablesTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"vpc-public-private": &bintree{nil, map[string]*bintree{
			"main.tf": &bintree{dataVpcPublicPrivateMainTf, map[string]*bintree{
			}},
			"nat_user_data.conf.tftpl": &bintree{dataVpcPublicPrivateNat_user_dataConfTftpl, map[string]*bintree{
			}},
			"outputs.tf": &bintree{dataVpcPublicPrivateOutputsTf, map[string]*bintree{
			}},
			"variables.tf": &bintree{dataVpcPublicPrivateVariablesTf, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

