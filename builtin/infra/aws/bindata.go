// Code generated by go-bindata.
// sources:
// data/vpc-public-private/main.tf
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"reflect"
	"strings"
	"unsafe"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	var empty [0]byte
	sx := (*reflect.StringHeader)(unsafe.Pointer(&data))
	b := empty[:]
	bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	bx.Data = sx.Data
	bx.Len = len(data)
	bx.Cap = bx.Len

	gz, err := gzip.NewReader(bytes.NewBuffer(b))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataVpcPublicPrivateMainTf = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x91\x3d\x4f\xc3\x30\x10\x86\x77\xff\x8a\x57\x2e\x23\x0a\xb4\x42\x6c\x4c\x0c\x4c\x7c\x0c\x88\xb5\x72\xec\x53\x63\xe1\xda\x95\x7d\x69\x14\x55\xf9\xef\xd8\xf9\x60\x00\x51\x90\x38\x6f\xe7\x57\x77\xcf\xa3\x5b\xe1\x81\x3c\x45\xc5\x64\x50\xf7\x78\x66\x0e\x97\x30\x01\x3e\x30\xc8\x58\xc6\x5e\xf9\x56\x39\xd7\x57\x42\xac\xf0\xa8\xac\xc7\xdb\xcb\x3d\xb8\x51\x8c\xce\x3a\x07\x1d\x3c\x97\x2e\x1d\x29\xf6\xdc\x58\xbf\xab\x44\xa4\x14\xda\xa8\x09\x52\x75\x69\x7b\x3c\x68\x09\xb9\xcf\x21\x89\x93\x40\x2e\x6d\x4d\xdc\xd6\x2e\xe8\x77\xdc\x41\xae\xaf\xab\xf1\x5d\xad\x6f\xa5\x18\xff\x59\xed\xd2\x1c\x2d\xf5\xa4\xf6\x54\x82\x21\xc3\xc9\xb1\x3b\x88\xa1\xe0\xbc\x36\x84\x43\x5b\x3b\xab\x91\xda\xda\x13\xc3\x26\x74\x0d\x45\xc2\x82\x90\x0a\xa0\x27\x5d\xfc\x38\x64\x6e\x82\xf5\x4c\xb1\x84\x47\xfe\x5d\xf8\x82\x3b\x4d\xca\xc4\xd3\xe4\x85\x39\x5b\x6c\xad\x29\x18\x17\xa7\xd9\xaa\x2a\x4e\x95\x35\x83\xfc\xc9\x6a\x9d\xad\x36\x37\xe7\xad\xe6\x35\xdf\xbc\xa2\x3d\xe6\xab\x9c\x11\x1b\x6f\xa0\xe2\x22\xa4\x1c\x82\x77\xfd\xaf\x56\xd3\xdc\x7f\x69\x6d\xfe\xa2\x35\xef\xf9\xf4\xfa\x08\x00\x00\xff\xff\x54\xe3\x53\x62\x6a\x02\x00\x00"

func dataVpcPublicPrivateMainTfBytes() ([]byte, error) {
	return bindataRead(
		_dataVpcPublicPrivateMainTf,
		"data/vpc-public-private/main.tf",
	)
}

func dataVpcPublicPrivateMainTf() (*asset, error) {
	bytes, err := dataVpcPublicPrivateMainTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/vpc-public-private/main.tf", size: 618, mode: os.FileMode(420), modTime: time.Unix(1433415322, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/vpc-public-private/main.tf": dataVpcPublicPrivateMainTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"vpc-public-private": &bintree{nil, map[string]*bintree{
			"main.tf": &bintree{dataVpcPublicPrivateMainTf, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, path.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

