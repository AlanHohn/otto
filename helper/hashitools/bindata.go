// Code generated by go-bindata.
// sources:
// data/vagrant-darwin/install.sh
// DO NOT EDIT!

package hashitools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataVagrantDarwinInstallSh = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\xc1\x4e\x03\x21\x10\x86\xef\x3c\xc5\x2f\x36\x46\x0f\x0b\xa9\x57\x93\x46\xe3\x23\x98\xf4\x62\x3c\xd0\x32\x61\x49\x59\x68\x60\xe8\x45\x7d\x77\x61\x5b\xa3\xd9\x9e\x48\xf8\xff\x6f\xbe\x99\xdb\x1b\xbd\xf3\x51\xef\x4c\x19\x45\x21\xc6\x40\x42\x24\xba\x7f\xc0\x27\x56\xcf\x78\xdc\xdc\xad\xf1\x85\x90\x9c\xa3\x8c\x81\x91\x98\x13\x36\xd0\x96\x4e\x3a\xd6\x10\x9e\xf0\x2d\x52\x98\xeb\xb4\x1f\x13\xe4\x7b\x6f\x7c\x34\x56\xf6\xa8\x65\x90\x2f\xcc\x66\x3f\xfa\xe8\xb0\x35\x2e\x9b\xc8\xb0\xbe\x1c\xe0\x27\xe3\x48\x29\x25\x9b\x0f\xa3\xf5\x95\x7d\x80\x99\xbb\x58\xad\xcf\xe8\x1b\x9b\xcc\xff\x49\x1f\x0b\x9b\x10\x28\xcf\x60\xa9\x36\xfd\x7d\x61\x38\x1e\x1c\xf4\x36\x85\x3a\x51\xd1\x17\xe4\xf7\x55\x3d\x1c\xda\x3c\xd7\xae\x94\x5a\x9e\x05\xcb\xb9\x56\xe1\x35\x90\x89\xdd\x59\x8f\xcb\xed\x2c\xcd\xdb\x5d\x29\x7a\x27\x4f\x38\x5d\x4c\x76\x72\xe2\x27\x00\x00\xff\xff\x66\x51\x4f\xd7\x58\x01\x00\x00"

func dataVagrantDarwinInstallShBytes() ([]byte, error) {
	return bindataRead(
		_dataVagrantDarwinInstallSh,
		"data/vagrant-darwin/install.sh",
	)
}

func dataVagrantDarwinInstallSh() (*asset, error) {
	bytes, err := dataVagrantDarwinInstallShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/vagrant-darwin/install.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/vagrant-darwin/install.sh": dataVagrantDarwinInstallSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"vagrant-darwin": &bintree{nil, map[string]*bintree{
			"install.sh": &bintree{dataVagrantDarwinInstallSh, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

