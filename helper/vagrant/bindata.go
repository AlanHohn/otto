// Code generated by go-bindata.
// sources:
// data/darwin/install.sh
// DO NOT EDIT!

package vagrant

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDarwinInstallSh = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x31\x4f\xfb\x30\x14\xc4\xf7\x7c\x8a\xfb\xa7\xd5\x5f\xed\x10\x5b\x65\x45\xaa\x40\x30\xb2\x21\x75\x41\x0c\xaf\xf1\xc3\xb1\xea\xd8\x95\xfd\xdc\x0e\xc0\x77\x27\x49\x41\x94\x76\xb2\xe4\xbb\xfb\xdd\xe9\xcd\xfe\xe9\xad\x0b\x7a\x4b\xb9\xab\x32\x0b\x1a\xae\xaa\xc8\x8b\x25\xde\x31\xbf\xc3\xcd\xfa\xff\x0a\x1f\xf0\xd1\x5a\x4e\x68\x04\x51\x24\x62\x0d\x6d\xf8\xa0\x43\xf1\xfe\x16\x9f\x55\xf4\x93\x9d\xdb\x2e\xa2\x7e\x19\x1d\xaf\x43\xb6\x1e\xa5\x41\x43\xfd\x18\x8f\xc1\x47\x32\x2e\x58\x6c\xc8\x26\x0a\x82\x85\x74\x2e\xa3\xa5\x00\xa1\x1d\x83\xf0\xc6\x47\xf4\x2e\x14\xe1\xbc\x54\x4a\xd5\x55\x5b\x92\x47\xf3\x84\x66\x86\xf9\x0a\xeb\xc3\x29\xa8\x4c\x6f\x4f\xd4\x7b\x11\x6a\xbb\x73\xa6\x71\x79\x07\xd7\x93\xe5\x09\x10\x19\x9d\x71\x45\x9c\x07\x4d\x5e\x5c\x31\x9e\x85\x92\x9c\x23\x5c\xc8\x42\xde\x73\x9a\x08\xb9\x98\xf8\xfb\x85\x66\xbf\xb3\xd0\x9b\xe8\x4b\xcf\x59\x7f\x47\x7e\x5e\x35\x8a\xcd\xc0\xb3\xc3\x11\x6b\x5d\x9f\x0a\x2e\xb9\x46\xe1\xc1\x33\x85\xb1\xb3\xec\x2f\x67\x1a\x9e\x66\x5e\x55\x8c\x9e\xd4\xff\x99\xff\x15\x00\x00\xff\xff\xda\x94\xe8\x7c\xb7\x01\x00\x00"

func dataDarwinInstallShBytes() ([]byte, error) {
	return bindataRead(
		_dataDarwinInstallSh,
		"data/darwin/install.sh",
	)
}

func dataDarwinInstallSh() (*asset, error) {
	bytes, err := dataDarwinInstallShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/darwin/install.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/darwin/install.sh": dataDarwinInstallSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"darwin": &bintree{nil, map[string]*bintree{
			"install.sh": &bintree{dataDarwinInstallSh, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

